package c;
import com.sun.jna.Callback;
import com.sun.jna.Structure;
import com.sun.jna.Union;
import java.util.Arrays;
import java.util.List;
/**
 * <i>native declaration : bits/siginfo.h:362</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class sigevent extends Structure {
	/** C type : sigval_t */
	public sigval sigev_value;
	public int sigev_signo;
	public int sigev_notify;
	/** C type : _sigev_un_union */
	public _sigev_un_union _sigev_un;
	/** <i>native declaration : bits/siginfo.h:361</i> */
	public static abstract class _sigev_un_union extends Union {
		/** Conversion Error : sizeof(int) */
		/**
		 * When SIGEV_SIGNAL and SIGEV_THREAD_ID set, LWP ID of the<br>
		 * thread to receive the signal.<br>
		 * C type : __pid_t
		 */
		public int _tid;
		/** C type : _sigev_thread_struct */
		public _sigev_thread_struct _sigev_thread;
		/** <i>native declaration : bits/siginfo.h:360</i> */
		public static class _sigev_thread_struct extends Structure {
			/**
			 * Function to start.<br>
			 * C type : _function_callback*
			 */
			public sigevent._sigev_un_union._sigev_thread_struct._function_callback _function;
			/**
			 * Thread attributes.<br>
			 * C type : pthread_attr_t*
			 */
			public c.pthread_attr_t.ByReference _attribute;
			/** <i>native declaration : bits/siginfo.h:359</i> */
			public interface _function_callback extends Callback {
				/** @param sigval_t1 Function to start. */
				void apply(sigval.ByValue sigval_t1);
			};
			public _sigev_thread_struct() {
				super();
			}
			protected List<? > getFieldOrder() {
				return Arrays.asList("_function", "_attribute");
			}
			/**
			 * @param _function Function to start.<br>
			 * C type : _function_callback*<br>
			 * @param _attribute Thread attributes.<br>
			 * C type : pthread_attr_t*
			 */
			public _sigev_thread_struct(sigevent._sigev_un_union._sigev_thread_struct._function_callback _function, c.pthread_attr_t.ByReference _attribute) {
				super();
				this._function = _function;
				this._attribute = _attribute;
			}
			public static class ByReference extends _sigev_thread_struct implements Structure.ByReference {
				
			};
			public static class ByValue extends _sigev_thread_struct implements Structure.ByValue {
				
			};
		};
		public _sigev_un_union() {
			super();
		}
		/**
		 * @param _tid When SIGEV_SIGNAL and SIGEV_THREAD_ID set, LWP ID of the<br>
		 * thread to receive the signal.<br>
		 * C type : __pid_t
		 */
		public _sigev_un_union(int _tid) {
			super();
			this._tid = _tid;
			setType(Integer.TYPE);
		}
		/** @param _sigev_thread C type : _sigev_thread_struct */
		public _sigev_un_union(_sigev_thread_struct _sigev_thread) {
			super();
			this._sigev_thread = _sigev_thread;
			setType(_sigev_thread_struct.class);
		}
		public static abstract class ByReference extends _sigev_un_union implements Structure.ByReference {
			
		};
		public static abstract class ByValue extends _sigev_un_union implements Structure.ByValue {
			
		};
	};
	public sigevent() {
		super();
	}
	protected List<? > getFieldOrder() {
		return Arrays.asList("sigev_value", "sigev_signo", "sigev_notify", "_sigev_un");
	}
	/**
	 * @param sigev_value C type : sigval_t<br>
	 * @param _sigev_un C type : _sigev_un_union
	 */
	public sigevent(sigval sigev_value, int sigev_signo, int sigev_notify, _sigev_un_union _sigev_un) {
		super();
		this.sigev_value = sigev_value;
		this.sigev_signo = sigev_signo;
		this.sigev_notify = sigev_notify;
		this._sigev_un = _sigev_un;
	}
	public static class ByReference extends sigevent implements Structure.ByReference {
		
	};
	public static class ByValue extends sigevent implements Structure.ByValue {
		
	};
}
