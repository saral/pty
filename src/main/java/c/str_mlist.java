package c;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * <i>native declaration : x86_64-linux-gnu/bits/stropts.h:107</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class str_mlist extends Structure {
	/** C type : char[8 + 1] */
	public byte[] l_name = new byte[8 + 1];
	public str_mlist() {
		super();
	}
	protected List<? > getFieldOrder() {
		return Arrays.asList("l_name");
	}
	/** @param l_name C type : char[8 + 1] */
	public str_mlist(byte l_name[]) {
		super();
		if ((l_name.length != this.l_name.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.l_name = l_name;
	}
	public static class ByReference extends str_mlist implements Structure.ByReference {
		
	};
	public static class ByValue extends str_mlist implements Structure.ByValue {
		
	};
}
