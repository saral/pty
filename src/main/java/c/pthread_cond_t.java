package c;
import com.sun.jna.NativeLong;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import com.sun.jna.Union;
import java.util.Arrays;
import java.util.List;
/**
 * <i>native declaration : bits/pthreadtypes.h:777</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class pthread_cond_t extends Union {
	/** C type : __data_struct */
	public __data_struct __data;
	/** C type : char[48] */
	public byte[] __size = new byte[48];
	public NativeLong __align;
	/** <i>native declaration : bits/pthreadtypes.h:776</i> */
	public static class __data_struct extends Structure {
		public int __lock;
		public int __futex;
		public NativeLong __total_seq;
		public NativeLong __wakeup_seq;
		public NativeLong __woken_seq;
		/** C type : void* */
		public Pointer __mutex;
		public int __nwaiters;
		public int __broadcast_seq;
		public __data_struct() {
			super();
		}
		protected List<? > getFieldOrder() {
			return Arrays.asList("__lock", "__futex", "__total_seq", "__wakeup_seq", "__woken_seq", "__mutex", "__nwaiters", "__broadcast_seq");
		}
		/** @param __mutex C type : void* */
		public __data_struct(int __lock, int __futex, NativeLong __total_seq, NativeLong __wakeup_seq, NativeLong __woken_seq, Pointer __mutex, int __nwaiters, int __broadcast_seq) {
			super();
			this.__lock = __lock;
			this.__futex = __futex;
			this.__total_seq = __total_seq;
			this.__wakeup_seq = __wakeup_seq;
			this.__woken_seq = __woken_seq;
			this.__mutex = __mutex;
			this.__nwaiters = __nwaiters;
			this.__broadcast_seq = __broadcast_seq;
		}
		public static class ByReference extends __data_struct implements Structure.ByReference {
			
		};
		public static class ByValue extends __data_struct implements Structure.ByValue {
			
		};
	};
	public pthread_cond_t() {
		super();
	}
	public pthread_cond_t(NativeLong __align) {
		super();
		this.__align = __align;
		setType(NativeLong.class);
	}
	/** @param __data C type : __data_struct */
	public pthread_cond_t(__data_struct __data) {
		super();
		this.__data = __data;
		setType(__data_struct.class);
	}
	/** @param __size C type : char[48] */
	public pthread_cond_t(byte __size[]) {
		super();
		if ((__size.length != this.__size.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.__size = __size;
		setType(byte[].class);
	}
	public static class ByReference extends pthread_cond_t implements Structure.ByReference {
		
	};
	public static class ByValue extends pthread_cond_t implements Structure.ByValue {
		
	};
}
