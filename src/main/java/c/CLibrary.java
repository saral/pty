package c;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.DoubleBuffer;
import java.nio.IntBuffer;
import java.nio.ShortBuffer;

import com.sun.jna.Callback;
import com.sun.jna.Library;
import com.sun.jna.Native;
import com.sun.jna.NativeLibrary;
import com.sun.jna.NativeLong;
import com.sun.jna.Pointer;
import com.sun.jna.PointerType;
import com.sun.jna.WString;
import com.sun.jna.ptr.DoubleByReference;
import com.sun.jna.ptr.IntByReference;
import com.sun.jna.ptr.NativeLongByReference;
import com.sun.jna.ptr.PointerByReference;
import com.sun.jna.ptr.ShortByReference;
/**
 * JNA Wrapper for library <b>c</b><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public interface CLibrary extends Library {
	public static final String JNA_LIBRARY_NAME = (com.sun.jna.Platform.isWindows() ? "msvcrt" : "c");
	public static final NativeLibrary JNA_NATIVE_LIB = NativeLibrary.getInstance(CLibrary.JNA_LIBRARY_NAME);
	public static final CLibrary INSTANCE = (CLibrary)Native.loadLibrary(CLibrary.JNA_LIBRARY_NAME, CLibrary.class);
	/** Sent by asynch name lookup completion. */
	public static final int SI_ASYNCNL = -60;
	/** Sent by tkill. */
	public static final int SI_TKILL = -6;
	/** Sent by queued SIGIO. */
	public static final int SI_SIGIO = -5;
	/** Sent by AIO completion. */
	public static final int SI_ASYNCIO = -4;
	/** Sent by real time mesq state change. */
	public static final int SI_MESGQ = -3;
	/** Sent by timer expiration. */
	public static final int SI_TIMER = -2;
	/** Sent by sigqueue. */
	public static final int SI_QUEUE = -1;
	/** Sent by kill, sigsend. */
	public static final int SI_USER = 0;
	/** Send by kernel. */
	public static final int SI_KERNEL = 0x80;
	/** Illegal opcode. */
	public static final int ILL_ILLOPC = 1;
	/** Illegal operand. */
	public static final int ILL_ILLOPN = 2;
	/** Illegal addressing mode. */
	public static final int ILL_ILLADR = 3;
	/** Illegal trap. */
	public static final int ILL_ILLTRP = 4;
	/** Privileged opcode. */
	public static final int ILL_PRVOPC = 5;
	/** Privileged register. */
	public static final int ILL_PRVREG = 6;
	/** Coprocessor error. */
	public static final int ILL_COPROC = 7;
	/** Internal stack error. */
	public static final int ILL_BADSTK = 8;
	/** Integer divide by zero. */
	public static final int FPE_INTDIV = 1;
	/** Integer overflow. */
	public static final int FPE_INTOVF = 2;
	/** Floating point divide by zero. */
	public static final int FPE_FLTDIV = 3;
	/** Floating point overflow. */
	public static final int FPE_FLTOVF = 4;
	/** Floating point underflow. */
	public static final int FPE_FLTUND = 5;
	/** Floating point inexact result. */
	public static final int FPE_FLTRES = 6;
	/** Floating point invalid operation. */
	public static final int FPE_FLTINV = 7;
	/** Subscript out of range. */
	public static final int FPE_FLTSUB = 8;
	/** Address not mapped to object. */
	public static final int SEGV_MAPERR = 1;
	/** Invalid permissions for mapped object. */
	public static final int SEGV_ACCERR = 2;
	/** Invalid address alignment. */
	public static final int BUS_ADRALN = 1;
	/** Non-existant physical address. */
	public static final int BUS_ADRERR = 2;
	/** Object specific hardware error. */
	public static final int BUS_OBJERR = 3;
	/** Process breakpoint. */
	public static final int TRAP_BRKPT = 1;
	/** Process trace trap. */
	public static final int TRAP_TRACE = 2;
	/** Child has exited. */
	public static final int CLD_EXITED = 1;
	/** Child was killed. */
	public static final int CLD_KILLED = 2;
	/** Child terminated abnormally. */
	public static final int CLD_DUMPED = 3;
	/** Traced child has trapped. */
	public static final int CLD_TRAPPED = 4;
	/** Child has stopped. */
	public static final int CLD_STOPPED = 5;
	/** Stopped child has continued. */
	public static final int CLD_CONTINUED = 6;
	/** Data input available. */
	public static final int POLL_IN = 1;
	/** Output buffers available. */
	public static final int POLL_OUT = 2;
	/** Input message available. */
	public static final int POLL_MSG = 3;
	/** I/O error. */
	public static final int POLL_ERR = 4;
	/** High priority input available. */
	public static final int POLL_PRI = 5;
	/** Device disconnected. */
	public static final int POLL_HUP = 6;
	/** Notify via signal. */
	public static final int SIGEV_SIGNAL = 0;
	/** Other notification: meaningless. */
	public static final int SIGEV_NONE = 1;
	/** Deliver via thread creation. */
	public static final int SIGEV_THREAD = 2;
	/** Send signal to specific thread. */
	public static final int SIGEV_THREAD_ID = 4;
	public static final int SS_ONSTACK = 1;
	public static final int SS_DISABLE = 2;
	/**
	 * This is the structure from the libstdc++ codecvt class.<br>
	 * <i>native declaration : libio.h:1473</i><br>
	 * enum values
	 */
	public static interface __codecvt_result {
		/** <i>native declaration : libio.h:1469</i> */
		public static final int __codecvt_ok = 0;
		/** <i>native declaration : libio.h:1470</i> */
		public static final int __codecvt_partial = 1;
		/** <i>native declaration : libio.h:1471</i> */
		public static final int __codecvt_error = 2;
		/** <i>native declaration : libio.h:1472</i> */
		public static final int __codecvt_noconv = 3;
	};
	public static final int _PC_LINK_MAX = 0;
	public static final int _PC_MAX_CANON = 1;
	public static final int _PC_MAX_INPUT = 2;
	public static final int _PC_NAME_MAX = 3;
	public static final int _PC_PATH_MAX = 4;
	public static final int _PC_PIPE_BUF = 5;
	public static final int _PC_CHOWN_RESTRICTED = 6;
	public static final int _PC_NO_TRUNC = 7;
	public static final int _PC_VDISABLE = 8;
	public static final int _PC_SYNC_IO = 9;
	public static final int _PC_ASYNC_IO = 10;
	public static final int _PC_PRIO_IO = 11;
	public static final int _PC_SOCK_MAXBUF = 12;
	public static final int _PC_FILESIZEBITS = 13;
	public static final int _PC_REC_INCR_XFER_SIZE = 14;
	public static final int _PC_REC_MAX_XFER_SIZE = 15;
	public static final int _PC_REC_MIN_XFER_SIZE = 16;
	public static final int _PC_REC_XFER_ALIGN = 17;
	public static final int _PC_ALLOC_SIZE_MIN = 18;
	public static final int _PC_SYMLINK_MAX = 19;
	public static final int _PC_2_SYMLINKS = 20;
	public static final int _SC_ARG_MAX = 0;
	public static final int _SC_CHILD_MAX = 1;
	public static final int _SC_CLK_TCK = 2;
	public static final int _SC_NGROUPS_MAX = 3;
	public static final int _SC_OPEN_MAX = 4;
	public static final int _SC_STREAM_MAX = 5;
	public static final int _SC_TZNAME_MAX = 6;
	public static final int _SC_JOB_CONTROL = 7;
	public static final int _SC_SAVED_IDS = 8;
	public static final int _SC_REALTIME_SIGNALS = 9;
	public static final int _SC_PRIORITY_SCHEDULING = 10;
	public static final int _SC_TIMERS = 11;
	public static final int _SC_ASYNCHRONOUS_IO = 12;
	public static final int _SC_PRIORITIZED_IO = 13;
	public static final int _SC_SYNCHRONIZED_IO = 14;
	public static final int _SC_FSYNC = 15;
	public static final int _SC_MAPPED_FILES = 16;
	public static final int _SC_MEMLOCK = 17;
	public static final int _SC_MEMLOCK_RANGE = 18;
	public static final int _SC_MEMORY_PROTECTION = 19;
	public static final int _SC_MESSAGE_PASSING = 20;
	public static final int _SC_SEMAPHORES = 21;
	public static final int _SC_SHARED_MEMORY_OBJECTS = 22;
	public static final int _SC_AIO_LISTIO_MAX = 23;
	public static final int _SC_AIO_MAX = 24;
	public static final int _SC_AIO_PRIO_DELTA_MAX = 25;
	public static final int _SC_DELAYTIMER_MAX = 26;
	public static final int _SC_MQ_OPEN_MAX = 27;
	public static final int _SC_MQ_PRIO_MAX = 28;
	public static final int _SC_VERSION = 29;
	public static final int _SC_PAGESIZE = 30;
	public static final int _SC_RTSIG_MAX = 31;
	public static final int _SC_SEM_NSEMS_MAX = 32;
	public static final int _SC_SEM_VALUE_MAX = 33;
	public static final int _SC_SIGQUEUE_MAX = 34;
	public static final int _SC_TIMER_MAX = 35;
	/**
	 * Values for the argument to `sysconf'<br>
	 * corresponding to _POSIX2_* symbols.
	 */
	public static final int _SC_BC_BASE_MAX = 36;
	public static final int _SC_BC_DIM_MAX = 37;
	public static final int _SC_BC_SCALE_MAX = 38;
	public static final int _SC_BC_STRING_MAX = 39;
	public static final int _SC_COLL_WEIGHTS_MAX = 40;
	public static final int _SC_EQUIV_CLASS_MAX = 41;
	public static final int _SC_EXPR_NEST_MAX = 42;
	public static final int _SC_LINE_MAX = 43;
	public static final int _SC_RE_DUP_MAX = 44;
	public static final int _SC_CHARCLASS_NAME_MAX = 45;
	public static final int _SC_2_VERSION = 46;
	public static final int _SC_2_C_BIND = 47;
	public static final int _SC_2_C_DEV = 48;
	public static final int _SC_2_FORT_DEV = 49;
	public static final int _SC_2_FORT_RUN = 50;
	public static final int _SC_2_SW_DEV = 51;
	public static final int _SC_2_LOCALEDEF = 52;
	public static final int _SC_PII = 53;
	public static final int _SC_PII_XTI = 54;
	public static final int _SC_PII_SOCKET = 55;
	public static final int _SC_PII_INTERNET = 56;
	public static final int _SC_PII_OSI = 57;
	public static final int _SC_POLL = 58;
	public static final int _SC_SELECT = 59;
	public static final int _SC_UIO_MAXIOV = 60;
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:2502</i><br>
	 * _SC_IOV_MAX = _SC_UIO_MAXIOV
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:2503</i><br>
	 * _SC_PII_INTERNET_STREAM
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:2504</i><br>
	 * _SC_PII_INTERNET_DGRAM
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:2505</i><br>
	 * _SC_PII_OSI_COTS
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:2506</i><br>
	 * _SC_PII_OSI_CLTS
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:2507</i><br>
	 * _SC_PII_OSI_M
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:2508</i><br>
	 * _SC_T_IOV_MAX
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * Values according to POSIX 1003.1c (POSIX threads).<br>
	 * <i>native declaration : bits/confname.h:2510</i><br>
	 * Values according to POSIX 1003.1c (POSIX threads). * /<br>
	 * _SC_THREADS
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:2511</i><br>
	 * _SC_THREAD_SAFE_FUNCTIONS
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:2512</i><br>
	 * _SC_GETGR_R_SIZE_MAX
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:2513</i><br>
	 * _SC_GETPW_R_SIZE_MAX
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:2514</i><br>
	 * _SC_LOGIN_NAME_MAX
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:2515</i><br>
	 * _SC_TTY_NAME_MAX
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:2516</i><br>
	 * _SC_THREAD_DESTRUCTOR_ITERATIONS
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:2517</i><br>
	 * _SC_THREAD_KEYS_MAX
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:2518</i><br>
	 * _SC_THREAD_STACK_MIN
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:2519</i><br>
	 * _SC_THREAD_THREADS_MAX
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:2520</i><br>
	 * _SC_THREAD_ATTR_STACKADDR
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:2521</i><br>
	 * _SC_THREAD_ATTR_STACKSIZE
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:2522</i><br>
	 * _SC_THREAD_PRIORITY_SCHEDULING
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:2523</i><br>
	 * _SC_THREAD_PRIO_INHERIT
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:2524</i><br>
	 * _SC_THREAD_PRIO_PROTECT
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:2525</i><br>
	 * _SC_THREAD_PROCESS_SHARED
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:2526</i><br>
	 * _SC_NPROCESSORS_CONF
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:2527</i><br>
	 * _SC_NPROCESSORS_ONLN
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:2528</i><br>
	 * _SC_PHYS_PAGES
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:2529</i><br>
	 * _SC_AVPHYS_PAGES
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:2530</i><br>
	 * _SC_ATEXIT_MAX
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:2531</i><br>
	 * _SC_PASS_MAX
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:2532</i><br>
	 * _SC_XOPEN_VERSION
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:2533</i><br>
	 * _SC_XOPEN_XCU_VERSION
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:2534</i><br>
	 * _SC_XOPEN_UNIX
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:2535</i><br>
	 * _SC_XOPEN_CRYPT
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:2536</i><br>
	 * _SC_XOPEN_ENH_I18N
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:2537</i><br>
	 * _SC_XOPEN_SHM
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:2538</i><br>
	 * _SC_2_CHAR_TERM
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:2539</i><br>
	 * _SC_2_C_VERSION
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:2540</i><br>
	 * _SC_2_UPE
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:2541</i><br>
	 * _SC_XOPEN_XPG2
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:2542</i><br>
	 * _SC_XOPEN_XPG3
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:2543</i><br>
	 * _SC_XOPEN_XPG4
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:2544</i><br>
	 * _SC_CHAR_BIT
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:2545</i><br>
	 * _SC_CHAR_MAX
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:2546</i><br>
	 * _SC_CHAR_MIN
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:2547</i><br>
	 * _SC_INT_MAX
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:2548</i><br>
	 * _SC_INT_MIN
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:2549</i><br>
	 * _SC_LONG_BIT
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:2550</i><br>
	 * _SC_WORD_BIT
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:2551</i><br>
	 * _SC_MB_LEN_MAX
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:2552</i><br>
	 * _SC_NZERO
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:2553</i><br>
	 * _SC_SSIZE_MAX
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:2554</i><br>
	 * _SC_SCHAR_MAX
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:2555</i><br>
	 * _SC_SCHAR_MIN
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:2556</i><br>
	 * _SC_SHRT_MAX
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:2557</i><br>
	 * _SC_SHRT_MIN
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:2558</i><br>
	 * _SC_UCHAR_MAX
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:2559</i><br>
	 * _SC_UINT_MAX
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:2560</i><br>
	 * _SC_ULONG_MAX
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:2561</i><br>
	 * _SC_USHRT_MAX
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:2562</i><br>
	 * _SC_NL_ARGMAX
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:2563</i><br>
	 * _SC_NL_LANGMAX
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:2564</i><br>
	 * _SC_NL_MSGMAX
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:2565</i><br>
	 * _SC_NL_NMAX
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:2566</i><br>
	 * _SC_NL_SETMAX
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:2567</i><br>
	 * _SC_NL_TEXTMAX
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:2568</i><br>
	 * _SC_XBS5_ILP32_OFF32
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:2569</i><br>
	 * _SC_XBS5_ILP32_OFFBIG
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:2570</i><br>
	 * _SC_XBS5_LP64_OFF64
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:2571</i><br>
	 * _SC_XBS5_LPBIG_OFFBIG
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:2572</i><br>
	 * _SC_XOPEN_LEGACY
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:2573</i><br>
	 * _SC_XOPEN_REALTIME
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:2574</i><br>
	 * _SC_XOPEN_REALTIME_THREADS
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:2575</i><br>
	 * _SC_ADVISORY_INFO
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:2576</i><br>
	 * _SC_BARRIERS
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:2577</i><br>
	 * _SC_BASE
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:2578</i><br>
	 * _SC_C_LANG_SUPPORT
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:2579</i><br>
	 * _SC_C_LANG_SUPPORT_R
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:2580</i><br>
	 * _SC_CLOCK_SELECTION
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:2581</i><br>
	 * _SC_CPUTIME
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:2582</i><br>
	 * _SC_THREAD_CPUTIME
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:2583</i><br>
	 * _SC_DEVICE_IO
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:2584</i><br>
	 * _SC_DEVICE_SPECIFIC
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:2585</i><br>
	 * _SC_DEVICE_SPECIFIC_R
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:2586</i><br>
	 * _SC_FD_MGMT
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:2587</i><br>
	 * _SC_FIFO
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:2588</i><br>
	 * _SC_PIPE
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:2589</i><br>
	 * _SC_FILE_ATTRIBUTES
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:2590</i><br>
	 * _SC_FILE_LOCKING
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:2591</i><br>
	 * _SC_FILE_SYSTEM
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:2592</i><br>
	 * _SC_MONOTONIC_CLOCK
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:2593</i><br>
	 * _SC_MULTI_PROCESS
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:2594</i><br>
	 * _SC_SINGLE_PROCESS
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:2595</i><br>
	 * _SC_NETWORKING
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:2596</i><br>
	 * _SC_READER_WRITER_LOCKS
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:2597</i><br>
	 * _SC_SPIN_LOCKS
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:2598</i><br>
	 * _SC_REGEXP
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:2599</i><br>
	 * _SC_REGEX_VERSION
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:2600</i><br>
	 * _SC_SHELL
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:2601</i><br>
	 * _SC_SIGNALS
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:2602</i><br>
	 * _SC_SPAWN
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:2603</i><br>
	 * _SC_SPORADIC_SERVER
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:2604</i><br>
	 * _SC_THREAD_SPORADIC_SERVER
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:2605</i><br>
	 * _SC_SYSTEM_DATABASE
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:2606</i><br>
	 * _SC_SYSTEM_DATABASE_R
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:2607</i><br>
	 * _SC_TIMEOUTS
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:2608</i><br>
	 * _SC_TYPED_MEMORY_OBJECTS
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:2609</i><br>
	 * _SC_USER_GROUPS
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:2610</i><br>
	 * _SC_USER_GROUPS_R
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:2611</i><br>
	 * _SC_2_PBS
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:2612</i><br>
	 * _SC_2_PBS_ACCOUNTING
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:2613</i><br>
	 * _SC_2_PBS_LOCATE
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:2614</i><br>
	 * _SC_2_PBS_MESSAGE
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:2615</i><br>
	 * _SC_2_PBS_TRACK
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:2616</i><br>
	 * _SC_SYMLOOP_MAX
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:2617</i><br>
	 * _SC_STREAMS
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:2618</i><br>
	 * _SC_2_PBS_CHECKPOINT
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:2619</i><br>
	 * _SC_V6_ILP32_OFF32
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:2620</i><br>
	 * _SC_V6_ILP32_OFFBIG
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:2621</i><br>
	 * _SC_V6_LP64_OFF64
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:2622</i><br>
	 * _SC_V6_LPBIG_OFFBIG
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:2623</i><br>
	 * _SC_HOST_NAME_MAX
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:2624</i><br>
	 * _SC_TRACE
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:2625</i><br>
	 * _SC_TRACE_EVENT_FILTER
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:2626</i><br>
	 * _SC_TRACE_INHERIT
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:2627</i><br>
	 * _SC_TRACE_LOG
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:2628</i><br>
	 * _SC_LEVEL1_ICACHE_SIZE
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:2629</i><br>
	 * _SC_LEVEL1_ICACHE_ASSOC
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:2630</i><br>
	 * _SC_LEVEL1_ICACHE_LINESIZE
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:2631</i><br>
	 * _SC_LEVEL1_DCACHE_SIZE
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:2632</i><br>
	 * _SC_LEVEL1_DCACHE_ASSOC
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:2633</i><br>
	 * _SC_LEVEL1_DCACHE_LINESIZE
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:2634</i><br>
	 * _SC_LEVEL2_CACHE_SIZE
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:2635</i><br>
	 * _SC_LEVEL2_CACHE_ASSOC
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:2636</i><br>
	 * _SC_LEVEL2_CACHE_LINESIZE
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:2637</i><br>
	 * _SC_LEVEL3_CACHE_SIZE
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:2638</i><br>
	 * _SC_LEVEL3_CACHE_ASSOC
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:2639</i><br>
	 * _SC_LEVEL3_CACHE_LINESIZE
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:2640</i><br>
	 * _SC_LEVEL4_CACHE_SIZE
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:2641</i><br>
	 * _SC_LEVEL4_CACHE_ASSOC
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:2642</i><br>
	 * _SC_LEVEL4_CACHE_LINESIZE
	 */
	/**
	 * Conversion Error : _SC_LEVEL1_ICACHE_SIZE<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:2643</i><br>
	 * _SC_IPV6 = _SC_LEVEL1_ICACHE_SIZE + 50
	 */
	/**
	 * Conversion Error : _SC_LEVEL1_ICACHE_SIZE<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:2644</i><br>
	 * _SC_RAW_SOCKETS
	 */
	/**
	 * Conversion Error : _SC_LEVEL1_ICACHE_SIZE<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:2645</i><br>
	 * _SC_V7_ILP32_OFF32
	 */
	/**
	 * Conversion Error : _SC_LEVEL1_ICACHE_SIZE<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:2646</i><br>
	 * _SC_V7_ILP32_OFFBIG
	 */
	/**
	 * Conversion Error : _SC_LEVEL1_ICACHE_SIZE<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:2647</i><br>
	 * _SC_V7_LP64_OFF64
	 */
	/**
	 * Conversion Error : _SC_LEVEL1_ICACHE_SIZE<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:2648</i><br>
	 * _SC_V7_LPBIG_OFFBIG
	 */
	/**
	 * Conversion Error : _SC_LEVEL1_ICACHE_SIZE<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:2649</i><br>
	 * _SC_SS_REPL_MAX
	 */
	/**
	 * Conversion Error : _SC_LEVEL1_ICACHE_SIZE<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:2650</i><br>
	 * _SC_TRACE_EVENT_NAME_MAX
	 */
	/**
	 * Conversion Error : _SC_LEVEL1_ICACHE_SIZE<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:2651</i><br>
	 * _SC_TRACE_NAME_MAX
	 */
	/**
	 * Conversion Error : _SC_LEVEL1_ICACHE_SIZE<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:2652</i><br>
	 * _SC_TRACE_SYS_MAX
	 */
	/**
	 * Conversion Error : _SC_LEVEL1_ICACHE_SIZE<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:2653</i><br>
	 * _SC_TRACE_USER_EVENT_MAX
	 */
	/**
	 * Conversion Error : _SC_LEVEL1_ICACHE_SIZE<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:2654</i><br>
	 * _SC_XOPEN_STREAMS
	 */
	/**
	 * Conversion Error : _SC_LEVEL1_ICACHE_SIZE<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:2655</i><br>
	 * _SC_THREAD_ROBUST_PRIO_INHERIT
	 */
	/**
	 * Conversion Error : _SC_LEVEL1_ICACHE_SIZE<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:2656</i><br>
	 * _SC_THREAD_ROBUST_PRIO_PROTECT
	 */
	/** The default search path. */
	public static final int _CS_PATH = 0;
	public static final int _CS_V6_WIDTH_RESTRICTED_ENVS = 1;
	public static final int _CS_GNU_LIBC_VERSION = 2;
	public static final int _CS_GNU_LIBPTHREAD_VERSION = 3;
	public static final int _CS_V5_WIDTH_RESTRICTED_ENVS = 4;
	public static final int _CS_V7_WIDTH_RESTRICTED_ENVS = 5;
	public static final int _CS_LFS_CFLAGS = 1000;
	public static final int _CS_LFS_LDFLAGS = 1001;
	public static final int _CS_LFS_LIBS = 1002;
	public static final int _CS_LFS_LINTFLAGS = 1003;
	public static final int _CS_LFS64_CFLAGS = 1004;
	public static final int _CS_LFS64_LDFLAGS = 1005;
	public static final int _CS_LFS64_LIBS = 1006;
	public static final int _CS_LFS64_LINTFLAGS = 1007;
	public static final int _CS_XBS5_ILP32_OFF32_CFLAGS = 1100;
	public static final int _CS_XBS5_ILP32_OFF32_LDFLAGS = 1101;
	public static final int _CS_XBS5_ILP32_OFF32_LIBS = 1102;
	public static final int _CS_XBS5_ILP32_OFF32_LINTFLAGS = 1103;
	public static final int _CS_XBS5_ILP32_OFFBIG_CFLAGS = 1104;
	public static final int _CS_XBS5_ILP32_OFFBIG_LDFLAGS = 1105;
	public static final int _CS_XBS5_ILP32_OFFBIG_LIBS = 1106;
	public static final int _CS_XBS5_ILP32_OFFBIG_LINTFLAGS = 1107;
	public static final int _CS_XBS5_LP64_OFF64_CFLAGS = 1108;
	public static final int _CS_XBS5_LP64_OFF64_LDFLAGS = 1109;
	public static final int _CS_XBS5_LP64_OFF64_LIBS = 1110;
	public static final int _CS_XBS5_LP64_OFF64_LINTFLAGS = 1111;
	public static final int _CS_XBS5_LPBIG_OFFBIG_CFLAGS = 1112;
	public static final int _CS_XBS5_LPBIG_OFFBIG_LDFLAGS = 1113;
	public static final int _CS_XBS5_LPBIG_OFFBIG_LIBS = 1114;
	public static final int _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS = 1115;
	public static final int _CS_POSIX_V6_ILP32_OFF32_CFLAGS = 1116;
	public static final int _CS_POSIX_V6_ILP32_OFF32_LDFLAGS = 1117;
	public static final int _CS_POSIX_V6_ILP32_OFF32_LIBS = 1118;
	public static final int _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS = 1119;
	public static final int _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS = 1120;
	public static final int _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS = 1121;
	public static final int _CS_POSIX_V6_ILP32_OFFBIG_LIBS = 1122;
	public static final int _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS = 1123;
	public static final int _CS_POSIX_V6_LP64_OFF64_CFLAGS = 1124;
	public static final int _CS_POSIX_V6_LP64_OFF64_LDFLAGS = 1125;
	public static final int _CS_POSIX_V6_LP64_OFF64_LIBS = 1126;
	public static final int _CS_POSIX_V6_LP64_OFF64_LINTFLAGS = 1127;
	public static final int _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS = 1128;
	public static final int _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS = 1129;
	public static final int _CS_POSIX_V6_LPBIG_OFFBIG_LIBS = 1130;
	public static final int _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS = 1131;
	public static final int _CS_POSIX_V7_ILP32_OFF32_CFLAGS = 1132;
	public static final int _CS_POSIX_V7_ILP32_OFF32_LDFLAGS = 1133;
	public static final int _CS_POSIX_V7_ILP32_OFF32_LIBS = 1134;
	public static final int _CS_POSIX_V7_ILP32_OFF32_LINTFLAGS = 1135;
	public static final int _CS_POSIX_V7_ILP32_OFFBIG_CFLAGS = 1136;
	public static final int _CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS = 1137;
	public static final int _CS_POSIX_V7_ILP32_OFFBIG_LIBS = 1138;
	public static final int _CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS = 1139;
	public static final int _CS_POSIX_V7_LP64_OFF64_CFLAGS = 1140;
	public static final int _CS_POSIX_V7_LP64_OFF64_LDFLAGS = 1141;
	public static final int _CS_POSIX_V7_LP64_OFF64_LIBS = 1142;
	public static final int _CS_POSIX_V7_LP64_OFF64_LINTFLAGS = 1143;
	public static final int _CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS = 1144;
	public static final int _CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS = 1145;
	public static final int _CS_POSIX_V7_LPBIG_OFFBIG_LIBS = 1146;
	public static final int _CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS = 1147;
	public static final int _CS_V6_ENV = 1148;
	public static final int _CS_V7_ENV = 1149;
	/**
	 * <i>native declaration : x86_64-linux-gnu/sys/wait.h:3250</i><br>
	 * enum values
	 */
	public static interface idtype_t {
		/**
		 * Wait for any child.<br>
		 * <i>native declaration : x86_64-linux-gnu/sys/wait.h:3247</i>
		 */
		public static final int P_ALL = 0;
		/**
		 * Wait for specified process.<br>
		 * <i>native declaration : x86_64-linux-gnu/sys/wait.h:3248</i>
		 */
		public static final int P_PID = 1;
		/**
		 * Wait for members of process group.<br>
		 * <i>native declaration : x86_64-linux-gnu/sys/wait.h:3249</i>
		 */
		public static final int P_PGID = 2;
	};
	/** <i>native declaration : bits/posix_opt.h</i> */
	public static final int _LFS64_ASYNCHRONOUS_IO = (int)1;
	/** <i>native declaration : x86_64-linux-gnu/bits/stropts.h</i> */
	public static final int I_PUNLINK = (int)(('S' << 8) | 23);
	/** <i>native declaration : asm-generic/ioctls.h</i> */
	public static final int TIOCPKT_DOSTOP = (int)32;
	/** <i>native declaration : x86_64-linux-gnu/bits/stropts.h</i> */
	public static final int I_FIND = (int)(('S' << 8) | 11);
	/** <i>native declaration : x86_64-linux-gnu/sys/stat.h</i> */
	public static final int S_IXOTH = (int)((100 >> 3) >> 3);
	/** <i>native declaration : bits/termios.h</i> */
	public static final int CBAUDEX = (int)010000;
	/** <i>native declaration : fcntl.h</i> */
	public static final int F_LOCK = (int)1;
	/** <i>native declaration : libio.h</i> */
	public static final int _IO_USER_BUF = (int)1;
	/** <i>native declaration : asm-generic/ioctls.h</i> */
	public static final int TIOCGLCKTRMIOS = (int)0x5456;
	/** <i>native declaration : fcntl.h</i> */
	public static final int F_TLOCK = (int)2;
	/** <i>native declaration : x86_64-linux-gnu/bits/ioctls.h</i> */
	public static final int SIOCDELDLCI = (int)0x8981;
	/** <i>native declaration : fcntl.h</i> */
	public static final int F_TEST = (int)3;
	/** <i>native declaration : asm-generic/errno-base.h</i> */
	public static final int EMLINK = (int)31;
	/** <i>native declaration : stdlib.h</i> */
	public static final int __lldiv_t_defined = (int)1;
	/** <i>native declaration : bits/pthreadtypes.h</i> */
	public static final int __SIZEOF_PTHREAD_RWLOCKATTR_T = (int)8;
	/** <i>native declaration : stdio.h</i> */
	public static final int SEEK_END = (int)2;
	/** <i>native declaration : bits/termios.h</i> */
	public static final int BS1 = (int)020000;
	/** <i>native declaration : asm-generic/ioctls.h</i> */
	public static final int TCXONC = (int)0x540A;
	/** <i>native declaration : libio.h</i> */
	public static final int _IO_DELETE_DONT_CLOSE = (int)0x40;
	/** <i>native declaration : x86_64-linux-gnu/bits/ioctls.h</i> */
	public static final int SIOCGIFENCAP = (int)0x8925;
	/** <i>native declaration : asm-generic/ioctls.h</i> */
	public static final int FIOASYNC = (int)0x5452;
	/** <i>native declaration : bits/pthreadtypes.h</i> */
	public static final int __SIZEOF_PTHREAD_BARRIERATTR_T = (int)4;
	/** <i>native declaration : bits/posix_opt.h</i> */
	public static final int _POSIX_SPIN_LOCKS = (int)200809;
	/** <i>native declaration : asm-generic/errno.h</i> */
	public static final int ENOCSI = (int)50;
	/** <i>native declaration : bits/termios.h</i> */
	public static final int B50 = (int)000001;
	/** <i>native declaration : asm-generic/ioctls.h</i> */
	public static final int TIOCPKT_FLUSHWRITE = (int)2;
	/** <i>native declaration : x86_64-linux-gnu/bits/ioctls.h</i> */
	public static final int SIOCADDDLCI = (int)0x8980;
	/** <i>native declaration : x86_64-linux-gnu/bits/stropts.h</i> */
	public static final int I_GETBAND = (int)(('S' << 8) | 30);
	/** <i>native declaration : asm-generic/errno.h</i> */
	public static final int EL3HLT = (int)46;
	/** <i>native declaration : bits/ioctl-types.h</i> */
	public static final int N_PROFIBUS_FDL = (int)10;
	/** <i>native declaration : bits/posix_opt.h</i> */
	public static final int _LFS_LARGEFILE = (int)1;
	/** <i>native declaration : bits/sigaction.h</i> */
	public static final int SA_NOMASK = (int)0x40000000;
	/** <i>native declaration : x86_64-linux-gnu/bits/ioctls.h</i> */
	public static final int SIOCSIFTXQLEN = (int)0x8943;
	/** <i>native declaration : bits/termios.h</i> */
	public static final int VSTART = (int)8;
	/** <i>native declaration : bits/termios.h</i> */
	public static final int B600 = (int)000010;
	/** <i>native declaration : bits/termios.h</i> */
	public static final int ONOCR = (int)000020;
	/** <i>native declaration : asm-generic/ioctls.h</i> */
	public static final int TIOCGSOFTCAR = (int)0x5419;
	/** <i>native declaration : bits/fcntl-linux.h</i> */
	public static final int __O_NOFOLLOW = (int)400000;
	/** <i>native declaration : bits/fcntl-linux.h</i> */
	public static final int __F_GETSIG = (int)11;
	/** <i>native declaration : asm-generic/errno.h</i> */
	public static final int EADDRINUSE = (int)98;
	/** <i>native declaration : unistd.h</i> */
	public static final int R_OK = (int)4;
	/** <i>native declaration : bits/fcntl-linux.h</i> */
	public static final int LOCK_EX = (int)2;
	/** <i>native declaration : x86_64-linux-gnu/bits/stropts.h</i> */
	public static final int I_SETCLTIME = (int)(('S' << 8) | 32);
	/** <i>native declaration : asm-generic/ioctls.h</i> */
	public static final int FIONCLEX = (int)0x5450;
	/** <i>native declaration : bits/signum.h</i> */
	public static final int SIGKILL = (int)9;
	/** <i>native declaration : asm-generic/ioctls.h</i> */
	public static final int TIOCPKT_DATA = (int)0;
	/** <i>native declaration : bits/typesizes.h</i> */
	public static final int __INO_T_MATCHES_INO64_T = (int)1;
	/** <i>native declaration : bits/termios.h</i> */
	public static final int PARMRK = (int)000010;
	/** <i>native declaration : asm-generic/errno.h</i> */
	public static final int EPROTONOSUPPORT = (int)93;
	/** <i>native declaration : bits/termios.h</i> */
	public static final int IGNPAR = (int)000004;
	/** <i>native declaration : x86_64-linux-gnu/bits/ioctls.h</i> */
	public static final int SIOCGIFSLAVE = (int)0x8929;
	/** <i>native declaration : bits/termios.h</i> */
	public static final int VTDLY = (int)040000;
	/** <i>native declaration : bits/termios.h</i> */
	public static final int B75 = (int)000002;
	/** <i>native declaration : asm-generic/errno.h</i> */
	public static final int ECHRNG = (int)44;
	/** <i>native declaration : bits/ioctl-types.h</i> */
	public static final int N_SLIP = (int)1;
	/** <i>native declaration : asm-generic/errno.h</i> */
	public static final int EOPNOTSUPP = (int)95;
	/** <i>native declaration : bits/posix_opt.h</i> */
	public static final int _LFS64_STDIO = (int)1;
	/** <i>native declaration : bits/fcntl-linux.h</i> */
	public static final int F_EXLCK = (int)4;
	/** <i>native declaration : bits/signum.h</i> */
	public static final int SIGUSR1 = (int)10;
	/** <i>native declaration : bits/signum.h</i> */
	public static final int SIGUSR2 = (int)12;
	/** <i>native declaration : bits/fcntl-linux.h</i> */
	public static final int __F_GETOWN_EX = (int)16;
	/** <i>native declaration : x86_64-linux-gnu/bits/ioctls.h</i> */
	public static final int SIOCSIFPFLAGS = (int)0x8934;
	/** <i>native declaration : asm-generic/ioctl.h</i> */
	public static final int IOCSIZE_MASK = (int)(((1 << 14) - 1) << ((0 + 8) + 8));
	/** <i>native declaration : sys/types.h</i> */
	public static final int _SYS_TYPES_H = (int)1;
	/** <i>native declaration : libio.h</i> */
	public static final int _IO_INTERNAL = (int)10;
	/** <i>native declaration : bits/ioctl-types.h</i> */
	public static final int N_SMSBLOCK = (int)12;
	/** <i>native declaration : libio.h</i> */
	public static final int _IOS_OUTPUT = (int)2;
	/** <i>native declaration : sys/ttydefaults.h</i> */
	public static final int CWERASE = (int)('w' & 37);
	/** <i>native declaration : bits/fcntl-linux.h</i> */
	public static final int O_CLOEXEC = (int)2000000;
	/** <i>native declaration : sys/types.h</i> */
	public static final int __BIT_TYPES_DEFINED__ = (int)1;
	/** <i>native declaration : asm-generic/ioctl.h</i> */
	public static final int _IOC_NRMASK = (int)((1 << 8) - 1);
	/** <i>native declaration : bits/stat.h</i> */
	public static final int __S_ISGID = (int)2000;
	/** <i>native declaration : asm-generic/errno.h</i> */
	public static final int EDEADLOCK = (int)35;
	/** <i>native declaration : bits/posix_opt.h</i> */
	public static final int _POSIX_ASYNCHRONOUS_IO = (int)200809;
	/** <i>native declaration : bits/fcntl-linux.h</i> */
	public static final int O_DIRECTORY = (int)200000;
	/** <i>native declaration : bits/fcntl-linux.h</i> */
	public static final int __POSIX_FADV_DONTNEED = (int)4;
	/** <i>native declaration : asm-generic/errno.h</i> */
	public static final int EHWPOISON = (int)133;
	/** <i>native declaration : asm-generic/ioctls.h</i> */
	public static final int TIOCEXCL = (int)0x540C;
	/** <i>native declaration : bits/fcntl-linux.h</i> */
	public static final int LOCK_SH = (int)1;
	/** <i>native declaration : _G_config.h</i> */
	public static final int _G_BUFSIZ = (int)8192;
	/** <i>native declaration : features.h</i> */
	public static final int _BSD_SOURCE = (int)1;
	/** <i>native declaration : bits/fcntl-linux.h</i> */
	public static final int __O_PATH = (int)10000000;
	/** <i>native declaration : x86_64-linux-gnu/bits/ioctls.h</i> */
	public static final int SIOCGIFMTU = (int)0x8921;
	/** <i>native declaration : features.h</i> */
	public static final int __USE_POSIX = (int)1;
	/** <i>native declaration : bits/typesizes.h</i> */
	public static final int __OFF_T_MATCHES_OFF64_T = (int)1;
	/** <i>native declaration : asm-generic/errno-base.h</i> */
	public static final int ENXIO = (int)6;
	/** <i>native declaration : asm-generic/errno-base.h</i> */
	public static final int ENOSPC = (int)28;
	/** <i>native declaration : asm-generic/ioctls.h</i> */
	public static final int TIOCLINUX = (int)0x541C;
	/** <i>native declaration : asm-generic/errno.h</i> */
	public static final int ETIME = (int)62;
	/** <i>native declaration : endian.h</i> */
	public static final int __LITTLE_ENDIAN = (int)1234;
	/** <i>native declaration : libio.h</i> */
	public static final int _IOS_INPUT = (int)1;
	/** <i>native declaration : bits/fcntl-linux.h</i> */
	public static final int O_DSYNC = (int)10000;
	/** <i>native declaration : libio.h</i> */
	public static final int _IO_FLAGS2_MMAP = (int)1;
	/** <i>native declaration : x86_64-linux-gnu/bits/fcntl.h</i> */
	public static final int F_GETLK64 = (int)5;
	/** <i>native declaration : x86_64-linux-gnu/bits/stropts.h</i> */
	public static final int S_RDNORM = (int)0x0040;
	/** <i>native declaration : stdio.h</i> */
	public static final int ____FILE_defined = (int)1;
	/** <i>native declaration : bits/termios.h</i> */
	public static final int IGNBRK = (int)000001;
	/** <i>native declaration : bits/termios.h</i> */
	public static final int BSDLY = (int)020000;
	/** <i>native declaration : endian.h</i> */
	public static final int BIG_ENDIAN = (int)4321;
	/** <i>native declaration : bits/termios.h</i> */
	public static final int TCIFLUSH = (int)0;
	/** <i>native declaration : unistd.h</i> */
	public static final int _UNISTD_H = (int)1;
	/** <i>native declaration : bits/termios.h</i> */
	public static final int B2400 = (int)000013;
	/** <i>native declaration : asm-generic/ioctls.h</i> */
	public static final int TIOCSPGRP = (int)0x5410;
	/** <i>native declaration : bits/signum.h</i> */
	public static final int SIGVTALRM = (int)26;
	/** <i>native declaration : bits/fcntl-linux.h</i> */
	public static final int LOCK_NB = (int)4;
	/** <i>native declaration : bits/stdio_lim.h</i> */
	public static final int L_ctermid = (int)9;
	/** <i>native declaration : bits/sigaction.h</i> */
	public static final int SA_RESETHAND = (int)0x80000000;
	/** <i>native declaration : asm-generic/errno.h</i> */
	public static final int ELIBSCN = (int)81;
	/** <i>native declaration : bits/fcntl-linux.h</i> */
	public static final int FAPPEND = (int)2000;
	/** <i>native declaration : bits/signum.h</i> */
	public static final int SIGCONT = (int)18;
	/** <i>native declaration : bits/waitflags.h</i> */
	public static final int __WCLONE = (int)0x80000000;
	/** <i>native declaration : bits/fcntl-linux.h</i> */
	public static final int O_WRONLY = (int)1;
	/** <i>native declaration : x86_64-linux-gnu/bits/stropts.h</i> */
	public static final int I_SRDOPT = (int)(('S' << 8) | 6);
	/** <i>native declaration : asm-generic/errno.h</i> */
	public static final int EADDRNOTAVAIL = (int)99;
	/** <i>native declaration : bits/waitflags.h</i> */
	public static final int WEXITED = (int)4;
	/** <i>native declaration : bits/typesizes.h</i> */
	public static final int _BITS_TYPESIZES_H = (int)1;
	/** <i>native declaration : bits/posix_opt.h</i> */
	public static final int _POSIX_TIMERS = (int)200809;
	/** <i>native declaration : bits/termios.h</i> */
	public static final int VSWTC = (int)7;
	/** <i>native declaration : asm-generic/errno.h</i> */
	public static final int ENOSTR = (int)60;
	/** <i>native declaration : asm-generic/ioctls.h</i> */
	public static final int TIOCSRS485 = (int)0x542F;
	/** <i>native declaration : x86_64-linux-gnu/bits/ioctls.h</i> */
	public static final int SIOCGRARP = (int)0x8961;
	/** <i>native declaration : x86_64-linux-gnu/bits/stropts.h</i> */
	public static final int FMNAMESZ = (int)8;
	/** <i>native declaration : bits/termios.h</i> */
	public static final int B3500000 = (int)010016;
	/** <i>native declaration : bits/ioctl-types.h</i> */
	public static final int TIOCM_CAR = (int)0x040;
	/** <i>native declaration : bits/posix_opt.h</i> */
	public static final int _POSIX_CPUTIME = (int)0;
	/** <i>native declaration : asm-generic/errno.h</i> */
	public static final int EBADRQC = (int)56;
	/** <i>native declaration : bits/fcntl-linux.h</i> */
	public static final int __O_NOATIME = (int)1000000;
	/** <i>native declaration : unistd.h</i> */
	public static final int _XOPEN_XPG2 = (int)1;
	/** <i>native declaration : sys/ttydefaults.h</i> */
	public static final int CDISCARD = (int)('o' & 37);
	/** <i>native declaration : asm-generic/errno-base.h</i> */
	public static final int ESRCH = (int)3;
	/** <i>native declaration : x86_64-linux-gnu/sys/stat.h</i> */
	public static final int S_BLKSIZE = (int)512;
	/** <i>native declaration : bits/signum.h</i> */
	public static final int SIGINT = (int)2;
	/** <i>native declaration : endian.h</i> */
	public static final int _ENDIAN_H = (int)1;
	/** <i>native declaration : bits/termios.h</i> */
	public static final int CSIZE = (int)000060;
	/** <i>native declaration : unistd.h</i> */
	public static final int _XOPEN_XPG4 = (int)1;
	/** <i>native declaration : unistd.h</i> */
	public static final int _XOPEN_XPG3 = (int)1;
	/** <i>native declaration : asm-generic/errno.h</i> */
	public static final int EBADSLT = (int)57;
	/** <i>native declaration : sys/ttydefaults.h</i> */
	public static final int CRPRNT = (int)('r' & 37);
	/** <i>native declaration : bits/termios.h</i> */
	public static final int TCOOFF = (int)0;
	/** <i>native declaration : bits/fcntl-linux.h</i> */
	public static final int O_NOFOLLOW = (int)400000;
	/** <i>native declaration : bits/siginfo.h</i> */
	public static final int __have_pthread_attr_t = (int)1;
	/** <i>native declaration : x86_64-linux-gnu/bits/stropts.h</i> */
	public static final int I_LINK = (int)(('S' << 8) | 12);
	/** <i>native declaration : bits/wordsize.h</i> */
	public static final int __WORDSIZE = (int)64;
	/** <i>native declaration : bits/signum.h</i> */
	public static final int SIGILL = (int)4;
	/** <i>native declaration : asm-generic/ioctls.h</i> */
	public static final int TIOCPKT_IOCTL = (int)64;
	/** <i>native declaration : asm-generic/errno.h</i> */
	public static final int EOWNERDEAD = (int)130;
	/** <i>native declaration : bits/environments.h</i> */
	public static final String __LP64_OFF64_LDFLAGS = (String)"-m64";
	/** <i>native declaration : bits/termios.h</i> */
	public static final int B200 = (int)000006;
	/** <i>native declaration : features.h</i> */
	public static final int __USE_POSIX2 = (int)1;
	/** <i>native declaration : bits/termios.h</i> */
	public static final int TCION = (int)3;
	/** <i>native declaration : bits/stat.h</i> */
	public static final int __S_IEXEC = (int)100;
	/** <i>native declaration : bits/termios.h</i> */
	public static final int OPOST = (int)000001;
	/** <i>native declaration : bits/termios.h</i> */
	public static final int VEOL2 = (int)16;
	/** <i>native declaration : x86_64-linux-gnu/bits/stropts.h</i> */
	public static final int S_HIPRI = (int)0x0002;
	/** <i>native declaration : bits/signum.h</i> */
	public static final int SIGPIPE = (int)13;
	/** <i>native declaration : asm-generic/errno-base.h</i> */
	public static final int ENOTDIR = (int)20;
	/** <i>native declaration : x86_64-linux-gnu/bits/ioctls.h</i> */
	public static final int SIOCGIFBR = (int)0x8940;
	/** <i>native declaration : x86_64-linux-gnu/bits/stropts.h</i> */
	public static final int S_MSG = (int)0x0008;
	/** <i>native declaration : bits/pthreadtypes.h</i> */
	public static final int __SIZEOF_PTHREAD_RWLOCK_T = (int)56;
	/** <i>native declaration : x86_64-linux-gnu/bits/stropts.h</i> */
	public static final int I_LIST = (int)(('S' << 8) | 21);
	/** <i>native declaration : bits/posix_opt.h</i> */
	public static final int _POSIX_MEMORY_PROTECTION = (int)200809;
	/** <i>native declaration : libio.h</i> */
	public static final int _IO_SKIPWS = (int)1;
	/** <i>native declaration : bits/posix_opt.h</i> */
	public static final int _XOPEN_SHM = (int)1;
	/** <i>native declaration : libio.h</i> */
	public static final int _IO_IS_FILEBUF = (int)0x2000;
	/** <i>native declaration : bits/posix_opt.h</i> */
	public static final int _POSIX_SPAWN = (int)200809;
	/** <i>native declaration : bits/fcntl-linux.h</i> */
	public static final int LOCK_UN = (int)8;
	/** <i>native declaration : features.h</i> */
	public static final int __USE_POSIX_IMPLICITLY = (int)1;
	/** <i>native declaration : bits/ioctl-types.h</i> */
	public static final int N_R3964 = (int)9;
	/** <i>native declaration : x86_64-linux-gnu/bits/stropts.h</i> */
	public static final int I_GETCLTIME = (int)(('S' << 8) | 33);
	/** <i>native declaration : bits/signum.h</i> */
	public static final int SIGIOT = (int)6;
	/** <i>native declaration : asm-generic/errno-base.h</i> */
	public static final int ECHILD = (int)10;
	/** <i>native declaration : bits/posix_opt.h</i> */
	public static final int _POSIX_SEMAPHORES = (int)200809;
	/** <i>native declaration : bits/termios.h</i> */
	public static final int TCIOFLUSH = (int)2;
	/** <i>native declaration : bits/fcntl-linux.h</i> */
	public static final int F_SETLKW = (int)7;
	/** <i>native declaration : asm-generic/errno.h</i> */
	public static final int ENOTSOCK = (int)88;
	/** <i>native declaration : x86_64-linux-gnu/bits/stropts.h</i> */
	public static final int I_STR = (int)(('S' << 8) | 8);
	/** <i>native declaration : bits/signum.h</i> */
	public static final int SIGXCPU = (int)24;
	/** <i>native declaration : x86_64-linux-gnu/bits/stropts.h</i> */
	public static final int I_GWROPT = (int)(('S' << 8) | 20);
	/** <i>native declaration : bits/fcntl-linux.h</i> */
	public static final int FNDELAY = (int)4000;
	/** <i>native declaration : asm-generic/errno.h</i> */
	public static final int ENOLINK = (int)67;
	/** <i>native declaration : bits/termios.h</i> */
	public static final int VINTR = (int)0;
	/** <i>native declaration : bits/termios.h</i> */
	public static final int EXTPROC = (int)200000;
	/** <i>native declaration : unistd.h</i> */
	public static final int _XOPEN_UNIX = (int)1;
	/** <i>native declaration : asm-generic/ioctls.h</i> */
	public static final int TIOCMSET = (int)0x5418;
	/** <i>native declaration : libio.h</i> */
	public static final int _IOS_APPEND = (int)8;
	/** <i>native declaration : asm-generic/errno.h</i> */
	public static final int EREMCHG = (int)78;
	/** <i>native declaration : bits/fcntl-linux.h</i> */
	public static final int __F_SETOWN = (int)8;
	/** <i>native declaration : bits/stat.h</i> */
	public static final int _STAT_VER_LINUX = (int)1;
	/** <i>native declaration : bits/posix_opt.h</i> */
	public static final int _POSIX_THREAD_ATTR_STACKSIZE = (int)200809;
	/** <i>native declaration : bits/fcntl-linux.h</i> */
	public static final int F_RDLCK = (int)0;
	/** <i>native declaration : bits/signum.h</i> */
	public static final int SIGSEGV = (int)11;
	/** <i>native declaration : asm-generic/errno.h</i> */
	public static final int EPFNOSUPPORT = (int)96;
	/** <i>native declaration : asm-generic/errno.h</i> */
	public static final int EISCONN = (int)106;
	/** <i>native declaration : bits/posix_opt.h</i> */
	public static final int _POSIX_THREAD_PRIO_PROTECT = (int)200809;
	/** <i>native declaration : asm-generic/errno.h</i> */
	public static final int ENOTCONN = (int)107;
	/** <i>native declaration : bits/termios.h</i> */
	public static final int ICANON = (int)000002;
	/** <i>native declaration : sys/ttydefaults.h</i> */
	public static final int TTYDEF_SPEED = (int)(000015);
	/** <i>native declaration : asm-generic/errno.h</i> */
	public static final int ENETRESET = (int)102;
	/** <i>native declaration : bits/termios.h</i> */
	public static final int VLNEXT = (int)15;
	/** <i>native declaration : bits/sigaction.h</i> */
	public static final int SA_INTERRUPT = (int)0x20000000;
	/** <i>native declaration : libio.h</i> */
	public static final int _IO_SHOWPOINT = (int)400;
	/** <i>native declaration : x86_64-linux-gnu/bits/stropts.h</i> */
	public static final int RNORM = (int)0x0000;
	/** <i>native declaration : x86_64-linux-gnu/sys/stat.h</i> */
	public static final int S_IFIFO = (int)010000;
	/** <i>native declaration : wchar.h</i> */
	public static final int ____mbstate_t_defined = (int)1;
	/** <i>native declaration : bits/posix_opt.h</i> */
	public static final int _POSIX_SAVED_IDS = (int)1;
	/** <i>native declaration : bits/siginfo.h</i> */
	public static final int __have_siginfo_t = (int)1;
	/** <i>native declaration : x86_64-linux-gnu/sys/stat.h</i> */
	public static final int ACCESSPERMS = (int)((400 | 200 | 100) | ((400 | 200 | 100) >> 3) | (((400 | 200 | 100) >> 3) >> 3));
	/** <i>native declaration : bits/termios.h</i> */
	public static final int _HAVE_STRUCT_TERMIOS_C_OSPEED = (int)1;
	/** <i>native declaration : bits/posix_opt.h</i> */
	public static final int _POSIX_MONOTONIC_CLOCK = (int)0;
	/** <i>native declaration : bits/termios.h</i> */
	public static final int B576000 = (int)010006;
	/** <i>native declaration : bits/waitflags.h</i> */
	public static final int __WNOTHREAD = (int)0x20000000;
	/** <i>native declaration : asm-generic/ioctls.h</i> */
	public static final int TIOCNXCL = (int)0x540D;
	/** <i>native declaration : x86_64-linux-gnu/bits/ioctls.h</i> */
	public static final int SIOCGIFPFLAGS = (int)0x8935;
	/** <i>native declaration : libio.h</i> */
	public static final int _IO_STDIO = (int)40000;
	/** <i>native declaration : x86_64-linux-gnu/sys/stat.h</i> */
	public static final int S_IFSOCK = (int)140000;
	/** <i>native declaration : bits/termios.h</i> */
	public static final int CRDLY = (int)003000;
	/** <i>native declaration : asm-generic/errno-base.h</i> */
	public static final int ENOEXEC = (int)8;
	/** <i>native declaration : x86_64-linux-gnu/bits/stropts.h</i> */
	public static final int FLUSHW = (int)0x02;
	/** <i>native declaration : x86_64-linux-gnu/bits/stropts.h</i> */
	public static final int MOREDATA = (int)2;
	/** <i>native declaration : bits/waitflags.h</i> */
	public static final int WSTOPPED = (int)2;
	/** <i>native declaration : x86_64-linux-gnu/bits/ioctls.h</i> */
	public static final int SIOCSARP = (int)0x8955;
	/** <i>native declaration : asm-generic/ioctls.h</i> */
	public static final int TIOCSTI = (int)0x5412;
	/** <i>native declaration : bits/fcntl-linux.h</i> */
	public static final int O_RSYNC = (int)4010000;
	/** <i>native declaration : asm-generic/errno-base.h</i> */
	public static final int EPERM = (int)1;
	/** <i>native declaration : bits/ioctl-types.h</i> */
	public static final int N_HDLC = (int)13;
	/** <i>native declaration : asm-generic/ioctls.h</i> */
	public static final int TIOCMIWAIT = (int)0x545C;
	/** <i>native declaration : x86_64-linux-gnu/bits/stropts.h</i> */
	public static final int FLUSHR = (int)0x01;
	/** <i>native declaration : bits/termios.h</i> */
	public static final int FLUSHO = (int)010000;
	/** <i>native declaration : bits/predefs.h</i> */
	public static final int __STDC_IEC_559_COMPLEX__ = (int)1;
	/** <i>native declaration : asm-generic/errno-base.h</i> */
	public static final int ESPIPE = (int)29;
	/** <i>native declaration : bits/fcntl-linux.h</i> */
	public static final int POSIX_FADV_NOREUSE = (int)5;
	/** <i>native declaration : bits/fcntl-linux.h</i> */
	public static final int F_SETLK = (int)6;
	/** <i>native declaration : asm-generic/errno.h</i> */
	public static final int ENETDOWN = (int)100;
	/** <i>native declaration : asm-generic/errno.h</i> */
	public static final int ENOKEY = (int)126;
	/** <i>native declaration : bits/fcntl-linux.h</i> */
	public static final int __POSIX_FADV_NOREUSE = (int)5;
	/** <i>native declaration : bits/waitstatus.h</i> */
	public static final int __WCOREFLAG = (int)0x80;
	/** <i>native declaration : bits/fcntl-linux.h</i> */
	public static final int POSIX_FADV_SEQUENTIAL = (int)2;
	/** <i>native declaration : unistd.h</i> */
	public static final int _XOPEN_VERSION = (int)700;
	/** <i>native declaration : features.h</i> */
	public static final int _ATFILE_SOURCE = (int)1;
	/** <i>native declaration : x86_64-linux-gnu/bits/ioctls.h</i> */
	public static final int SIOCSIFADDR = (int)0x8916;
	/** <i>native declaration : bits/posix_opt.h</i> */
	public static final int _POSIX_THREAD_ATTR_STACKADDR = (int)200809;
	/** <i>native declaration : libio.h</i> */
	public static final int _IO_ERR_SEEN = (int)0x20;
	/** <i>native declaration : bits/termios.h</i> */
	public static final int B3000000 = (int)010015;
	/** <i>native declaration : bits/termios.h</i> */
	public static final int BS0 = (int)000000;
	/** <i>native declaration : asm-generic/errno.h</i> */
	public static final int ECONNABORTED = (int)103;
	/** <i>native declaration : x86_64-linux-gnu/bits/stropts.h</i> */
	public static final int I_CKBAND = (int)(('S' << 8) | 29);
	/** <i>native declaration : x86_64-linux-gnu/sys/stat.h</i> */
	public static final int S_IROTH = (int)((400 >> 3) >> 3);
	/** <i>native declaration : sys/ttydefaults.h</i> */
	public static final int CSTOP = (int)('s' & 37);
	/** <i>native declaration : bits/posix_opt.h</i> */
	public static final int _POSIX_RAW_SOCKETS = (int)200809;
	/** <i>native declaration : x86_64-linux-gnu/bits/ioctls.h</i> */
	public static final int SIOCSRARP = (int)0x8962;
	/** <i>native declaration : asm-generic/errno.h</i> */
	public static final int EDOTDOT = (int)73;
	/** <i>native declaration : x86_64-linux-gnu/bits/stropts.h</i> */
	public static final int MSG_BAND = (int)0x04;
	/** <i>native declaration : bits/termios.h</i> */
	public static final int VMIN = (int)6;
	/** <i>native declaration : bits/waitstatus.h</i> */
	public static final int __W_CONTINUED = (int)0xffff;
	/** <i>native declaration : x86_64-linux-gnu/bits/ioctls.h</i> */
	public static final int SIOCSIFHWADDR = (int)0x8924;
	/** <i>native declaration : bits/environments.h</i> */
	public static final String __ILP32_OFFBIG_CFLAGS = (String)"-m32 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64";
	/** <i>native declaration : bits/fcntl-linux.h</i> */
	public static final int O_TRUNC = (int)1000;
	/** <i>native declaration : bits/termios.h</i> */
	public static final int B9600 = (int)000015;
	/** <i>native declaration : bits/termios.h</i> */
	public static final int B500000 = (int)010005;
	/** <i>native declaration : bits/sigaction.h</i> */
	public static final int SA_RESTART = (int)0x10000000;
	/** <i>native declaration : asm-generic/ioctls.h</i> */
	public static final int FIOQSIZE = (int)0x5460;
	/** <i>native declaration : bits/endian.h</i> */
	public static final int __BYTE_ORDER = (int)1234;
	/** <i>native declaration : libio.h</i> */
	public static final int _IO_FLAGS2_NOTCANCEL = (int)2;
	/** <i>native declaration : bits/fcntl-linux.h</i> */
	public static final int AT_SYMLINK_NOFOLLOW = (int)0x100;
	/** <i>native declaration : bits/signum.h</i> */
	public static final int __SIGRTMAX = (int)(65 - 1);
	/** <i>native declaration : bits/posix_opt.h</i> */
	public static final int _POSIX_PRIORITY_SCHEDULING = (int)200809;
	/** <i>native declaration : bits/termios.h</i> */
	public static final int IXANY = (int)004000;
	/** <i>native declaration : bits/stat.h</i> */
	public static final int UTIME_NOW = (int)((1 << 30) - 1);
	/** <i>native declaration : _G_config.h</i> */
	public static final int _G_IO_IO_FILE_VERSION = (int)0x20001;
	/** <i>native declaration : bits/stat.h</i> */
	public static final int _STAT_VER = (int)1;
	/** <i>native declaration : bits/signum.h</i> */
	public static final int SIGUNUSED = (int)31;
	/** <i>native declaration : bits/termios.h</i> */
	public static final int VEOL = (int)11;
	/** <i>native declaration : bits/sigthread.h</i> */
	public static final int _BITS_SIGTHREAD_H = (int)1;
	/** <i>native declaration : bits/signum.h</i> */
	public static final int SIGFPE = (int)8;
	/** <i>native declaration : asm-generic/errno.h</i> */
	public static final int EKEYEXPIRED = (int)127;
	/** <i>native declaration : bits/termios.h</i> */
	public static final int VEOF = (int)4;
	/** <i>native declaration : bits/predefs.h</i> */
	public static final int __STDC_IEC_559__ = (int)1;
	/** <i>native declaration : x86_64-linux-gnu/bits/stropts.h</i> */
	public static final int MSG_ANY = (int)0x02;
	/** <i>native declaration : stdio.h</i> */
	public static final String P_tmpdir = (String)"/tmp";
	/** <i>native declaration : features.h</i> */
	public static final int __USE_FORTIFY_LEVEL = (int)0;
	/** <i>native declaration : x86_64-linux-gnu/bits/stropts.h</i> */
	public static final int I_PLINK = (int)(('S' << 8) | 22);
	/** <i>native declaration : sys/ttydefaults.h</i> */
	public static final int CFLUSH = (int)('o' & 37);
	/** <i>native declaration : libio.h</i> */
	public static final int _IO_RIGHT = (int)4;
	/** <i>native declaration : asm-generic/ioctl.h</i> */
	public static final int _IOC_DIRBITS = (int)2;
	/** <i>native declaration : bits/fcntl-linux.h</i> */
	public static final int O_RDWR = (int)2;
	/** <i>native declaration : bits/posix_opt.h</i> */
	public static final int _POSIX_THREAD_ROBUST_PRIO_INHERIT = (int)200809;
	/** <i>native declaration : bits/sigaction.h</i> */
	public static final int SA_NODEFER = (int)0x40000000;
	/** <i>native declaration : bits/stdio_lim.h</i> */
	public static final int L_tmpnam = (int)20;
	/** <i>native declaration : features.h</i> */
	public static final int __USE_POSIX199309 = (int)1;
	/** <i>native declaration : bits/sigaction.h</i> */
	public static final int SIG_BLOCK = (int)0;
	/** <i>native declaration : bits/stat.h</i> */
	public static final int UTIME_OMIT = (int)((1 << 30) - 2);
	/** <i>native declaration : x86_64-linux-gnu/bits/ioctls.h</i> */
	public static final int SIOCDIFADDR = (int)0x8936;
	/** <i>native declaration : unistd.h</i> */
	public static final int F_OK = (int)0;
	/** <i>native declaration : unistd.h</i> */
	public static final int _XOPEN_LEGACY = (int)1;
	/** <i>native declaration : x86_64-linux-gnu/bits/stropts.h</i> */
	public static final int I_SETSIG = (int)(('S' << 8) | 9);
	/** <i>native declaration : bits/sigaction.h</i> */
	public static final int SA_SIGINFO = (int)4;
	/** <i>native declaration : libio.h</i> */
	public static final int _IO_MAGIC = (int)0xFBAD0000;
	/** <i>native declaration : libio.h</i> */
	public static final int _IO_CURRENTLY_PUTTING = (int)0x800;
	/** <i>native declaration : bits/ioctl-types.h</i> */
	public static final int N_HCI = (int)15;
	/** <i>native declaration : bits/fcntl-linux.h</i> */
	public static final int __O_DIRECTORY = (int)200000;
	/** <i>native declaration : bits/termios.h</i> */
	public static final int VSTOP = (int)9;
	/** <i>native declaration : bits/posix_opt.h</i> */
	public static final int _XOPEN_REALTIME = (int)1;
	/** <i>native declaration : x86_64-linux-gnu/bits/ioctls.h</i> */
	public static final int SIOCGIFNETMASK = (int)0x891b;
	/** <i>native declaration : bits/siginfo.h</i> */
	public static final int __SIGEV_MAX_SIZE = (int)64;
	/** <i>native declaration : x86_64-linux-gnu/bits/ioctls.h</i> */
	public static final int SIOCADDRT = (int)0x890B;
	/** <i>native declaration : sys/ttydefaults.h</i> */
	public static final int CDSUSP = (int)('y' & 37);
	/** <i>native declaration : x86_64-linux-gnu/sys/stat.h</i> */
	public static final int S_IRWXG = (int)((400 | 200 | 100) >> 3);
	/** <i>native declaration : bits/termios.h</i> */
	public static final int IEXTEN = (int)100000;
	/** <i>native declaration : x86_64-linux-gnu/sys/stat.h</i> */
	public static final int S_IRWXO = (int)(((400 | 200 | 100) >> 3) >> 3);
	/** <i>native declaration : bits/fcntl-linux.h</i> */
	public static final int F_UNLCK = (int)2;
	/** <i>native declaration : bits/errno.h</i> */
	public static final int ENOTSUP = (int)95;
	/** <i>native declaration : bits/termios.h</i> */
	public static final int OLCUC = (int)000002;
	/** <i>native declaration : x86_64-linux-gnu/sys/stat.h</i> */
	public static final int S_IRWXU = (int)(400 | 200 | 100);
	/** <i>native declaration : asm-generic/ioctls.h</i> */
	public static final int TCSETA = (int)0x5406;
	/** <i>native declaration : asm-generic/ioctl.h</i> */
	public static final int _IOC_DIRMASK = (int)((1 << 2) - 1);
	/** <i>native declaration : x86_64-linux-gnu/bits/stropts.h</i> */
	public static final int S_INPUT = (int)0x0001;
	/** <i>native declaration : bits/stat.h</i> */
	public static final int __S_ISVTX = (int)1000;
	/** <i>native declaration : features.h</i> */
	public static final int _SVID_SOURCE = (int)1;
	/** <i>native declaration : asm-generic/ioctls.h</i> */
	public static final int FIONREAD = (int)0x541B;
	/** <i>native declaration : libio.h</i> */
	public static final int _IO_LEFT = (int)2;
	/** <i>native declaration : sys/ttydefaults.h</i> */
	public static final int TTYDEF_CFLAG = (int)(000200 | 000040 | 000400 | 002000);
	/** <i>native declaration : asm-generic/errno-base.h</i> */
	public static final int EEXIST = (int)17;
	/** <i>native declaration : bits/stat.h</i> */
	public static final int __S_IFSOCK = (int)140000;
	/** <i>native declaration : asm-generic/errno.h</i> */
	public static final int ENOTUNIQ = (int)76;
	/** <i>native declaration : bits/siginfo.h</i> */
	public static final int __SI_MAX_SIZE = (int)128;
	/** <i>native declaration : x86_64-linux-gnu/sys/ioctl.h</i> */
	public static final int _SYS_IOCTL_H = (int)1;
	/** <i>native declaration : bits/termios.h</i> */
	public static final int B19200 = (int)000016;
	/** <i>native declaration : bits/signum.h</i> */
	public static final int SIGQUIT = (int)3;
	/** <i>native declaration : x86_64-linux-gnu/bits/stropts.h</i> */
	public static final int I_PUSH = (int)(('S' << 8) | 2);
	/** <i>native declaration : bits/signum.h</i> */
	public static final int SIGTRAP = (int)5;
	/** <i>native declaration : x86_64-linux-gnu/bits/stropts.h</i> */
	public static final int RMSGD = (int)0x0001;
	/** <i>native declaration : bits/stat.h</i> */
	public static final int __S_IFREG = (int)100000;
	/** <i>native declaration : x86_64-linux-gnu/bits/stropts.h</i> */
	public static final int I_NREAD = (int)(('S' << 8) | 1);
	/** <i>native declaration : x86_64-linux-gnu/bits/stropts.h</i> */
	public static final int RMSGN = (int)0x0002;
	/** <i>native declaration : bits/sigcontext.h</i> */
	public static final int _BITS_SIGCONTEXT_H = (int)1;
	/** <i>native declaration : bits/termios.h</i> */
	public static final int B1800 = (int)000012;
	/** <i>native declaration : bits/termios.h</i> */
	public static final int B230400 = (int)010003;
	/** <i>native declaration : bits/fcntl-linux.h</i> */
	public static final int AT_EACCESS = (int)0x200;
	/** <i>native declaration : x86_64-linux-gnu/bits/stropts.h</i> */
	public static final int _BITS_STROPTS_H = (int)1;
	/** <i>native declaration : bits/termios.h</i> */
	public static final int B1500000 = (int)010012;
	/** <i>native declaration : asm-generic/errno.h</i> */
	public static final int EMULTIHOP = (int)72;
	/** <i>native declaration : x86_64-linux-gnu/bits/ioctls.h</i> */
	public static final int SIOCGIFNAME = (int)0x8910;
	/** <i>native declaration : x86_64-linux-gnu/bits/ioctls.h</i> */
	public static final int SIOCDARP = (int)0x8953;
	/** <i>native declaration : bits/sigcontext.h</i> */
	public static final int FP_XSTATE_MAGIC2 = (int)0x46505845;
	/** <i>native declaration : bits/sigcontext.h</i> */
	public static final int FP_XSTATE_MAGIC1 = (int)0x46505853;
	/** <i>native declaration : libio.h</i> */
	public static final int _IOS_NOCREATE = (int)32;
	/** <i>native declaration : alloca.h</i> */
	public static final int _ALLOCA_H = (int)1;
	/** <i>native declaration : x86_64-linux-gnu/sys/stat.h</i> */
	public static final int S_IWOTH = (int)((200 >> 3) >> 3);
	/** <i>native declaration : asm-generic/errno.h</i> */
	public static final int EHOSTDOWN = (int)112;
	/** <i>native declaration : asm-generic/ioctls.h</i> */
	public static final int TCSETS = (int)0x5402;
	/** <i>native declaration : asm-generic/ioctls.h</i> */
	public static final int TCSETX = (int)0x5433;
	/** <i>native declaration : libio.h</i> */
	public static final int _IO_BOOLALPHA = (int)200000;
	/** <i>native declaration : libio.h</i> */
	public static final int _IO_TIED_PUT_GET = (int)0x400;
	/** <i>native declaration : stdio.h</i> */
	public static final int BUFSIZ = (int)8192;
	/** <i>native declaration : x86_64-linux-gnu/sys/wait.h</i> */
	public static final int WAIT_MYPGRP = (int)0;
	/** <i>native declaration : bits/posix_opt.h</i> */
	public static final int _POSIX_SHELL = (int)1;
	/** <i>native declaration : bits/stat.h</i> */
	public static final int __S_IFIFO = (int)010000;
	/** <i>native declaration : asm-generic/errno.h</i> */
	public static final int ENODATA = (int)61;
	/** <i>native declaration : asm-generic/ioctl.h</i> */
	public static final int _IOC_DIRSHIFT = (int)(((0 + 8) + 8) + 14);
	/** <i>native declaration : x86_64-linux-gnu/bits/ioctls.h</i> */
	public static final int SIOCSIFFLAGS = (int)0x8914;
	/** <i>native declaration : bits/termios.h</i> */
	public static final int ISTRIP = (int)000040;
	/** <i>native declaration : asm-generic/ioctls.h</i> */
	public static final int TIOCPKT_NOSTOP = (int)16;
	/** <i>native declaration : unistd.h</i> */
	public static final int _XOPEN_XCU_VERSION = (int)4;
	/** <i>native declaration : bits/termios.h</i> */
	public static final int CLOCAL = (int)004000;
	/** <i>native declaration : bits/fcntl-linux.h</i> */
	public static final int O_EXCL = (int)200;
	/** <i>native declaration : asm-generic/errno.h</i> */
	public static final int ENONET = (int)64;
	/** <i>native declaration : bits/ioctl-types.h</i> */
	public static final int N_STRIP = (int)4;
	/** <i>native declaration : x86_64-linux-gnu/sys/stat.h</i> */
	public static final int DEFFILEMODE = (int)(400 | 200 | (400 >> 3) | (200 >> 3) | ((400 >> 3) >> 3) | ((200 >> 3) >> 3));
	/** <i>native declaration : x86_64-linux-gnu/bits/ioctls.h</i> */
	public static final int SIOCGIFCOUNT = (int)0x8938;
	/** <i>native declaration : bits/termios.h</i> */
	public static final int B300 = (int)000007;
	/** <i>native declaration : errno.h</i> */
	public static final int _ERRNO_H = (int)1;
	/** <i>native declaration : asm-generic/errno.h</i> */
	public static final int EL2HLT = (int)51;
	/** <i>native declaration : bits/posix_opt.h</i> */
	public static final int _POSIX_REGEXP = (int)1;
	/** <i>native declaration : asm-generic/errno-base.h</i> */
	public static final int E2BIG = (int)7;
	/** <i>native declaration : unistd.h</i> */
	public static final int _POSIX2_SW_DEV = (int)200809;
	/** <i>native declaration : stdio.h</i> */
	public static final int SEEK_CUR = (int)1;
	/** <i>native declaration : bits/termios.h</i> */
	public static final int TAB0 = (int)000000;
	/** <i>native declaration : asm-generic/ioctls.h</i> */
	public static final int TIOCGSERIAL = (int)0x541E;
	/** <i>native declaration : bits/termios.h</i> */
	public static final int TAB1 = (int)004000;
	/** <i>native declaration : bits/termios.h</i> */
	public static final int TAB2 = (int)010000;
	/** <i>native declaration : bits/termios.h</i> */
	public static final int TAB3 = (int)014000;
	/** <i>native declaration : asm-generic/errno.h</i> */
	public static final int EREMOTE = (int)66;
	/** <i>native declaration : signal.h</i> */
	public static final int NSIG = (int)65;
	/** <i>native declaration : bits/sigaction.h</i> */
	public static final int SA_ONSTACK = (int)0x08000000;
	/** <i>native declaration : unistd.h</i> */
	public static final int STDOUT_FILENO = (int)1;
	/** <i>native declaration : asm-generic/ioctl.h</i> */
	public static final int _IOC_NONE = (int)0;
	/** <i>native declaration : bits/termios.h</i> */
	public static final int NCCS = (int)32;
	/** <i>native declaration : x86_64-linux-gnu/sys/stat.h</i> */
	public static final int S_ISUID = (int)4000;
	/** <i>native declaration : x86_64-linux-gnu/bits/stropts.h</i> */
	public static final int I_GETSIG = (int)(('S' << 8) | 10);
	/** <i>native declaration : asm-generic/errno.h</i> */
	public static final int EHOSTUNREACH = (int)113;
	/** <i>native declaration : bits/termios.h</i> */
	public static final int FFDLY = (int)100000;
	/** <i>native declaration : asm-generic/errno.h</i> */
	public static final int EOVERFLOW = (int)75;
	/** <i>native declaration : features.h</i> */
	public static final int __USE_XOPEN2K = (int)1;
	/** <i>native declaration : asm-generic/ioctls.h</i> */
	public static final int TIOCPKT_FLUSHREAD = (int)1;
	/** <i>native declaration : x86_64-linux-gnu/bits/stropts.h</i> */
	public static final int S_WRBAND = (int)0x0100;
	/** <i>native declaration : asm-generic/errno-base.h</i> */
	public static final int ENODEV = (int)19;
	/** <i>native declaration : bits/fcntl-linux.h</i> */
	public static final int O_ACCMODE = (int)003;
	/** <i>native declaration : features.h</i> */
	public static final int __GLIBC_MINOR__ = (int)17;
	/** <i>native declaration : fcntl.h</i> */
	public static final int F_ULOCK = (int)0;
	/** <i>native declaration : x86_64-linux-gnu/sys/wait.h</i> */
	public static final int WAIT_ANY = (int)(-1);
	/** <i>native declaration : bits/termios.h</i> */
	public static final int ECHOK = (int)000040;
	/** <i>native declaration : bits/termios.h</i> */
	public static final int ECHOE = (int)000020;
	/** <i>native declaration : unistd.h</i> */
	public static final int W_OK = (int)2;
	/** <i>native declaration : bits/posix_opt.h</i> */
	public static final int _POSIX_TRACE_LOG = (int)-1;
	/** <i>native declaration : asm-generic/errno.h</i> */
	public static final int ESOCKTNOSUPPORT = (int)94;
	/** <i>native declaration : asm-generic/errno-base.h</i> */
	public static final int EAGAIN = (int)11;
	/** <i>native declaration : bits/ioctl-types.h</i> */
	public static final int N_MASC = (int)8;
	/** <i>native declaration : asm-generic/ioctl.h</i> */
	public static final int _IOC_SIZESHIFT = (int)((0 + 8) + 8);
	/** <i>native declaration : bits/environments.h</i> */
	public static final int _POSIX_V6_LPBIG_OFFBIG = (int)-1;
	/** <i>native declaration : x86_64-linux-gnu/bits/fcntl.h</i> */
	public static final int F_SETLKW64 = (int)7;
	/** <i>native declaration : bits/wordsize.h</i> */
	public static final int __SYSCALL_WORDSIZE = (int)64;
	/** <i>native declaration : bits/waitflags.h</i> */
	public static final int WNOWAIT = (int)0x01000000;
	/** <i>native declaration : bits/stdio_lim.h</i> */
	public static final int FOPEN_MAX = (int)16;
	/** <i>native declaration : features.h</i> */
	public static final int _FEATURES_H = (int)1;
	/** <i>native declaration : stdlib.h</i> */
	public static final int RAND_MAX = (int)2147483647;
	/** <i>native declaration : bits/termios.h</i> */
	public static final int IXOFF = (int)010000;
	/** <i>native declaration : bits/termios.h</i> */
	public static final int _HAVE_STRUCT_TERMIOS_C_ISPEED = (int)1;
	/** <i>native declaration : bits/waitflags.h</i> */
	public static final int WUNTRACED = (int)2;
	/** <i>native declaration : bits/signum.h</i> */
	public static final int SIGALRM = (int)14;
	/** <i>native declaration : features.h</i> */
	public static final int __USE_ATFILE = (int)1;
	/** <i>native declaration : bits/termios.h</i> */
	public static final int B57600 = (int)010001;
	/** <i>native declaration : sys/ttydefaults.h</i> */
	public static final int CREPRINT = (int)('r' & 37);
	/** <i>native declaration : bits/time.h</i> */
	public static final int _STRUCT_TIMEVAL = (int)1;
	/** <i>native declaration : bits/termios.h</i> */
	public static final int TCSAFLUSH = (int)2;
	/** <i>native declaration : asm-generic/ioctls.h</i> */
	public static final int TIOCSLCKTRMIOS = (int)0x5457;
	/** <i>native declaration : asm-generic/ioctls.h</i> */
	public static final int TIOCGPGRP = (int)0x540F;
	/** <i>native declaration : sys/ttydefaults.h</i> */
	public static final int CTIME = (int)0;
	/** <i>native declaration : bits/stat.h</i> */
	public static final int _BITS_STAT_H = (int)1;
	/** <i>native declaration : unistd.h</i> */
	public static final int _POSIX2_VERSION = (int)200809;
	/** <i>native declaration : asm-generic/errno.h</i> */
	public static final int ERESTART = (int)85;
	/** <i>native declaration : bits/posix_opt.h</i> */
	public static final int _POSIX2_CHAR_TERM = (int)200809;
	/** <i>native declaration : unistd.h</i> */
	public static final int _XOPEN_CRYPT = (int)1;
	/** <i>native declaration : sys/ttydefaults.h</i> */
	public static final int TTYDEF_IFLAG = (int)(000002 | 000040 | 000400 | 020000 | 002000 | 004000);
	/** <i>native declaration : asm-generic/errno.h</i> */
	public static final int EWOULDBLOCK = (int)11;
	/** <i>native declaration : bits/termios.h</i> */
	public static final int CBAUD = (int)010017;
	/** <i>native declaration : bits/fcntl-linux.h</i> */
	public static final int O_FSYNC = (int)4010000;
	/** <i>native declaration : sys/ttydefaults.h</i> */
	public static final int CINTR = (int)('c' & 37);
	/** <i>native declaration : bits/environments.h</i> */
	public static final String __LP64_OFF64_CFLAGS = (String)"-m64";
	/** <i>native declaration : asm-generic/ioctls.h</i> */
	public static final int TIOCMBIC = (int)0x5417;
	/** <i>native declaration : bits/fcntl-linux.h</i> */
	public static final int AT_FDCWD = (int)-100;
	/** <i>native declaration : bits/termios.h</i> */
	public static final int ECHO = (int)000010;
	/** <i>native declaration : asm-generic/errno.h</i> */
	public static final int EIDRM = (int)43;
	/** <i>native declaration : bits/signum.h</i> */
	public static final int _NSIG = (int)65;
	/** <i>native declaration : endian.h</i> */
	public static final int BYTE_ORDER = (int)1234;
	/** <i>native declaration : x86_64-linux-gnu/bits/stropts.h</i> */
	public static final int ANYMARK = (int)0x01;
	/** <i>native declaration : bits/termios.h</i> */
	public static final int B1152000 = (int)010011;
	/** <i>native declaration : bits/posix_opt.h</i> */
	public static final int _POSIX_THREAD_SAFE_FUNCTIONS = (int)200809;
	/** <i>native declaration : x86_64-linux-gnu/bits/ioctls.h</i> */
	public static final int SIOCGIFMEM = (int)0x891f;
	/** <i>native declaration : x86_64-linux-gnu/bits/ioctls.h</i> */
	public static final int SIOCADDMULTI = (int)0x8931;
	/** <i>native declaration : bits/sigstack.h</i> */
	public static final int SIGSTKSZ = (int)8192;
	/** <i>native declaration : asm-generic/errno.h</i> */
	public static final int EINPROGRESS = (int)115;
	/** <i>native declaration : bits/termios.h</i> */
	public static final int IUCLC = (int)001000;
	/** <i>native declaration : bits/signum.h</i> */
	public static final int SIGIO = (int)29;
	/** <i>native declaration : x86_64-linux-gnu/bits/ioctls.h</i> */
	public static final int SIOCDELMULTI = (int)0x8932;
	/** <i>native declaration : asm-generic/ioctls.h</i> */
	public static final int TIOCGETD = (int)0x5424;
	/** <i>native declaration : stdc-predef.h</i> */
	public static final int __STDC_NO_THREADS__ = (int)1;
	/** <i>native declaration : x86_64-linux-gnu/sys/stat.h</i> */
	public static final int S_IXUSR = (int)100;
	/** <i>native declaration : bits/signum.h</i> */
	public static final int SIGTERM = (int)15;
	/** <i>native declaration : asm-generic/errno-base.h</i> */
	public static final int ENOENT = (int)2;
	/** <i>native declaration : libio.h</i> */
	public static final int _IO_USER_LOCK = (int)0x8000;
	/** <i>native declaration : unistd.h</i> */
	public static final int L_INCR = (int)1;
	/** <i>native declaration : asm-generic/errno.h</i> */
	public static final int ENOTEMPTY = (int)39;
	/** <i>native declaration : sys/ttydefaults.h</i> */
	public static final int CEOT = (int)('d' & 37);
	/** <i>native declaration : asm-generic/errno.h</i> */
	public static final int EKEYREVOKED = (int)128;
	/** <i>native declaration : sys/ttydefaults.h</i> */
	public static final char CEOL = (char)'\0';
	/** <i>native declaration : asm-generic/errno.h</i> */
	public static final int EALREADY = (int)114;
	/** <i>native declaration : sys/ttydefaults.h</i> */
	public static final int CEOF = (int)('d' & 37);
	/** <i>native declaration : asm-generic/ioctls.h</i> */
	public static final int TIOCSERGWILD = (int)0x5454;
	/** <i>native declaration : x86_64-linux-gnu/bits/ioctls.h</i> */
	public static final int SIOCSIFHWBROADCAST = (int)0x8937;
	/** <i>native declaration : x86_64-linux-gnu/sys/stat.h</i> */
	public static final int S_IFREG = (int)100000;
	/** <i>native declaration : libio.h</i> */
	public static final int _IO_BAD_SEEN = (int)0x4000;
	/** <i>native declaration : bits/pthreadtypes.h</i> */
	public static final int __PTHREAD_RWLOCK_INT_FLAGS_SHARED = (int)1;
	/** <i>native declaration : asm-generic/ioctls.h</i> */
	public static final int TIOCSERGETLSR = (int)0x5459;
	/** <i>native declaration : asm-generic/errno.h</i> */
	public static final int ENETUNREACH = (int)101;
	/** <i>native declaration : asm-generic/errno.h</i> */
	public static final int ECONNREFUSED = (int)111;
	/** <i>native declaration : bits/posix_opt.h</i> */
	public static final int _POSIX_THREAD_PROCESS_SHARED = (int)200809;
	/** <i>native declaration : x86_64-linux-gnu/sys/stat.h</i> */
	public static final int S_ISGID = (int)2000;
	/** <i>native declaration : asm-generic/errno.h</i> */
	public static final int ESTALE = (int)116;
	/** <i>native declaration : sys/ttydefaults.h</i> */
	public static final int CQUIT = (int)34;
	/** <i>native declaration : bits/termios.h</i> */
	public static final int PENDIN = (int)040000;
	/** <i>native declaration : libio.h</i> */
	public static final int _IO_DONT_CLOSE = (int)100000;
	/** <i>native declaration : stdio.h</i> */
	public static final int _IOLBF = (int)1;
	/** <i>native declaration : bits/termios.h</i> */
	public static final int CS6 = (int)000020;
	/** <i>native declaration : bits/termios.h</i> */
	public static final int CS7 = (int)000040;
	/** <i>native declaration : bits/termios.h</i> */
	public static final int CS5 = (int)000000;
	/** <i>native declaration : bits/fcntl-linux.h</i> */
	public static final int O_NDELAY = (int)4000;
	/** <i>native declaration : bits/environments.h</i> */
	public static final String __ILP32_OFF32_CFLAGS = (String)"-m32";
	/** <i>native declaration : asm-generic/ioctl.h</i> */
	public static final int _IOC_WRITE = (int)1;
	/** <i>native declaration : bits/termios.h</i> */
	public static final int TCSANOW = (int)0;
	/** <i>native declaration : bits/termios.h</i> */
	public static final int CS8 = (int)000060;
	/** <i>native declaration : bits/signum.h</i> */
	public static final int __SIGRTMIN = (int)32;
	/** <i>native declaration : sys/ttydefaults.h</i> */
	public static final int CKILL = (int)('u' & 37);
	/** <i>native declaration : endian.h</i> */
	public static final int __FLOAT_WORD_ORDER = (int)1234;
	/** <i>native declaration : sys/sysmacros.h</i> */
	public static final int _SYS_SYSMACROS_H = (int)1;
	/** <i>native declaration : x86_64-linux-gnu/sys/stat.h</i> */
	public static final int _SYS_STAT_H = (int)1;
	/** <i>native declaration : asm-generic/errno.h</i> */
	public static final int EDESTADDRREQ = (int)89;
	/** <i>native declaration : asm-generic/errno.h</i> */
	public static final int ESHUTDOWN = (int)108;
	/** <i>native declaration : bits/posix_opt.h</i> */
	public static final int _BITS_POSIX_OPT_H = (int)1;
	/** <i>native declaration : asm-generic/ioctls.h</i> */
	public static final int TIOCSETD = (int)0x5423;
	/** <i>native declaration : x86_64-linux-gnu/sys/wait.h</i> */
	public static final int WCOREFLAG = (int)0x80;
	/** <i>native declaration : bits/posix_opt.h</i> */
	public static final int _POSIX_TYPED_MEMORY_OBJECTS = (int)-1;
	/** <i>native declaration : bits/posix_opt.h</i> */
	public static final int _POSIX_READER_WRITER_LOCKS = (int)200809;
	/** <i>native declaration : asm-generic/errno.h</i> */
	public static final int ENOMSG = (int)42;
	/** <i>native declaration : asm-generic/errno.h</i> */
	public static final int ECONNRESET = (int)104;
	/** <i>native declaration : libio.h</i> */
	public static final int _IOS_BIN = (int)128;
	/** <i>native declaration : libio.h</i> */
	public static final int _IO_BUFSIZ = (int)8192;
	/** <i>native declaration : bits/fcntl-linux.h</i> */
	public static final int POSIX_FADV_WILLNEED = (int)3;
	/** <i>native declaration : asm-generic/ioctls.h</i> */
	public static final int TIOCSSOFTCAR = (int)0x541A;
	/** <i>native declaration : asm-generic/errno.h</i> */
	public static final int EMSGSIZE = (int)90;
	/** <i>native declaration : libio.h</i> */
	public static final int _IO_OCT = (int)40;
	/** <i>native declaration : asm-generic/errno.h</i> */
	public static final int EL2NSYNC = (int)45;
	/** <i>native declaration : asm-generic/ioctls.h</i> */
	public static final int TIOCINQ = (int)0x541B;
	/** <i>native declaration : libio.h</i> */
	public static final int _IO_UNITBUF = (int)20000;
	/** <i>native declaration : bits/termios.h</i> */
	public static final int CR0 = (int)000000;
	/** <i>native declaration : bits/termios.h</i> */
	public static final int CR1 = (int)001000;
	/** <i>native declaration : bits/termios.h</i> */
	public static final int CR2 = (int)002000;
	/** <i>native declaration : bits/termios.h</i> */
	public static final int CR3 = (int)003000;
	/** <i>native declaration : bits/signum.h</i> */
	public static final int SIGXFSZ = (int)25;
	/** <i>native declaration : x86_64-linux-gnu/bits/ioctls.h</i> */
	public static final int SIOCGIFMAP = (int)0x8970;
	/** <i>native declaration : x86_64-linux-gnu/bits/stropts.h</i> */
	public static final char __SID = (char)('S' << 8);
	/** <i>native declaration : x86_64-linux-gnu/bits/ioctls.h</i> */
	public static final int SIOCSIFDSTADDR = (int)0x8918;
	/** <i>native declaration : x86_64-linux-gnu/sys/stat.h</i> */
	public static final int S_IFCHR = (int)020000;
	/** <i>native declaration : bits/pthreadtypes.h</i> */
	public static final int __SIZEOF_PTHREAD_MUTEX_T = (int)40;
	/** <i>native declaration : libio.h</i> */
	public static final int _IO_UNIFIED_JUMPTABLES = (int)1;
	/** <i>native declaration : x86_64-linux-gnu/sys/stat.h</i> */
	public static final int S_IFLNK = (int)120000;
	/** <i>native declaration : x86_64-linux-gnu/bits/stropts.h</i> */
	public static final int S_RDBAND = (int)0x0080;
	/** <i>native declaration : libio.h</i> */
	public static final int _IOS_NOREPLACE = (int)64;
	/** <i>native declaration : bits/posix_opt.h</i> */
	public static final int _POSIX_SYNCHRONIZED_IO = (int)200809;
	/** <i>native declaration : bits/fcntl-linux.h</i> */
	public static final int __O_DIRECT = (int)40000;
	/** <i>native declaration : sys/ttydefaults.h</i> */
	public static final int CMIN = (int)1;
	/** <i>native declaration : bits/signum.h</i> */
	public static final int SIGPOLL = (int)29;
	/** <i>native declaration : bits/signum.h</i> */
	public static final int SIGSTOP = (int)19;
	/** <i>native declaration : bits/termios.h</i> */
	public static final int TABDLY = (int)014000;
	/** <i>native declaration : bits/signum.h</i> */
	public static final int SIGSTKFLT = (int)16;
	/** <i>native declaration : x86_64-linux-gnu/sys/stat.h</i> */
	public static final int S_IEXEC = (int)100;
	/** <i>native declaration : asm-generic/errno-base.h</i> */
	public static final int EROFS = (int)30;
	/** <i>native declaration : asm-generic/errno-base.h</i> */
	public static final int EISDIR = (int)21;
	/** <i>native declaration : bits/signum.h</i> */
	public static final int SIGABRT = (int)6;
	/** <i>native declaration : x86_64-linux-gnu/sys/stat.h</i> */
	public static final int S_IFMT = (int)170000;
	/** <i>native declaration : bits/pthreadtypes.h</i> */
	public static final int __PTHREAD_MUTEX_HAVE_PREV = (int)1;
	/** <i>native declaration : bits/environments.h</i> */
	public static final String __ILP32_OFFBIG_LDFLAGS = (String)"-m32";
	/** <i>native declaration : bits/termios.h</i> */
	public static final int B460800 = (int)010004;
	/** <i>native declaration : bits/posix_opt.h</i> */
	public static final int _POSIX_REENTRANT_FUNCTIONS = (int)1;
	/** <i>native declaration : bits/fcntl-linux.h</i> */
	public static final int __O_CLOEXEC = (int)2000000;
	/** <i>native declaration : bits/stat.h</i> */
	public static final int __S_IWRITE = (int)200;
	/** <i>native declaration : bits/termios.h</i> */
	public static final int B150 = (int)000005;
	/** <i>native declaration : x86_64-linux-gnu/bits/fcntl.h</i> */
	public static final int F_SETLK64 = (int)6;
	/** <i>native declaration : features.h</i> */
	public static final int __USE_XOPEN2K8 = (int)1;
	/** <i>native declaration : asm-generic/errno-base.h</i> */
	public static final int ENOTBLK = (int)15;
	/** <i>native declaration : x86_64-linux-gnu/bits/stropts.h</i> */
	public static final int S_OUTPUT = (int)0x0004;
	/** <i>native declaration : unistd.h</i> */
	public static final int __POSIX2_THIS_VERSION = (int)200809;
	/** <i>native declaration : asm-generic/ioctls.h</i> */
	public static final int TIOCPKT_STOP = (int)4;
	/** <i>native declaration : libio.h</i> */
	public static final int _IOS_ATEND = (int)4;
	/** <i>native declaration : asm-generic/ioctls.h</i> */
	public static final int TIOCSCTTY = (int)0x540E;
	/** <i>native declaration : asm-generic/errno-base.h</i> */
	public static final int ETXTBSY = (int)26;
	/** <i>native declaration : asm-generic/ioctl.h</i> */
	public static final int IOCSIZE_SHIFT = (int)((0 + 8) + 8);
	/** <i>native declaration : bits/termios.h</i> */
	public static final int PARODD = (int)001000;
	/** <i>native declaration : unistd.h</i> */
	public static final int _XOPEN_ENH_I18N = (int)1;
	/** <i>native declaration : unistd.h</i> */
	public static final int L_SET = (int)0;
	/** <i>native declaration : x86_64-linux-gnu/bits/ioctls.h</i> */
	public static final int SIOCRTMSG = (int)0x890D;
	/** <i>native declaration : asm-generic/errno.h</i> */
	public static final int ENOANO = (int)55;
	/** <i>native declaration : x86_64-linux-gnu/bits/ioctls.h</i> */
	public static final int SIOCGIFCONF = (int)0x8912;
	/** <i>native declaration : asm-generic/ioctls.h</i> */
	public static final int TIOCSERGETMULTI = (int)0x545A;
	/** <i>native declaration : asm-generic/errno.h</i> */
	public static final int EKEYREJECTED = (int)129;
	/** <i>native declaration : bits/termios.h</i> */
	public static final int B0 = (int)000000;
	/** <i>native declaration : asm-generic/ioctls.h</i> */
	public static final int TIOCCONS = (int)0x541D;
	/** <i>native declaration : bits/termios.h</i> */
	public static final int VSUSP = (int)10;
	/** <i>native declaration : bits/pthreadtypes.h</i> */
	public static final int _BITS_PTHREADTYPES_H = (int)1;
	/** <i>native declaration : features.h</i> */
	public static final int __USE_BSD = (int)1;
	/** <i>native declaration : bits/termios.h</i> */
	public static final int NOFLSH = (int)000200;
	/** <i>native declaration : asm-generic/errno.h</i> */
	public static final int ELNRNG = (int)48;
	/** <i>native declaration : bits/signum.h</i> */
	public static final int SIGCHLD = (int)17;
	/** <i>native declaration : bits/posix_opt.h</i> */
	public static final int _XOPEN_REALTIME_THREADS = (int)1;
	/** <i>native declaration : bits/sigaction.h</i> */
	public static final int SIG_UNBLOCK = (int)1;
	/** <i>native declaration : endian.h</i> */
	public static final int PDP_ENDIAN = (int)3412;
	/** <i>native declaration : sys/ttydefaults.h</i> */
	public static final int CSUSP = (int)('z' & 37);
	/** <i>native declaration : asm-generic/ioctls.h</i> */
	public static final int TCSBRK = (int)0x5409;
	/** <i>native declaration : x86_64-linux-gnu/sys/stat.h</i> */
	public static final int S_IREAD = (int)400;
	/** <i>native declaration : asm-generic/errno.h</i> */
	public static final int EDEADLK = (int)35;
	/** <i>native declaration : bits/environments.h</i> */
	public static final int _POSIX_V6_LP64_OFF64 = (int)1;
	/** <i>native declaration : asm-generic/errno.h</i> */
	public static final int ETIMEDOUT = (int)110;
	/** <i>native declaration : sys/select.h</i> */
	public static final int _SYS_SELECT_H = (int)1;
	/** <i>native declaration : x86_64-linux-gnu/bits/ioctls.h</i> */
	public static final int SIOCSIFMTU = (int)0x8922;
	/** <i>native declaration : x86_64-linux-gnu/bits/stropts.h</i> */
	public static final int I_LOOK = (int)(('S' << 8) | 4);
	/** <i>native declaration : asm-generic/errno.h</i> */
	public static final int ECANCELED = (int)125;
	/** <i>native declaration : sys/ttydefaults.h</i> */
	public static final int TTYDEF_OFLAG = (int)(000001 | 000004 | 014000);
	/** <i>native declaration : bits/termios.h</i> */
	public static final int ECHOCTL = (int)001000;
	/** <i>native declaration : asm-generic/errno.h</i> */
	public static final int EAFNOSUPPORT = (int)97;
	/** <i>native declaration : bits/termios.h</i> */
	public static final int __MAX_BAUD = (int)010017;
	/** <i>native declaration : bits/fcntl-linux.h</i> */
	public static final int POSIX_FADV_DONTNEED = (int)4;
	/** <i>native declaration : features.h</i> */
	public static final int __USE_SVID = (int)1;
	/** <i>native declaration : bits/posix_opt.h</i> */
	public static final int _POSIX_TRACE_EVENT_FILTER = (int)-1;
	/** <i>native declaration : features.h</i> */
	public static final int __USE_ISOC99 = (int)1;
	/** <i>native declaration : features.h</i> */
	public static final int __USE_ISOC95 = (int)1;
	/** <i>native declaration : x86_64-linux-gnu/bits/ioctls.h</i> */
	public static final int SIOCSIFENCAP = (int)0x8926;
	/** <i>native declaration : bits/fcntl-linux.h</i> */
	public static final int O_NOCTTY = (int)400;
	/** <i>native declaration : endian.h</i> */
	public static final int LITTLE_ENDIAN = (int)1234;
	/** <i>native declaration : x86_64-linux-gnu/sys/stat.h</i> */
	public static final int S_IWGRP = (int)(200 >> 3);
	/** <i>native declaration : bits/fcntl-linux.h</i> */
	public static final int O_SYNC = (int)4010000;
	/** <i>native declaration : x86_64-linux-gnu/sys/stat.h</i> */
	public static final int S_IWUSR = (int)200;
	/** <i>native declaration : bits/termios.h</i> */
	public static final int ECHONL = (int)000100;
	/** <i>native declaration : bits/termios.h</i> */
	public static final int TCOON = (int)1;
	/** <i>native declaration : bits/posix_opt.h</i> */
	public static final int _POSIX_MESSAGE_PASSING = (int)200809;
	/** <i>native declaration : x86_64-linux-gnu/bits/stropts.h</i> */
	public static final int SNDZERO = (int)0x001;
	/** <i>native declaration : asm-generic/ioctl.h</i> */
	public static final int IOC_INOUT = (int)((1 | 2) << (((0 + 8) + 8) + 14));
	/** <i>native declaration : sys/ttydefaults.h</i> */
	public static final int CLNEXT = (int)('v' & 37);
	/** <i>native declaration : bits/termios.h</i> */
	public static final int VQUIT = (int)1;
	/** <i>native declaration : bits/termios.h</i> */
	public static final int XTABS = (int)014000;
	/** <i>native declaration : asm-generic/errno.h</i> */
	public static final int EUSERS = (int)87;
	/** <i>native declaration : asm-generic/ioctls.h</i> */
	public static final int TIOCSBRK = (int)0x5427;
	/** <i>native declaration : sys/select.h</i> */
	public static final int FD_SETSIZE = (int)1024;
	/** <i>native declaration : bits/posix_opt.h</i> */
	public static final int _POSIX_PRIORITIZED_IO = (int)200809;
	/** <i>native declaration : asm-generic/errno.h</i> */
	public static final int EPROTO = (int)71;
	/** <i>native declaration : x86_64-linux-gnu/bits/fcntl.h</i> */
	public static final int __O_LARGEFILE = (int)0;
	/** <i>native declaration : bits/posix_opt.h</i> */
	public static final int _POSIX_CHOWN_RESTRICTED = (int)0;
	/** <i>native declaration : asm-generic/errno.h</i> */
	public static final int ENOTNAM = (int)118;
	/** <i>native declaration : x86_64-linux-gnu/bits/stropts.h</i> */
	public static final int LASTMARK = (int)0x02;
	/** <i>native declaration : unistd.h</i> */
	public static final int STDERR_FILENO = (int)2;
	/** <i>native declaration : asm-generic/errno.h</i> */
	public static final int ELIBACC = (int)79;
	/** <i>native declaration : asm-generic/errno.h</i> */
	public static final int ELOOP = (int)40;
	/** <i>native declaration : unistd.h</i> */
	public static final int X_OK = (int)1;
	/** <i>native declaration : bits/termios.h</i> */
	public static final int B134 = (int)000004;
	/** <i>native declaration : unistd.h</i> */
	public static final int _POSIX2_LOCALEDEF = (int)200809;
	/** <i>native declaration : bits/sigaction.h</i> */
	public static final int SIG_SETMASK = (int)2;
	/** <i>native declaration : bits/signum.h</i> */
	public static final int SIGSYS = (int)31;
	/** <i>native declaration : asm-generic/errno.h</i> */
	public static final int EDQUOT = (int)122;
	/** <i>native declaration : asm-generic/ioctl.h</i> */
	public static final int _IOC_READ = (int)2;
	/** <i>native declaration : x86_64-linux-gnu/bits/ioctls.h</i> */
	public static final int SIOCDEVPRIVATE = (int)0x89F0;
	/** <i>native declaration : endian.h</i> */
	public static final int __PDP_ENDIAN = (int)3412;
	/** <i>native declaration : asm-generic/ioctls.h</i> */
	public static final int TIOCSSERIAL = (int)0x541F;
	/** <i>native declaration : x86_64-linux-gnu/bits/ioctls.h</i> */
	public static final int SIOCGIFDSTADDR = (int)0x8917;
	/** <i>native declaration : asm-generic/errno.h</i> */
	public static final int ENOPROTOOPT = (int)92;
	/** <i>native declaration : bits/termios.h</i> */
	public static final int B110 = (int)000003;
	/** <i>native declaration : asm-generic/errno.h</i> */
	public static final int ECOMM = (int)70;
	/** <i>native declaration : asm-generic/ioctls.h</i> */
	public static final int TIOCMGET = (int)0x5415;
	/** <i>native declaration : bits/termios.h</i> */
	public static final int ECHOKE = (int)004000;
	/** <i>native declaration : libio.h</i> */
	public static final int _IO_UPPERCASE = (int)1000;
	/** <i>native declaration : stdlib.h</i> */
	public static final int _STDLIB_H = (int)1;
	/** <i>native declaration : asm-generic/ioctls.h</i> */
	public static final int TIOCGSID = (int)0x5429;
	/** <i>native declaration : bits/termios.h</i> */
	public static final int EXTB = (int)000017;
	/** <i>native declaration : asm-generic/errno.h</i> */
	public static final int ELIBBAD = (int)80;
	/** <i>native declaration : bits/termios.h</i> */
	public static final int VERASE = (int)2;
	/** <i>native declaration : bits/termios.h</i> */
	public static final int EXTA = (int)000016;
	/** <i>native declaration : bits/termios.h</i> */
	public static final int HUPCL = (int)002000;
	/** <i>native declaration : bits/posix_opt.h</i> */
	public static final int _POSIX_JOB_CONTROL = (int)1;
	/** <i>native declaration : bits/fcntl-linux.h</i> */
	public static final int F_DUPFD_CLOEXEC = (int)1030;
	/** <i>native declaration : _G_config.h</i> */
	public static final int _G_config_h = (int)1;
	/** <i>native declaration : bits/posix_opt.h</i> */
	public static final int _POSIX_THREAD_PRIO_INHERIT = (int)200809;
	/** <i>native declaration : asm-generic/errno.h</i> */
	public static final int ENAMETOOLONG = (int)36;
	/** <i>native declaration : bits/pthreadtypes.h</i> */
	public static final int __SIZEOF_PTHREAD_COND_T = (int)48;
	/** <i>native declaration : bits/pthreadtypes.h</i> */
	public static final int __SIZEOF_PTHREAD_ATTR_T = (int)56;
	/** <i>native declaration : asm-generic/ioctls.h</i> */
	public static final int FIONBIO = (int)0x5421;
	/** <i>native declaration : x86_64-linux-gnu/sys/stat.h</i> */
	public static final int ALLPERMS = (int)(4000 | 2000 | 1000 | (400 | 200 | 100) | ((400 | 200 | 100) >> 3) | (((400 | 200 | 100) >> 3) >> 3));
	/** <i>native declaration : bits/termios.h</i> */
	public static final int B38400 = (int)000017;
	/** <i>native declaration : _G_config.h</i> */
	public static final int _G_HAVE_MMAP = (int)1;
	/** <i>native declaration : bits/stat.h</i> */
	public static final int _MKNOD_VER_LINUX = (int)0;
	/** <i>native declaration : bits/ioctl-types.h</i> */
	public static final int TIOCM_RNG = (int)0x080;
	/** <i>native declaration : bits/stat.h</i> */
	public static final int __S_IFDIR = (int)040000;
	/** <i>native declaration : x86_64-linux-gnu/bits/stropts.h</i> */
	public static final int I_SWROPT = (int)(('S' << 8) | 19);
	/** <i>native declaration : stdio.h</i> */
	public static final int __FILE_defined = (int)1;
	/** <i>native declaration : bits/fcntl-linux.h</i> */
	public static final int __F_GETOWN = (int)9;
	/** <i>native declaration : libio.h</i> */
	public static final int _IO_FLAGS2_USER_WBUF = (int)8;
	/** <i>native declaration : bits/termios.h</i> */
	public static final int TOSTOP = (int)000400;
	/** <i>native declaration : bits/termios.h</i> */
	public static final int NLDLY = (int)000400;
	/** <i>native declaration : libio.h</i> */
	public static final int _IO_NO_WRITES = (int)8;
	/** <i>native declaration : x86_64-linux-gnu/bits/ioctls.h</i> */
	public static final int SIOCGIFADDR = (int)0x8915;
	/** <i>native declaration : x86_64-linux-gnu/bits/stropts.h</i> */
	public static final int I_CANPUT = (int)(('S' << 8) | 34);
	/** <i>native declaration : asm-generic/ioctl.h</i> */
	public static final int IOC_IN = (int)(1 << (((0 + 8) + 8) + 14));
	/** <i>native declaration : bits/ioctl-types.h</i> */
	public static final int TIOCM_RTS = (int)0x004;
	/** <i>native declaration : bits/stat.h</i> */
	public static final int __S_IFLNK = (int)120000;
	/** <i>native declaration : libio.h</i> */
	public static final int _IO_IN_BACKUP = (int)0x100;
	/** <i>native declaration : bits/sigaction.h</i> */
	public static final int SA_NOCLDSTOP = (int)1;
	/** <i>native declaration : asm-generic/errno.h</i> */
	public static final int ETOOMANYREFS = (int)109;
	/** <i>native declaration : asm-generic/ioctls.h</i> */
	public static final int TIOCMBIS = (int)0x5416;
	/** <i>native declaration : asm-generic/errno.h</i> */
	public static final int EBFONT = (int)59;
	/** <i>native declaration : termios.h</i> */
	public static final int _TERMIOS_H = (int)1;
	/** <i>native declaration : bits/fcntl-linux.h</i> */
	public static final int FD_CLOEXEC = (int)1;
	/** <i>native declaration : signal.h</i> */
	public static final int SV_RESETHAND = (int)(1 << 2);
	/** <i>native declaration : bits/sigstack.h</i> */
	public static final int MINSIGSTKSZ = (int)2048;
	/** <i>native declaration : bits/termios.h</i> */
	public static final int B115200 = (int)010002;
	/** <i>native declaration : libio.h</i> */
	public static final int _IO_NO_READS = (int)4;
	/** <i>native declaration : bits/pthreadtypes.h</i> */
	public static final int __SIZEOF_PTHREAD_MUTEXATTR_T = (int)4;
	/** <i>native declaration : x86_64-linux-gnu/bits/ioctls.h</i> */
	public static final int SIOCGIFFLAGS = (int)0x8913;
	/** <i>native declaration : asm-generic/errno-base.h</i> */
	public static final int ENFILE = (int)23;
	/** <i>native declaration : asm-generic/errno.h</i> */
	public static final int EMEDIUMTYPE = (int)124;
	/** <i>native declaration : bits/termios.h</i> */
	public static final int CIBAUD = (int)02003600000;
	/** <i>native declaration : features.h</i> */
	public static final int __USE_MISC = (int)1;
	/** <i>native declaration : asm-generic/errno.h</i> */
	public static final int ESTRPIPE = (int)86;
	/** <i>native declaration : bits/termios.h</i> */
	public static final int TCSADRAIN = (int)1;
	/** <i>native declaration : x86_64-linux-gnu/bits/ioctls.h</i> */
	public static final int SIOCSIFLINK = (int)0x8911;
	/** <i>native declaration : bits/pthreadtypes.h</i> */
	public static final int __SIZEOF_PTHREAD_BARRIER_T = (int)32;
	/** <i>native declaration : x86_64-linux-gnu/bits/stropts.h</i> */
	public static final int MSG_HIPRI = (int)0x01;
	/** <i>native declaration : features.h</i> */
	public static final int __USE_ANSI = (int)1;
	/** <i>native declaration : signal.h</i> */
	public static final int SV_ONSTACK = (int)(1 << 0);
	/** <i>native declaration : bits/ioctl-types.h</i> */
	public static final int N_PPP = (int)3;
	/** <i>native declaration : bits/fcntl-linux.h</i> */
	public static final int AT_SYMLINK_FOLLOW = (int)0x400;
	/** <i>native declaration : bits/fcntl-linux.h</i> */
	public static final int O_APPEND = (int)2000;
	/** <i>native declaration : asm-generic/ioctl.h</i> */
	public static final int _IOC_SIZEBITS = (int)14;
	/** <i>native declaration : bits/fcntl-linux.h</i> */
	public static final int F_GETFL = (int)3;
	/** <i>native declaration : libio.h</i> */
	public static final int _IO_UNBUFFERED = (int)2;
	/** <i>native declaration : x86_64-linux-gnu/bits/stropts.h</i> */
	public static final int I_RECVFD = (int)(('S' << 8) | 14);
	/** <i>native declaration : libio.h</i> */
	public static final int _IO_DEC = (int)20;
	/** <i>native declaration : bits/posix_opt.h</i> */
	public static final int _POSIX_REALTIME_SIGNALS = (int)200809;
	/** <i>native declaration : bits/posix_opt.h</i> */
	public static final int _POSIX_THREAD_SPORADIC_SERVER = (int)-1;
	/** <i>native declaration : asm-generic/ioctls.h</i> */
	public static final int TIOCVHANGUP = (int)0x5437;
	/** <i>native declaration : asm-generic/errno-base.h</i> */
	public static final int EINVAL = (int)22;
	/** <i>native declaration : x86_64-linux-gnu/sys/stat.h</i> */
	public static final int S_IWRITE = (int)200;
	/** <i>native declaration : asm-generic/ioctls.h</i> */
	public static final int TCSETXW = (int)0x5435;
	/** <i>native declaration : bits/fcntl-linux.h</i> */
	public static final int O_NONBLOCK = (int)4000;
	/** <i>native declaration : bits/signum.h</i> */
	public static final int SIGTTOU = (int)22;
	/** <i>native declaration : asm-generic/ioctls.h</i> */
	public static final int TCSETXF = (int)0x5434;
	/** <i>native declaration : bits/ioctl-types.h</i> */
	public static final int TIOCM_DSR = (int)0x100;
	/** <i>native declaration : asm-generic/ioctl.h</i> */
	public static final int _IOC_TYPEBITS = (int)8;
	/** <i>native declaration : bits/posix_opt.h</i> */
	public static final int _POSIX_MEMLOCK_RANGE = (int)200809;
	/** <i>native declaration : x86_64-linux-gnu/sys/stat.h</i> */
	public static final int S_IFBLK = (int)060000;
	/** <i>native declaration : bits/posix_opt.h</i> */
	public static final int _POSIX_MEMLOCK = (int)200809;
	/** <i>native declaration : bits/posix_opt.h</i> */
	public static final int _POSIX_ADVISORY_INFO = (int)200809;
	/** <i>native declaration : bits/stat.h</i> */
	public static final int _STAT_VER_KERNEL = (int)0;
	/** <i>native declaration : libio.h</i> */
	public static final int _IO_MAGIC_MASK = (int)0xFFFF0000;
	/** <i>native declaration : asm-generic/errno.h</i> */
	public static final int ENOTRECOVERABLE = (int)131;
	/** <i>native declaration : bits/sigset.h</i> */
	public static final int _SIGSET_H_fns = (int)1;
	/** <i>native declaration : features.h</i> */
	public static final int _POSIX_SOURCE = (int)1;
	/** <i>native declaration : bits/termios.h</i> */
	public static final int VT0 = (int)000000;
	/** <i>native declaration : bits/ioctl-types.h</i> */
	public static final int TIOCM_DTR = (int)0x002;
	/** <i>native declaration : bits/termios.h</i> */
	public static final int VT1 = (int)040000;
	/** <i>native declaration : x86_64-linux-gnu/bits/ioctls.h</i> */
	public static final int SIOCGIFINDEX = (int)0x8933;
	/** <i>native declaration : bits/ioctl-types.h</i> */
	public static final int N_TTY = (int)0;
	/** <i>native declaration : asm-generic/errno.h</i> */
	public static final int ENOMEDIUM = (int)123;
	/** <i>native declaration : time.h</i> */
	public static final int __timespec_defined = (int)1;
	/** <i>native declaration : bits/fcntl-linux.h</i> */
	public static final int F_GETFD = (int)1;
	/** <i>native declaration : x86_64-linux-gnu/bits/stropts.h</i> */
	public static final int I_FLUSH = (int)(('S' << 8) | 5);
	/** <i>native declaration : asm-generic/ioctls.h</i> */
	public static final int TCSETSW = (int)0x5403;
	/** <i>native declaration : asm-generic/ioctls.h</i> */
	public static final int TIOCPKT_START = (int)8;
	/** <i>native declaration : asm-generic/errno-base.h</i> */
	public static final int EACCES = (int)13;
	/** <i>native declaration : asm-generic/ioctls.h</i> */
	public static final int TCSETSF = (int)0x5404;
	/** <i>native declaration : bits/posix_opt.h</i> */
	public static final int _POSIX_ASYNC_IO = (int)1;
	/** <i>native declaration : x86_64-linux-gnu/bits/ioctls.h</i> */
	public static final int SIOCSIFBR = (int)0x8941;
	/** <i>native declaration : unistd.h</i> */
	public static final int STDIN_FILENO = (int)0;
	/** <i>native declaration : bits/termios.h</i> */
	public static final int XCASE = (int)000004;
	/** <i>native declaration : stdc-predef.h</i> */
	public static final int _STDC_PREDEF_H = (int)1;
	/** <i>native declaration : bits/termios.h</i> */
	public static final int TCIOFF = (int)2;
	/** <i>native declaration : asm-generic/errno.h</i> */
	public static final int EPROTOTYPE = (int)91;
	/** <i>native declaration : bits/posix_opt.h</i> */
	public static final int _POSIX_NO_TRUNC = (int)1;
	/** <i>native declaration : asm-generic/errno.h</i> */
	public static final int ERFKILL = (int)132;
	/** <i>native declaration : bits/fcntl-linux.h</i> */
	public static final int F_GETLK = (int)5;
	/** <i>native declaration : asm-generic/errno-base.h</i> */
	public static final int ENOMEM = (int)12;
	/** <i>native declaration : x86_64-linux-gnu/sys/wait.h</i> */
	public static final int _SYS_WAIT_H = (int)1;
	/** <i>native declaration : x86_64-linux-gnu/bits/ioctls.h</i> */
	public static final int SIOCGIFHWADDR = (int)0x8927;
	/** <i>native declaration : bits/sigaction.h</i> */
	public static final int SA_ONESHOT = (int)0x80000000;
	/** <i>native declaration : bits/posix_opt.h</i> */
	public static final int _LFS64_LARGEFILE = (int)1;
	/** <i>native declaration : libio.h</i> */
	public static final int _IO_FIXED = (int)10000;
	/** <i>native declaration : asm-generic/errno-base.h</i> */
	public static final int EFAULT = (int)14;
	/** <i>native declaration : x86_64-linux-gnu/bits/ioctls.h</i> */
	public static final int SIOCGARP = (int)0x8954;
	/** <i>native declaration : asm-generic/ioctls.h</i> */
	public static final int TIOCSWINSZ = (int)0x5414;
	/** <i>native declaration : bits/fcntl-linux.h</i> */
	public static final int F_DUPFD = (int)0;
	/** <i>native declaration : bits/termios.h</i> */
	public static final int OFILL = (int)000100;
	/** <i>native declaration : bits/fcntl-linux.h</i> */
	public static final int F_SETFL = (int)4;
	/** <i>native declaration : bits/termios.h</i> */
//	public static final int CMSPAR = (int)10000000000;
	/** <i>native declaration : bits/termios.h</i> */
	public static final int VREPRINT = (int)12;
	/** <i>native declaration : asm-generic/ioctls.h</i> */
	public static final int TCSETAW = (int)0x5407;
	/** <i>native declaration : bits/fcntl-linux.h</i> */
	public static final int F_SETFD = (int)2;
	/** <i>native declaration : bits/posix_opt.h</i> */
	public static final int _POSIX_TIMEOUTS = (int)200809;
	/** <i>native declaration : bits/signum.h</i> */
	public static final int SIGTTIN = (int)21;
	/** <i>native declaration : x86_64-linux-gnu/bits/ioctls.h</i> */
	public static final int SIOCDELRT = (int)0x890C;
	/** <i>native declaration : bits/signum.h</i> */
	public static final int SIGHUP = (int)1;
	/** <i>native declaration : sys/ttydefaults.h</i> */
	public static final int TTYDEF_LFLAG = (int)(000010 | 000002 | 000001 | 100000 | 000020 | 004000 | 001000);
	/** <i>native declaration : asm-generic/errno.h</i> */
	public static final int ENAVAIL = (int)119;
	/** <i>native declaration : bits/termios.h</i> */
	public static final int B1200 = (int)000011;
	/** <i>native declaration : features.h</i> */
	public static final int __GLIBC_HAVE_LONG_LONG = (int)1;
	/** <i>native declaration : stdlib.h</i> */
	public static final int EXIT_SUCCESS = (int)0;
	/** <i>native declaration : bits/signum.h</i> */
	public static final int SIGPWR = (int)30;
	/** <i>native declaration : bits/wordsize.h</i> */
	public static final int __WORDSIZE_TIME64_COMPAT32 = (int)1;
	/** <i>native declaration : x86_64-linux-gnu/bits/stropts.h</i> */
	public static final int I_SENDFD = (int)(('S' << 8) | 17);
	/** <i>native declaration : libio.h</i> */
	public static final int _IO_LINKED = (int)0x80;
	/** <i>native declaration : bits/environments.h</i> */
	public static final int _XBS5_LPBIG_OFFBIG = (int)-1;
	/** <i>native declaration : asm-generic/ioctls.h</i> */
	public static final int TCSETAF = (int)0x5408;
	/** <i>native declaration : stdio.h</i> */
	public static final int SEEK_SET = (int)0;
	/** <i>native declaration : bits/termios.h</i> */
	public static final int OFDEL = (int)000200;
	/** <i>native declaration : asm-generic/errno.h</i> */
	public static final int EBADR = (int)53;
	/** <i>native declaration : bits/stdio_lim.h</i> */
	public static final int FILENAME_MAX = (int)4096;
	/** <i>native declaration : asm-generic/errno-base.h</i> */
	public static final int EBADF = (int)9;
	/** <i>native declaration : asm-generic/errno.h</i> */
	public static final int EBADE = (int)52;
	/** <i>native declaration : x86_64-linux-gnu/sys/stat.h</i> */
	public static final int S_IRGRP = (int)(400 >> 3);
	/** <i>native declaration : bits/termios.h</i> */
	public static final int INPCK = (int)000020;
	/** <i>native declaration : x86_64-linux-gnu/bits/stropts.h</i> */
	public static final int RPROTDAT = (int)0x0004;
	/** <i>native declaration : libio.h</i> */
	public static final int _IO_SHOWBASE = (int)200;
	/** <i>native declaration : bits/termios.h</i> */
	public static final int CSTOPB = (int)000100;
	/** <i>native declaration : asm-generic/errno-base.h</i> */
	public static final int EBUSY = (int)16;
	/** <i>native declaration : bits/fcntl-linux.h</i> */
	public static final int FASYNC = (int)20000;
	/** <i>native declaration : bits/environments.h</i> */
	public static final int _XBS5_LP64_OFF64 = (int)1;
	/** <i>native declaration : x86_64-linux-gnu/sys/stat.h</i> */
	public static final int S_IFDIR = (int)040000;
	/** <i>native declaration : libio.h</i> */
	public static final int _IO_SCIENTIFIC = (int)4000;
	/** <i>native declaration : bits/termios.h</i> */
	public static final int IXON = (int)002000;
	/** <i>native declaration : bits/ioctl-types.h</i> */
	public static final int N_6PACK = (int)7;
	/** <i>native declaration : x86_64-linux-gnu/bits/stropts.h</i> */
	public static final int I_PEEK = (int)(('S' << 8) | 15);
	/** <i>native declaration : x86_64-linux-gnu/bits/ioctls.h</i> */
	public static final int SIOCGIFMETRIC = (int)0x891d;
	/** <i>native declaration : bits/ioctl-types.h</i> */
	public static final int N_AX25 = (int)5;
	/** <i>native declaration : features.h</i> */
	public static final int __GLIBC__ = (int)2;
	/** <i>native declaration : bits/stdio_lim.h</i> */
	public static final int TMP_MAX = (int)238328;
	/** <i>native declaration : asm-generic/errno.h</i> */
	public static final int ENOPKG = (int)65;
	/** <i>native declaration : bits/environments.h</i> */
	public static final int _POSIX_V7_LPBIG_OFFBIG = (int)-1;
	/** <i>native declaration : asm-generic/errno.h</i> */
	public static final int ESRMNT = (int)69;
	/** <i>native declaration : bits/fcntl-linux.h</i> */
	public static final int F_SHLCK = (int)8;
	/** <i>native declaration : asm-generic/errno-base.h</i> */
	public static final int EPIPE = (int)32;
	/** <i>native declaration : bits/ioctl-types.h</i> */
	public static final int N_IRDA = (int)11;
	/** <i>native declaration : bits/fcntl-linux.h</i> */
	public static final int O_ASYNC = (int)20000;
	/** <i>native declaration : asm-generic/errno.h</i> */
	public static final int EUNATCH = (int)49;
	/** <i>native declaration : bits/stat.h</i> */
	public static final int __S_IFMT = (int)170000;
	/** <i>native declaration : features.h</i> */
	public static final int __GNU_LIBRARY__ = (int)6;
	/** <i>native declaration : bits/byteswap.h</i> */
	public static final int _BITS_BYTESWAP_H = (int)1;
	/** <i>native declaration : asm-generic/ioctl.h</i> */
	public static final int _IOC_NRSHIFT = (int)0;
	/** <i>native declaration : asm-generic/errno.h</i> */
	public static final int EREMOTEIO = (int)121;
	/** <i>native declaration : x86_64-linux-gnu/bits/stropts.h</i> */
	public static final int I_UNLINK = (int)(('S' << 8) | 13);
	/** <i>native declaration : asm-generic/ioctl.h</i> */
	public static final int IOC_OUT = (int)(2 << (((0 + 8) + 8) + 14));
	/** <i>native declaration : x86_64-linux-gnu/bits/ioctls.h</i> */
	public static final int SIOCSIFMAP = (int)0x8971;
	/** <i>native declaration : x86_64-linux-gnu/bits/ioctls.h</i> */
	public static final int SIOCDRARP = (int)0x8960;
	/** <i>native declaration : x86_64-linux-gnu/bits/stropts.h</i> */
	public static final int MORECTL = (int)1;
	/** <i>native declaration : bits/fcntl-linux.h</i> */
	public static final int __F_SETSIG = (int)10;
	/** <i>native declaration : bits/waitflags.h</i> */
	public static final int WNOHANG = (int)1;
	/** <i>native declaration : bits/fcntl-linux.h</i> */
	public static final int FFSYNC = (int)4010000;
	/** <i>native declaration : bits/ioctl-types.h</i> */
	public static final int N_SYNC_PPP = (int)14;
	/** <i>native declaration : fcntl.h</i> */
	public static final int _FCNTL_H = (int)1;
	/** <i>native declaration : bits/signum.h</i> */
	public static final int SIGBUS = (int)7;
	/** <i>native declaration : bits/ioctl-types.h</i> */
	public static final int TIOCM_ST = (int)0x008;
	/** <i>native declaration : asm-generic/errno.h</i> */
	public static final int EADV = (int)68;
	/** <i>native declaration : bits/ioctl-types.h</i> */
	public static final int TIOCM_SR = (int)0x010;
	/** <i>native declaration : bits/environments.h</i> */
	public static final String __ILP32_OFF32_LDFLAGS = (String)"-m32";
	/** <i>native declaration : bits/posix_opt.h</i> */
	public static final int _POSIX_TRACE_INHERIT = (int)-1;
	/** <i>native declaration : x86_64-linux-gnu/sys/stat.h</i> */
	public static final int S_IXGRP = (int)(100 >> 3);
	/** <i>native declaration : asm-generic/errno-base.h</i> */
	public static final int EFBIG = (int)27;
	/** <i>native declaration : asm-generic/ioctls.h</i> */
	public static final int TCGETA = (int)0x5405;
	/** <i>native declaration : bits/signum.h</i> */
	public static final int SIGPROF = (int)27;
	/** <i>native declaration : bits/termios.h</i> */
	public static final int B1000000 = (int)010010;
	/** <i>native declaration : x86_64-linux-gnu/sys/stat.h</i> */
	public static final int S_ISVTX = (int)1000;
	/** <i>native declaration : asm-generic/errno.h</i> */
	public static final int EUCLEAN = (int)117;
	/** <i>native declaration : x86_64-linux-gnu/bits/ioctls.h</i> */
	public static final int SIOCPROTOPRIVATE = (int)0x89E0;
	/** <i>native declaration : bits/signum.h</i> */
	public static final int SIGWINCH = (int)28;
	/** <i>native declaration : asm-generic/ioctls.h</i> */
	public static final int TCGETS = (int)0x5401;
	/** <i>native declaration : bits/stat.h</i> */
	public static final int __S_IFBLK = (int)060000;
	/** <i>native declaration : libio.h</i> */
	public static final int NULL = (int)(0);
	/** <i>native declaration : asm-generic/ioctls.h</i> */
	public static final int FIOCLEX = (int)0x5451;
	/** <i>native declaration : asm-generic/ioctls.h</i> */
	public static final int TCGETX = (int)0x5432;
	/** <i>native declaration : x86_64-linux-gnu/bits/stropts.h</i> */
	public static final int I_ATMARK = (int)(('S' << 8) | 31);
	/** <i>native declaration : asm-generic/ioctls.h</i> */
	public static final int TCSBRKP = (int)0x5425;
	/** <i>native declaration : bits/fcntl-linux.h</i> */
	public static final int __F_SETOWN_EX = (int)15;
	/** <i>native declaration : libio.h</i> */
	public static final int _IOS_TRUNC = (int)16;
	/** <i>native declaration : bits/fcntl-linux.h</i> */
	public static final int O_RDONLY = (int)0;
	/** <i>native declaration : bits/posix_opt.h</i> */
	public static final int _POSIX_SHARED_MEMORY_OBJECTS = (int)200809;
	/** <i>native declaration : x86_64-linux-gnu/bits/stropts.h</i> */
	public static final int I_POP = (int)(('S' << 8) | 3);
	/** <i>native declaration : asm-generic/ioctls.h</i> */
	public static final int TIOCNOTTY = (int)0x5422;
	/** <i>native declaration : x86_64-linux-gnu/bits/stropts.h</i> */
	public static final int RPROTDIS = (int)0x0008;
	/** <i>native declaration : _G_config.h</i> */
	public static final int _G_HAVE_MREMAP = (int)1;
	/** <i>native declaration : bits/sigaction.h</i> */
	public static final int SA_NOCLDWAIT = (int)2;
	/** <i>native declaration : bits/ioctl-types.h</i> */
	public static final int N_MOUSE = (int)2;
	/** <i>native declaration : bits/stat.h</i> */
	public static final int __S_IREAD = (int)400;
	/** <i>native declaration : bits/termios.h</i> */
	public static final int FF0 = (int)000000;
	/** <i>native declaration : bits/termios.h</i> */
	public static final int FF1 = (int)100000;
	/** <i>native declaration : x86_64-linux-gnu/bits/stropts.h</i> */
	public static final int I_FDINSERT = (int)(('S' << 8) | 16);
	/** <i>native declaration : stdlib.h</i> */
	public static final int __ldiv_t_defined = (int)1;
	/** <i>native declaration : stdc-predef.h</i> */
	public static final int __STDC_ISO_10646__ = (int)201103;
	/** <i>native declaration : bits/pthreadtypes.h</i> */
	public static final int __SIZEOF_PTHREAD_CONDATTR_T = (int)4;
	/** <i>native declaration : bits/termios.h</i> */
	public static final int ONLRET = (int)000040;
	/** <i>native declaration : signal.h</i> */
	public static final int SV_INTERRUPT = (int)(1 << 1);
	/** <i>native declaration : sys/ttydefaults.h</i> */
	public static final int CERASE = (int)177;
	/** <i>native declaration : bits/sigaction.h</i> */
	public static final int SA_STACK = (int)0x08000000;
	/** <i>native declaration : x86_64-linux-gnu/bits/ioctls.h</i> */
	public static final int SIOGIFINDEX = (int)0x8933;
	/** <i>native declaration : asm-generic/ioctl.h</i> */
	public static final int _IOC_SIZEMASK = (int)((1 << 14) - 1);
	/** <i>native declaration : bits/siginfo.h</i> */
	public static final int __have_sigval_t = (int)1;
	/** <i>native declaration : asm-generic/ioctls.h</i> */
	public static final int TIOCCBRK = (int)0x5428;
	/** <i>native declaration : bits/ioctl-types.h</i> */
	public static final int NCC = (int)8;
	/** <i>native declaration : bits/fcntl-linux.h</i> */
	public static final int F_GETOWN = (int)9;
	/** <i>native declaration : bits/posix_opt.h</i> */
	public static final int _POSIX_CLOCK_SELECTION = (int)200809;
	/** <i>native declaration : bits/termios.h</i> */
	public static final int B921600 = (int)010007;
	/** <i>native declaration : bits/posix_opt.h</i> */
	public static final int _POSIX_IPV6 = (int)200809;
	/** <i>native declaration : asm-generic/errno-base.h</i> */
	public static final int ENOTTY = (int)25;
	/** <i>native declaration : unistd.h</i> */
	public static final int _POSIX2_C_DEV = (int)200809;
	/** <i>native declaration : bits/siginfo.h</i> */
	public static final int __have_sigevent_t = (int)1;
	/** <i>native declaration : asm-generic/errno.h</i> */
	public static final int EISNAM = (int)120;
	/** <i>native declaration : bits/termios.h</i> */
	public static final int VWERASE = (int)14;
	/** <i>native declaration : x86_64-linux-gnu/bits/ioctls.h</i> */
	public static final int SIOCGIFTXQLEN = (int)0x8942;
	/** <i>native declaration : asm-generic/ioctls.h</i> */
	public static final int TCFLSH = (int)0x540B;
	/** <i>native declaration : bits/termios.h</i> */
	public static final int CREAD = (int)000200;
	/** <i>native declaration : bits/types.h</i> */
	public static final int _BITS_TYPES_H = (int)1;
	/** <i>native declaration : asm-generic/errno-base.h</i> */
	public static final int EXDEV = (int)18;
	/** <i>native declaration : bits/posix_opt.h</i> */
	public static final char _POSIX_VDISABLE = (char)'\0';
	/** <i>native declaration : x86_64-linux-gnu/bits/ioctls.h</i> */
	public static final int SIOCSIFMETRIC = (int)0x891e;
	/** <i>native declaration : asm-generic/errno.h</i> */
	public static final int ELIBEXEC = (int)83;
	/** <i>native declaration : bits/typesizes.h</i> */
	public static final int __FD_SETSIZE = (int)1024;
	/** <i>native declaration : sys/ucontext.h</i> */
	public static final int NGREG = (int)23;
	/** <i>native declaration : asm-generic/ioctls.h</i> */
	public static final int TIOCGWINSZ = (int)0x5413;
	/** <i>native declaration : bits/fcntl-linux.h</i> */
	public static final int F_WRLCK = (int)1;
	/** <i>native declaration : asm-generic/ioctls.h</i> */
	public static final int TIOCSER_TEMT = (int)0x01;
	/** <i>native declaration : features.h</i> */
	public static final int _POSIX_C_SOURCE = (int)200809;
	/** <i>native declaration : bits/termios.h</i> */
	public static final int IUTF8 = (int)040000;
	/** <i>native declaration : bits/ioctl-types.h</i> */
	public static final int TIOCM_LE = (int)0x001;
	/** <i>native declaration : x86_64-linux-gnu/bits/stropts.h</i> */
	public static final int RS_HIPRI = (int)0x01;
	/** <i>native declaration : asm-generic/errno.h</i> */
	public static final int EBADFD = (int)77;
	/** <i>native declaration : bits/termios.h</i> */
	public static final int ONLCR = (int)000004;
	/** <i>native declaration : bits/termios.h</i> */
	public static final int B2500000 = (int)010014;
	/** <i>native declaration : bits/posix_opt.h</i> */
	public static final int _LFS_ASYNCHRONOUS_IO = (int)1;
	/** <i>native declaration : bits/waitflags.h</i> */
	public static final int __WALL = (int)0x40000000;
	/** <i>native declaration : libio.h</i> */
	public static final int EOF = (int)(-1);
	/** <i>native declaration : bits/fcntl-linux.h</i> */
	public static final int AT_REMOVEDIR = (int)0x200;
	/** <i>native declaration : bits/termios.h</i> */
	public static final int B4000000 = (int)010017;
	/** <i>native declaration : asm-generic/ioctl.h</i> */
	public static final int _IOC_TYPEMASK = (int)((1 << 8) - 1);
	/** <i>native declaration : asm-generic/ioctls.h</i> */
	public static final int TIOCOUTQ = (int)0x5411;
	/** <i>native declaration : stdlib.h</i> */
	public static final int EXIT_FAILURE = (int)1;
	/** <i>native declaration : bits/termios.h</i> */
	public static final int ICRNL = (int)000400;
	/** <i>native declaration : sys/ttydefaults.h</i> */
	public static final char CSTATUS = (char)'\0';
	/** <i>native declaration : bits/termios.h</i> */
	public static final int B2000000 = (int)010013;
	/** <i>native declaration : x86_64-linux-gnu/bits/stropts.h</i> */
	public static final int S_WRNORM = (int)0x0004;
	/** <i>native declaration : unistd.h</i> */
	public static final int _POSIX2_C_BIND = (int)200809;
	/** <i>native declaration : x86_64-linux-gnu/bits/stropts.h</i> */
	public static final int FLUSHRW = (int)0x03;
	/** <i>native declaration : asm-generic/ioctls.h</i> */
	public static final int TIOCSERSETMULTI = (int)0x545B;
	/** <i>native declaration : bits/termios.h</i> */
	public static final int INLCR = (int)000100;
	/** <i>native declaration : bits/fcntl-linux.h</i> */
	public static final int FNONBLOCK = (int)4000;
	/** <i>native declaration : sys/ucontext.h</i> */
	public static final int _SYS_UCONTEXT_H = (int)1;
	/** <i>native declaration : asm-generic/errno.h</i> */
	public static final int ENOSYS = (int)38;
	/** <i>native declaration : bits/termios.h</i> */
	public static final int PARENB = (int)000400;
	/** <i>native declaration : bits/posix_opt.h</i> */
	public static final int _POSIX_FSYNC = (int)200809;
	/** <i>native declaration : x86_64-linux-gnu/bits/ioctls.h</i> */
	public static final int SIOCSIFNAME = (int)0x8923;
	/** <i>native declaration : endian.h</i> */
	public static final int __BIG_ENDIAN = (int)4321;
	/** <i>native declaration : bits/signum.h</i> */
	public static final int SIGTSTP = (int)20;
	/** <i>native declaration : bits/termios.h</i> */
	public static final int NL0 = (int)000000;
	/** <i>native declaration : bits/termios.h</i> */
	public static final int NL1 = (int)000400;
	/** <i>native declaration : sys/ttydefaults.h</i> */
	public static final char CBRK = (char)'\0';
	/** <i>native declaration : features.h</i> */
	public static final int __USE_POSIX199506 = (int)1;
	/** <i>native declaration : asm-generic/errno.h</i> */
	public static final int EXFULL = (int)54;
	/** <i>native declaration : bits/termios.h</i> */
	public static final int IMAXBEL = (int)020000;
	/** <i>native declaration : unistd.h</i> */
	public static final int _POSIX_VERSION = (int)200809;
	/** <i>native declaration : asm-generic/errno.h</i> */
	public static final int ELIBMAX = (int)82;
	/** <i>native declaration : x86_64-linux-gnu/bits/stropts.h</i> */
	public static final int S_BANDURG = (int)0x0200;
	/** <i>native declaration : sys/ttydefaults.h</i> */
	public static final int CSTART = (int)('q' & 37);
	/** <i>native declaration : bits/ioctl-types.h</i> */
	public static final int TIOCM_RI = (int)0x080;
	/** <i>native declaration : bits/stat.h</i> */
	public static final int __S_IFCHR = (int)020000;
	/** <i>native declaration : asm-generic/ioctls.h</i> */
	public static final int TIOCGICOUNT = (int)0x545D;
	/** <i>native declaration : bits/termios.h</i> */
	public static final int OCRNL = (int)000010;
	/** <i>native declaration : bits/posix_opt.h</i> */
	public static final int _POSIX_SPORADIC_SERVER = (int)-1;
	/** <i>native declaration : asm-generic/ioctl.h</i> */
	public static final int _IOC_NRBITS = (int)8;
	/** <i>native declaration : libio.h</i> */
	public static final int _OLD_STDIO_MAGIC = (int)0xFABC0000;
	/** <i>native declaration : asm-generic/errno-base.h</i> */
	public static final int EIO = (int)5;
	/** <i>native declaration : x86_64-linux-gnu/bits/ioctls.h</i> */
	public static final int SIOCSIFSLAVE = (int)0x8930;
	/** <i>native declaration : bits/posix_opt.h</i> */
	public static final int _POSIX_THREADS = (int)200809;
	/** <i>native declaration : bits/fcntl-linux.h</i> */
	public static final int POSIX_FADV_RANDOM = (int)1;
	/** <i>native declaration : asm-generic/errno.h</i> */
	public static final int EBADMSG = (int)74;
	/** <i>native declaration : bits/termios.h</i> */
	public static final int VKILL = (int)3;
	/** <i>native declaration : x86_64-linux-gnu/bits/stropts.h</i> */
	public static final int S_HANGUP = (int)0x0020;
	/** <i>native declaration : stdio.h</i> */
	public static final int _STDIO_H = (int)1;
	/** <i>native declaration : bits/signum.h</i> */
	public static final int SIGURG = (int)23;
	/** <i>native declaration : asm-generic/ioctls.h</i> */
	public static final int TIOCSERGSTRUCT = (int)0x5458;
	/** <i>native declaration : bits/posix_opt.h</i> */
	public static final int _POSIX_MAPPED_FILES = (int)200809;
	/** <i>native declaration : bits/fcntl-linux.h</i> */
	public static final int O_CREAT = (int)100;
	/** <i>native declaration : x86_64-linux-gnu/bits/stropts.h</i> */
	public static final int I_GRDOPT = (int)(('S' << 8) | 7);
	/** <i>native declaration : asm-generic/ioctls.h</i> */
	public static final int TIOCPKT = (int)0x5420;
	/** <i>native declaration : bits/termios.h</i> */
	public static final int VDISCARD = (int)13;
	/** <i>native declaration : bits/posix_opt.h</i> */
	public static final int _POSIX_THREAD_CPUTIME = (int)0;
	/** <i>native declaration : bits/termios.h</i> */
	public static final int B4800 = (int)000014;
	/** <i>native declaration : libio.h</i> */
	public static final int _IO_HEX = (int)100;
	/** <i>native declaration : bits/ioctl-types.h</i> */
	public static final int N_X25 = (int)6;
	/** <i>native declaration : asm-generic/ioctls.h</i> */
	public static final int TIOCSERSWILD = (int)0x5455;
	/** <i>native declaration : asm-generic/errno.h</i> */
	public static final int ENOSR = (int)63;
	/** <i>native declaration : bits/termios.h</i> */
	public static final int CRTSCTS = (int)-2147483648;
	/** <i>native declaration : bits/ioctl-types.h</i> */
	public static final int TIOCM_CD = (int)0x040;
	/** <i>native declaration : bits/posix_opt.h</i> */
	public static final int _POSIX_BARRIERS = (int)200809;
	/** <i>native declaration : bits/termios.h</i> */
	public static final int BRKINT = (int)000002;
	/** <i>native declaration : asm-generic/errno-base.h</i> */
	public static final int EINTR = (int)4;
	/** <i>native declaration : bits/termios.h</i> */
	public static final int VTIME = (int)5;
	/** <i>native declaration : bits/sigset.h</i> */
	public static final int _SIGSET_H_types = (int)1;
	/** <i>native declaration : x86_64-linux-gnu/bits/stropts.h</i> */
	public static final int S_ERROR = (int)0x0010;
	/** <i>native declaration : x86_64-linux-gnu/bits/ioctls.h</i> */
	public static final int SIOCSIFMEM = (int)0x8920;
	/** <i>native declaration : x86_64-linux-gnu/bits/stropts.h</i> */
	public static final int RPROTNORM = (int)0x0010;
	/** <i>native declaration : bits/termios.h</i> */
	public static final int ECHOPRT = (int)002000;
	/** <i>native declaration : x86_64-linux-gnu/bits/stropts.h</i> */
	public static final int I_FLUSHBAND = (int)(('S' << 8) | 28);
	/** <i>native declaration : x86_64-linux-gnu/sys/stat.h</i> */
	public static final int S_IRUSR = (int)400;
	/** <i>native declaration : bits/stat.h</i> */
	public static final int __S_ISUID = (int)4000;
	/** <i>native declaration : libio.h</i> */
	public static final int _IO_EOF_SEEN = (int)0x10;
	/** <i>native declaration : bits/posix_opt.h</i> */
	public static final int _POSIX_THREAD_PRIORITY_SCHEDULING = (int)200809;
	/** <i>native declaration : bits/posix_opt.h</i> */
	public static final int _POSIX_TRACE = (int)-1;
	/** <i>native declaration : libio.h</i> */
	public static final int _IO_LINE_BUF = (int)0x200;
	/** <i>native declaration : asm-generic/errno-base.h</i> */
	public static final int EMFILE = (int)24;
	/** <i>native declaration : bits/fcntl-linux.h</i> */
	public static final int __O_DSYNC = (int)10000;
	/** <i>native declaration : bits/signum.h</i> */
	public static final int SIGCLD = (int)17;
	/** <i>native declaration : sys/cdefs.h</i> */
	public static final int _SYS_CDEFS_H = (int)1;
	/** <i>native declaration : stdio.h</i> */
	public static final int _IONBF = (int)2;
	/** <i>native declaration : bits/fcntl-linux.h</i> */
	public static final int F_SETOWN = (int)8;
	/** <i>native declaration : asm-generic/ioctls.h</i> */
	public static final int TIOCSERCONFIG = (int)0x5453;
	/** <i>native declaration : bits/posix_opt.h</i> */
	public static final int _POSIX_THREAD_ROBUST_PRIO_PROTECT = (int)-1;
	/** <i>native declaration : asm-generic/ioctl.h</i> */
	public static final int _IOC_TYPESHIFT = (int)(0 + 8);
	/** <i>native declaration : bits/fcntl-linux.h</i> */
	public static final int POSIX_FADV_NORMAL = (int)0;
	/** <i>native declaration : asm-generic/errno.h</i> */
	public static final int ENOBUFS = (int)105;
	/** <i>native declaration : bits/environments.h</i> */
	public static final int _POSIX_V7_LP64_OFF64 = (int)1;
	/** <i>native declaration : libio.h</i> */
	public static final int _IO_SHOWPOS = (int)2000;
	/** <i>native declaration : asm-generic/errno.h</i> */
	public static final int EL3RST = (int)47;
	/** <i>native declaration : asm-generic/errno.h</i> */
	public static final int EILSEQ = (int)84;
	/** <i>native declaration : bits/waitflags.h</i> */
	public static final int WCONTINUED = (int)8;
	/** <i>native declaration : x86_64-linux-gnu/bits/ioctls.h</i> */
	public static final int SIOCSIFBRDADDR = (int)0x891a;
	/** <i>native declaration : x86_64-linux-gnu/bits/ioctls.h</i> */
	public static final int SIOCGIFBRDADDR = (int)0x8919;
	/** <i>native declaration : asm-generic/ioctls.h</i> */
	public static final int TIOCGRS485 = (int)0x542E;
	/** <i>native declaration : x86_64-linux-gnu/bits/ioctls.h</i> */
	public static final int SIOCSIFNETMASK = (int)0x891c;
	/** <i>native declaration : unistd.h</i> */
	public static final int L_XTND = (int)2;
	/** <i>native declaration : x86_64-linux-gnu/sys/stat.h</i> */
	public static final int _MKNOD_VER = (int)0;
	/** <i>native declaration : bits/termios.h</i> */
	public static final int IGNCR = (int)000200;
	/** <i>native declaration : bits/termios.h</i> */
	public static final int ISIG = (int)000001;
	/** <i>native declaration : bits/ioctl-types.h</i> */
	public static final int TIOCM_CTS = (int)0x020;
	/** <i>native declaration : libio.h</i> */
	public static final int _IO_IS_APPENDING = (int)0x1000;
	/** <i>native declaration : stdio.h</i> */
	public static final int _IOFBF = (int)0;
	/** <i>native declaration : bits/termios.h</i> */
	public static final int TCOFLUSH = (int)1;
	/** <i>native declaration : asm-generic/errno.h</i> */
	public static final int ENOLCK = (int)37;
	/** <i>native declaration : signal.h:371</i> */
	public interface __sighandler_t extends Callback {
		void apply(int int1);
	};
	/** <i>native declaration : stdlib.h:1303</i> */
	public interface __compar_fn_t extends Callback {
		int apply(Pointer voidPtr1, Pointer voidPtr2);
	};
	/** <i>native declaration : stdlib.h:1429</i> */
	public interface atexit___func_callback extends Callback {
		void apply();
	};
	/** <i>native declaration : stdlib.h:1430</i> */
	public interface on_exit___func_callback extends Callback {
		void apply(int __status, Pointer __arg);
	};
	/**
	 * Read NBYTES bytes from COOKIE into a buffer pointed to by BUF.<br>
	 * Return number of bytes read.<br>
	 * <i>native declaration : libio.h:1517</i>
	 */
	public interface __io_read_fn extends Callback {
		NativeLong apply(Pointer __cookie, Pointer __buf, NativeLong __nbytes);
	};
	/**
	 * Write N bytes pointed to by BUF to COOKIE.  Write all N bytes<br>
	 * unless there is an error.  Return number of bytes written.  If<br>
	 * there is an error, return 0 and do not write anything.  If the file<br>
	 * has been opened for append (__mode.__append set), then set the file<br>
	 * pointer to the end of the file and then do the write; if not, just<br>
	 * write at the current file pointer.<br>
	 * <i>native declaration : libio.h:1526</i>
	 */
	public interface __io_write_fn extends Callback {
		NativeLong apply(Pointer __cookie, Pointer __buf, NativeLong __n);
	};
	/**
	 * Move COOKIE's file position to *POS bytes from the<br>
	 * beginning of the file (if W is SEEK_SET),<br>
	 * the current position (if W is SEEK_CUR),<br>
	 * or the end of the file (if W is SEEK_END).<br>
	 * Set *POS to the new file position.<br>
	 * Returns zero if successful, nonzero if not.<br>
	 * <i>native declaration : libio.h:1535</i>
	 */
	public interface __io_seek_fn extends Callback {
		int apply(Pointer __cookie, NativeLongByReference __pos, int __w);
	};
	/**
	 * Close COOKIE.<br>
	 * <i>native declaration : libio.h:1537</i>
	 */
	public interface __io_close_fn extends Callback {
		int apply(Pointer __cookie);
	};
	/**
	 * Function to get address of global `errno' variable.<br>
	 * Original signature : <code>int* __errno_location()</code><br>
	 * <i>native declaration : bits/errno.h:117</i>
	 */
	IntByReference __errno_location();
	/**
	 * Do the file control operation described by CMD on FD.<br>
	 * The remaining arguments are interpreted depending on CMD.<br>
	 * This function is a cancellation point and therefore not marked with<br>
	 * __THROW.<br>
	 * Original signature : <code>int fcntl(int, int, null)</code><br>
	 * <i>native declaration : fcntl.h:173</i>
	 */
	int fcntl(int __fd, int __cmd, Object... varargs);
	/**
	 * Original signature : <code>int open(const char*, int, null)</code><br>
	 * <i>native declaration : fcntl.h:175</i><br>
	 * @deprecated use the safer methods {@link #open(java.lang.String, int, java.lang.Object)} and {@link #open(com.sun.jna.Pointer, int, java.lang.Object)} instead
	 */
	@Deprecated 
	int open(Pointer __file, int __oflag, Object... varargs);
	/**
	 * Original signature : <code>int open(const char*, int, null)</code><br>
	 * <i>native declaration : fcntl.h:175</i>
	 */
	int open(String __file, int __oflag, Object... varargs);
	/**
	 * Original signature : <code>int openat(int, const char*, int, null)</code><br>
	 * <i>native declaration : fcntl.h:177</i><br>
	 * @deprecated use the safer methods {@link #openat(int, java.lang.String, int, java.lang.Object)} and {@link #openat(int, com.sun.jna.Pointer, int, java.lang.Object)} instead
	 */
	@Deprecated 
	int openat(int __fd, Pointer __file, int __oflag, Object... varargs);
	/**
	 * Original signature : <code>int openat(int, const char*, int, null)</code><br>
	 * <i>native declaration : fcntl.h:177</i>
	 */
	int openat(int __fd, String __file, int __oflag, Object... varargs);
	/**
	 * Original signature : <code>int creat(const char*, mode_t)</code><br>
	 * <i>native declaration : fcntl.h:179</i><br>
	 * @deprecated use the safer methods {@link #creat(java.lang.String, int)} and {@link #creat(com.sun.jna.Pointer, int)} instead
	 */
	@Deprecated 
	int creat(Pointer __file, int __mode);
	/**
	 * Original signature : <code>int creat(const char*, mode_t)</code><br>
	 * <i>native declaration : fcntl.h:179</i>
	 */
	int creat(String __file, int __mode);
	/**
	 * Original signature : <code>int lockf(int, int, off_t)</code><br>
	 * <i>native declaration : fcntl.h:181</i>
	 */
	int lockf(int __fd, int __cmd, NativeLong __len);
	/**
	 * Original signature : <code>int posix_fadvise(int, off_t, off_t, int)</code><br>
	 * <i>native declaration : fcntl.h:183</i>
	 */
	int posix_fadvise(int __fd, NativeLong __offset, NativeLong __len, int __advise);
	/**
	 * Original signature : <code>int posix_fallocate(int, off_t, off_t)</code><br>
	 * <i>native declaration : fcntl.h:185</i>
	 */
	int posix_fallocate(int __fd, NativeLong __offset, NativeLong __len);
	/**
	 * Original signature : <code>int __sigismember(const __sigset_t*, int)</code><br>
	 * <i>native declaration : bits/sigset.h:200</i>
	 */
	int __sigismember(__sigset_t __sigset_tPtr1, int int1);
	/**
	 * Original signature : <code>int __sigaddset(__sigset_t*, int)</code><br>
	 * <i>native declaration : bits/sigset.h:202</i>
	 */
	int __sigaddset(__sigset_t __sigset_tPtr1, int int1);
	/**
	 * Original signature : <code>int __sigdelset(__sigset_t*, int)</code><br>
	 * <i>native declaration : bits/sigset.h:204</i>
	 */
	int __sigdelset(__sigset_t __sigset_tPtr1, int int1);
	/**
	 * The X/Open definition of `signal' specifies the SVID semantic.  Use<br>
	 * the additional function `sysv_signal' when X/Open compatibility is<br>
	 * requested.<br>
	 * Original signature : <code>__sighandler_t __sysv_signal(int, __sighandler_t)</code><br>
	 * <i>native declaration : signal.h:378</i>
	 */
	CLibrary.__sighandler_t __sysv_signal(int __sig, CLibrary.__sighandler_t __handler);
	/**
	 * Original signature : <code>__sighandler_t signal(int, __sighandler_t)</code><br>
	 * <i>native declaration : signal.h:380</i>
	 */
	CLibrary.__sighandler_t signal(int __sig, CLibrary.__sighandler_t __handler);
	/**
	 * Original signature : <code>int kill(__pid_t, int)</code><br>
	 * <i>native declaration : signal.h:382</i>
	 */
	int kill(int __pid, int __sig);
	/**
	 * Send SIG to all processes in process group PGRP.<br>
	 * If PGRP is zero, send SIG to all processes in<br>
	 * the current process's process group.<br>
	 * Original signature : <code>int killpg(__pid_t, int)</code><br>
	 * <i>native declaration : signal.h:389</i>
	 */
	int killpg(int __pgrp, int __sig);
	/**
	 * Raise signal SIG, i.e., send SIG to yourself.<br>
	 * Original signature : <code>int raise(int)</code><br>
	 * <i>native declaration : signal.h:394</i>
	 */
	int raise(int __sig);
	/**
	 * SVID names for the same things.<br>
	 * Original signature : <code>__sighandler_t ssignal(int, __sighandler_t)</code><br>
	 * <i>native declaration : signal.h:399</i>
	 */
	CLibrary.__sighandler_t ssignal(int __sig, CLibrary.__sighandler_t __handler);
	/**
	 * Original signature : <code>int gsignal(int)</code><br>
	 * <i>native declaration : signal.h:401</i>
	 */
	int gsignal(int __sig);
	/**
	 * Print a message describing the meaning of the given signal number.<br>
	 * Original signature : <code>void psignal(int, const char*)</code><br>
	 * <i>native declaration : signal.h:406</i><br>
	 * @deprecated use the safer methods {@link #psignal(int, java.lang.String)} and {@link #psignal(int, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	void psignal(int __sig, Pointer __s);
	/**
	 * Print a message describing the meaning of the given signal number.<br>
	 * Original signature : <code>void psignal(int, const char*)</code><br>
	 * <i>native declaration : signal.h:406</i>
	 */
	void psignal(int __sig, String __s);
	/**
	 * Print a message describing the meaning of the given signal information.<br>
	 * Original signature : <code>void psiginfo(const siginfo_t*, const char*)</code><br>
	 * <i>native declaration : signal.h:411</i><br>
	 * @deprecated use the safer methods {@link #psiginfo(c.siginfo_t, java.lang.String)} and {@link #psiginfo(c.siginfo_t, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	void psiginfo(siginfo_t __pinfo, Pointer __s);
	/**
	 * Print a message describing the meaning of the given signal information.<br>
	 * Original signature : <code>void psiginfo(const siginfo_t*, const char*)</code><br>
	 * <i>native declaration : signal.h:411</i>
	 */
	void psiginfo(siginfo_t __pinfo, String __s);
	/**
	 * The `sigpause' function has two different interfaces.  The original<br>
	 * BSD definition defines the argument as a mask of the signal, while<br>
	 * the more modern interface in X/Open defines it as the signal<br>
	 * number.  We go with the BSD version unless the user explicitly<br>
	 * selects the X/Open version.<br>
	 * This function is a cancellation point and therefore not marked with<br>
	 * __THROW.<br>
	 * Original signature : <code>int __sigpause(int, int)</code><br>
	 * <i>native declaration : signal.h:422</i>
	 */
	int __sigpause(int __sig_or_mask, int __is_sig);
	/**
	 * Block signals in MASK, returning the old mask.<br>
	 * Original signature : <code>int sigblock(int)</code><br>
	 * <i>native declaration : signal.h:427</i>
	 */
	int sigblock(int __mask);
	/**
	 * Set the mask of blocked signals to MASK, returning the old mask.<br>
	 * Original signature : <code>int sigsetmask(int)</code><br>
	 * <i>native declaration : signal.h:432</i>
	 */
	int sigsetmask(int __mask);
	/**
	 * Return currently selected signal mask.<br>
	 * Original signature : <code>int siggetmask()</code><br>
	 * <i>native declaration : signal.h:437</i>
	 */
	int siggetmask();
	/**
	 * Clear all signals from SET.<br>
	 * Original signature : <code>int sigemptyset(sigset_t*)</code><br>
	 * <i>native declaration : signal.h:443</i>
	 */
	int sigemptyset(__sigset_t __set);
	/**
	 * Set all signals in SET.<br>
	 * Original signature : <code>int sigfillset(sigset_t*)</code><br>
	 * <i>native declaration : signal.h:448</i>
	 */
	int sigfillset(__sigset_t __set);
	/**
	 * Add SIGNO to SET.<br>
	 * Original signature : <code>int sigaddset(sigset_t*, int)</code><br>
	 * <i>native declaration : signal.h:453</i>
	 */
	int sigaddset(__sigset_t __set, int __signo);
	/**
	 * Remove SIGNO from SET.<br>
	 * Original signature : <code>int sigdelset(sigset_t*, int)</code><br>
	 * <i>native declaration : signal.h:458</i>
	 */
	int sigdelset(__sigset_t __set, int __signo);
	/**
	 * Return 1 if SIGNO is in SET, 0 if not.<br>
	 * Original signature : <code>int sigismember(const sigset_t*, int)</code><br>
	 * <i>native declaration : signal.h:463</i>
	 */
	int sigismember(__sigset_t __set, int __signo);
	/**
	 * Get and/or change the set of blocked signals.<br>
	 * Original signature : <code>int sigprocmask(int, const sigset_t*, sigset_t*)</code><br>
	 * <i>native declaration : signal.h:486</i>
	 */
	int sigprocmask(int __how, __sigset_t __set, __sigset_t __oset);
	/**
	 * Change the set of blocked signals to SET,<br>
	 * wait until a signal arrives, and restore the set of blocked signals.<br>
	 * This function is a cancellation point and therefore not marked with<br>
	 * __THROW.<br>
	 * Original signature : <code>int sigsuspend(const sigset_t*)</code><br>
	 * <i>native declaration : signal.h:494</i>
	 */
	int sigsuspend(__sigset_t __set);
	/**
	 * Get and/or set the action for signal SIG.<br>
	 * Original signature : <code>int sigaction(int, sigaction*, sigaction*)</code><br>
	 * <i>native declaration : signal.h:499</i>
	 */
	int sigaction(int __sig, sigaction __act, sigaction __oact);
	/**
	 * Put in SET all signals that are blocked and waiting to be delivered.<br>
	 * Original signature : <code>int sigpending(sigset_t*)</code><br>
	 * <i>native declaration : signal.h:504</i>
	 */
	int sigpending(__sigset_t __set);
	/**
	 * Select any of pending signals from SET or wait for any to arrive.<br>
	 * This function is a cancellation point and therefore not marked with<br>
	 * __THROW.<br>
	 * Original signature : <code>int sigwait(const sigset_t*, int*)</code><br>
	 * <i>native declaration : signal.h:511</i><br>
	 * @deprecated use the safer methods {@link #sigwait(c.__sigset_t, java.nio.IntBuffer)} and {@link #sigwait(c.__sigset_t, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	int sigwait(__sigset_t __set, IntByReference __sig);
	/**
	 * Select any of pending signals from SET or wait for any to arrive.<br>
	 * This function is a cancellation point and therefore not marked with<br>
	 * __THROW.<br>
	 * Original signature : <code>int sigwait(const sigset_t*, int*)</code><br>
	 * <i>native declaration : signal.h:511</i>
	 */
	int sigwait(__sigset_t __set, IntBuffer __sig);
	/**
	 * Select any of pending signals from SET and place information in INFO.<br>
	 * This function is a cancellation point and therefore not marked with<br>
	 * __THROW.<br>
	 * Original signature : <code>int sigwaitinfo(const sigset_t*, siginfo_t*)</code><br>
	 * <i>native declaration : signal.h:518</i>
	 */
	int sigwaitinfo(__sigset_t __set, siginfo_t __info);
	/**
	 * Select any of pending signals from SET and place information in INFO.<br>
	 * Wait the time specified by TIMEOUT if no signal is pending.<br>
	 * This function is a cancellation point and therefore not marked with<br>
	 * __THROW.<br>
	 * Original signature : <code>int sigtimedwait(const sigset_t*, siginfo_t*, timespec*)</code><br>
	 * <i>native declaration : signal.h:526</i>
	 */
	int sigtimedwait(__sigset_t __set, siginfo_t __info, timespec __timeout);
	/**
	 * Send signal SIG to the process PID.  Associate data in VAL with the<br>
	 * signal.<br>
	 * Original signature : <code>int sigqueue(__pid_t, int, sigval)</code><br>
	 * <i>native declaration : signal.h:532</i>
	 */
	int sigqueue(int __pid, int __sig, c.sigval.ByValue __val);
	/**
	 * If VEC is non-NULL, set the handler for SIG to the `sv_handler' member<br>
	 * of VEC.  The signals in `sv_mask' will be blocked while the handler runs.<br>
	 * If the SV_RESETHAND bit is set in `sv_flags', the handler for SIG will be<br>
	 * reset to SIG_DFL before `sv_handler' is entered.  If OVEC is non-NULL,<br>
	 * it is filled in with the old information for SIG.<br>
	 * Original signature : <code>int sigvec(int, sigvec*, sigvec*)</code><br>
	 * <i>native declaration : signal.h:553</i>
	 */
	int sigvec(int __sig, sigvec __vec, sigvec __ovec);
	/**
	 * Restore the state saved in SCP.<br>
	 * Original signature : <code>int sigreturn(sigcontext*)</code><br>
	 * <i>native declaration : signal.h:638</i>
	 */
	int sigreturn(sigcontext __scp);
	/**
	 * If INTERRUPT is nonzero, make signal SIG interrupt system calls<br>
	 * (causing them to fail with EINTR); if INTERRUPT is zero, make system<br>
	 * calls be restarted after signal SIG.<br>
	 * Original signature : <code>int siginterrupt(int, int)</code><br>
	 * <i>native declaration : signal.h:646</i>
	 */
	int siginterrupt(int __sig, int __interrupt);
	/**
	 * Run signals handlers on the stack specified by SS (if not NULL).<br>
	 * If OSS is not NULL, it is filled in with the old signal stack status.<br>
	 * This interface is obsolete and on many platform not implemented.<br>
	 * Original signature : <code>int sigstack(sigstack*, sigstack*)</code><br>
	 * <i>native declaration : signal.h:713</i>
	 */
	int sigstack(sigstack __ss, sigstack __oss);
	/**
	 * Alternate signal handler stack interface.<br>
	 * This interface should always be preferred over `sigstack'.<br>
	 * Original signature : <code>int sigaltstack(sigaltstack*, sigaltstack*)</code><br>
	 * <i>native declaration : signal.h:719</i>
	 */
	int sigaltstack(sigaltstack __ss, sigaltstack __oss);
	/**
	 * Modify the signal mask for the calling thread.  The arguments have<br>
	 * the same meaning as for sigprocmask(2).<br>
	 * Original signature : <code>int pthread_sigmask(int, const __sigset_t*, __sigset_t*)</code><br>
	 * <i>native declaration : bits/sigthread.h:835</i>
	 */
	int pthread_sigmask(int __how, __sigset_t __newmask, __sigset_t __oldmask);
	/**
	 * Send signal SIGNO to the given thread.<br>
	 * Original signature : <code>int pthread_kill(pthread_t, int)</code><br>
	 * <i>native declaration : bits/sigthread.h:840</i>
	 */
	int pthread_kill(NativeLong __threadid, int __signo);
	/**
	 * Return number of available real-time signal with highest priority.<br>
	 * Original signature : <code>int __libc_current_sigrtmin()</code><br>
	 * <i>native declaration : signal.h:845</i>
	 */
	int __libc_current_sigrtmin();
	/**
	 * Return number of available real-time signal with lowest priority.<br>
	 * Original signature : <code>int __libc_current_sigrtmax()</code><br>
	 * <i>native declaration : signal.h:850</i>
	 */
	int __libc_current_sigrtmax();
	/**
	 * Original signature : <code>size_t __ctype_get_mb_cur_max()</code><br>
	 * <i>native declaration : stdlib.h:888</i>
	 */
	NativeLong __ctype_get_mb_cur_max();
	/**
	 * Convert a string to a floating-point number.<br>
	 * Original signature : <code>double atof(const char*)</code><br>
	 * <i>native declaration : stdlib.h:893</i><br>
	 * @deprecated use the safer methods {@link #atof(java.lang.String)} and {@link #atof(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	double atof(Pointer __nptr);
	/**
	 * Convert a string to a floating-point number.<br>
	 * Original signature : <code>double atof(const char*)</code><br>
	 * <i>native declaration : stdlib.h:893</i>
	 */
	double atof(String __nptr);
	/**
	 * Convert a string to an integer.<br>
	 * Original signature : <code>int atoi(const char*)</code><br>
	 * <i>native declaration : stdlib.h:898</i><br>
	 * @deprecated use the safer methods {@link #atoi(java.lang.String)} and {@link #atoi(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int atoi(Pointer __nptr);
	/**
	 * Convert a string to an integer.<br>
	 * Original signature : <code>int atoi(const char*)</code><br>
	 * <i>native declaration : stdlib.h:898</i>
	 */
	int atoi(String __nptr);
	/**
	 * Convert a string to a long integer.<br>
	 * Original signature : <code>long atol(const char*)</code><br>
	 * <i>native declaration : stdlib.h:903</i><br>
	 * @deprecated use the safer methods {@link #atol(java.lang.String)} and {@link #atol(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	NativeLong atol(Pointer __nptr);
	/**
	 * Convert a string to a long integer.<br>
	 * Original signature : <code>long atol(const char*)</code><br>
	 * <i>native declaration : stdlib.h:903</i>
	 */
	NativeLong atol(String __nptr);
	/**
	 * Convert a string to a long long integer.<br>
	 * Original signature : <code>long long atoll(const char*)</code><br>
	 * <i>native declaration : stdlib.h:908</i><br>
	 * @deprecated use the safer methods {@link #atoll(java.lang.String)} and {@link #atoll(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	NativeLong atoll(Pointer __nptr);
	/**
	 * Convert a string to a long long integer.<br>
	 * Original signature : <code>long long atoll(const char*)</code><br>
	 * <i>native declaration : stdlib.h:908</i>
	 */
	NativeLong atoll(String __nptr);
	/**
	 * Convert a string to a floating-point number.<br>
	 * Original signature : <code>double strtod(const char*, char**)</code><br>
	 * <i>native declaration : stdlib.h:913</i><br>
	 * @deprecated use the safer methods {@link #strtod(java.lang.String, com.sun.jna.ptr.PointerByReference)} and {@link #strtod(com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	double strtod(Pointer __nptr, PointerByReference __endptr);
	/**
	 * Convert a string to a floating-point number.<br>
	 * Original signature : <code>double strtod(const char*, char**)</code><br>
	 * <i>native declaration : stdlib.h:913</i>
	 */
	double strtod(String __nptr, PointerByReference __endptr);
	/**
	 * Likewise for `float' and `long double' sizes of floating-point numbers.<br>
	 * Original signature : <code>float strtof(const char*, char**)</code><br>
	 * <i>native declaration : stdlib.h:918</i><br>
	 * @deprecated use the safer methods {@link #strtof(java.lang.String, com.sun.jna.ptr.PointerByReference)} and {@link #strtof(com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	float strtof(Pointer __nptr, PointerByReference __endptr);
	/**
	 * Likewise for `float' and `long double' sizes of floating-point numbers.<br>
	 * Original signature : <code>float strtof(const char*, char**)</code><br>
	 * <i>native declaration : stdlib.h:918</i>
	 */
	float strtof(String __nptr, PointerByReference __endptr);
	/**
	 * Original signature : <code>long double strtold(const char*, char**)</code><br>
	 * <i>native declaration : stdlib.h:920</i><br>
	 * @deprecated use the safer methods {@link #strtold(java.lang.String, com.sun.jna.ptr.PointerByReference)} and {@link #strtold(com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	double strtold(Pointer __nptr, PointerByReference __endptr);
	/**
	 * Original signature : <code>long double strtold(const char*, char**)</code><br>
	 * <i>native declaration : stdlib.h:920</i>
	 */
	double strtold(String __nptr, PointerByReference __endptr);
	/**
	 * Convert a string to a long integer.<br>
	 * Original signature : <code>long strtol(const char*, char**, int)</code><br>
	 * <i>native declaration : stdlib.h:925</i><br>
	 * @deprecated use the safer methods {@link #strtol(java.lang.String, com.sun.jna.ptr.PointerByReference, int)} and {@link #strtol(com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference, int)} instead
	 */
	@Deprecated 
	NativeLong strtol(Pointer __nptr, PointerByReference __endptr, int __base);
	/**
	 * Convert a string to a long integer.<br>
	 * Original signature : <code>long strtol(const char*, char**, int)</code><br>
	 * <i>native declaration : stdlib.h:925</i>
	 */
	NativeLong strtol(String __nptr, PointerByReference __endptr, int __base);
	/**
	 * Convert a string to an unsigned long integer.<br>
	 * Original signature : <code>long strtoul(const char*, char**, int)</code><br>
	 * <i>native declaration : stdlib.h:930</i><br>
	 * @deprecated use the safer methods {@link #strtoul(java.lang.String, com.sun.jna.ptr.PointerByReference, int)} and {@link #strtoul(com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference, int)} instead
	 */
	@Deprecated 
	NativeLong strtoul(Pointer __nptr, PointerByReference __endptr, int __base);
	/**
	 * Convert a string to an unsigned long integer.<br>
	 * Original signature : <code>long strtoul(const char*, char**, int)</code><br>
	 * <i>native declaration : stdlib.h:930</i>
	 */
	NativeLong strtoul(String __nptr, PointerByReference __endptr, int __base);
	/**
	 * Original signature : <code>long long strtoq(const char*, char**, int)</code><br>
	 * <i>native declaration : stdlib.h:932</i><br>
	 * @deprecated use the safer methods {@link #strtoq(java.lang.String, com.sun.jna.ptr.PointerByReference, int)} and {@link #strtoq(com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference, int)} instead
	 */
	@Deprecated 
	NativeLong strtoq(Pointer __nptr, PointerByReference __endptr, int __base);
	/**
	 * Original signature : <code>long long strtoq(const char*, char**, int)</code><br>
	 * <i>native declaration : stdlib.h:932</i>
	 */
	NativeLong strtoq(String __nptr, PointerByReference __endptr, int __base);
	/**
	 * Original signature : <code>long long strtouq(const char*, char**, int)</code><br>
	 * <i>native declaration : stdlib.h:934</i><br>
	 * @deprecated use the safer methods {@link #strtouq(java.lang.String, com.sun.jna.ptr.PointerByReference, int)} and {@link #strtouq(com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference, int)} instead
	 */
	@Deprecated 
	NativeLong strtouq(Pointer __nptr, PointerByReference __endptr, int __base);
	/**
	 * Original signature : <code>long long strtouq(const char*, char**, int)</code><br>
	 * <i>native declaration : stdlib.h:934</i>
	 */
	NativeLong strtouq(String __nptr, PointerByReference __endptr, int __base);
	/**
	 * Original signature : <code>long long strtoll(const char*, char**, int)</code><br>
	 * <i>native declaration : stdlib.h:936</i><br>
	 * @deprecated use the safer methods {@link #strtoll(java.lang.String, com.sun.jna.ptr.PointerByReference, int)} and {@link #strtoll(com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference, int)} instead
	 */
	@Deprecated 
	NativeLong strtoll(Pointer __nptr, PointerByReference __endptr, int __base);
	/**
	 * Original signature : <code>long long strtoll(const char*, char**, int)</code><br>
	 * <i>native declaration : stdlib.h:936</i>
	 */
	NativeLong strtoll(String __nptr, PointerByReference __endptr, int __base);
	/**
	 * Original signature : <code>long long strtoull(const char*, char**, int)</code><br>
	 * <i>native declaration : stdlib.h:938</i><br>
	 * @deprecated use the safer methods {@link #strtoull(java.lang.String, com.sun.jna.ptr.PointerByReference, int)} and {@link #strtoull(com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference, int)} instead
	 */
	@Deprecated 
	NativeLong strtoull(Pointer __nptr, PointerByReference __endptr, int __base);
	/**
	 * Original signature : <code>long long strtoull(const char*, char**, int)</code><br>
	 * <i>native declaration : stdlib.h:938</i>
	 */
	NativeLong strtoull(String __nptr, PointerByReference __endptr, int __base);
	/**
	 * Convert N to base 64 using the digits "./0-9A-Za-z", least-significant<br>
	 * digit first.  Returns a pointer to static storage overwritten by the<br>
	 * next call.<br>
	 * Original signature : <code>char* l64a(long)</code><br>
	 * <i>native declaration : stdlib.h:945</i>
	 */
	Pointer l64a(NativeLong __n);
	/**
	 * Read a number from a string S in base 64 as above.<br>
	 * Original signature : <code>long a64l(const char*)</code><br>
	 * <i>native declaration : stdlib.h:950</i><br>
	 * @deprecated use the safer methods {@link #a64l(java.lang.String)} and {@link #a64l(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	NativeLong a64l(Pointer __s);
	/**
	 * Read a number from a string S in base 64 as above.<br>
	 * Original signature : <code>long a64l(const char*)</code><br>
	 * <i>native declaration : stdlib.h:950</i>
	 */
	NativeLong a64l(String __s);
	/**
	 * Check the first NFDS descriptors each in READFDS (if not NULL) for read<br>
	 * readiness, in WRITEFDS (if not NULL) for write readiness, and in EXCEPTFDS<br>
	 * (if not NULL) for exceptional conditions.  If TIMEOUT is not NULL, time out<br>
	 * after waiting the interval specified therein.  Returns the number of ready<br>
	 * descriptors, or -1 for errors.<br>
	 * This function is a cancellation point and therefore not marked with<br>
	 * __THROW.<br>
	 * Original signature : <code>int select(int, fd_set*, fd_set*, fd_set*, timeval*)</code><br>
	 * <i>native declaration : sys/select.h:1011</i>
	 */
	int select(int __nfds, fd_set __readfds, fd_set __writefds, fd_set __exceptfds, timeval __timeout);
	/**
	 * Same as above only that the TIMEOUT value is given with higher<br>
	 * resolution and a sigmask which is been set temporarily.  This version<br>
	 * should be used.<br>
	 * This function is a cancellation point and therefore not marked with<br>
	 * __THROW.<br>
	 * Original signature : <code>int pselect(int, fd_set*, fd_set*, fd_set*, timespec*, const __sigset_t*)</code><br>
	 * <i>native declaration : sys/select.h:1020</i>
	 */
	int pselect(int __nfds, fd_set __readfds, fd_set __writefds, fd_set __exceptfds, timespec __timeout, __sigset_t __sigmask);
	/**
	 * Original signature : <code>int gnu_dev_major(unsigned long long)</code><br>
	 * <i>native declaration : sys/sysmacros.h:1024</i>
	 */
	int gnu_dev_major(NativeLong __dev);
	/**
	 * Original signature : <code>int gnu_dev_minor(unsigned long long)</code><br>
	 * <i>native declaration : sys/sysmacros.h:1026</i>
	 */
	int gnu_dev_minor(NativeLong __dev);
	/**
	 * Original signature : <code>long long gnu_dev_makedev(unsigned int, unsigned int)</code><br>
	 * <i>native declaration : sys/sysmacros.h:1028</i>
	 */
	NativeLong gnu_dev_makedev(int __major, int __minor);
	/**
	 * Return a random long integer between 0 and RAND_MAX inclusive.<br>
	 * Original signature : <code>long random()</code><br>
	 * <i>native declaration : stdlib.h:1039</i>
	 */
	NativeLong random();
	/**
	 * Seed the random number generator with the given number.<br>
	 * Original signature : <code>void srandom(unsigned int)</code><br>
	 * <i>native declaration : stdlib.h:1044</i>
	 */
	void srandom(int __seed);
	/**
	 * Initialize the random number generator to use state buffer STATEBUF,<br>
	 * of length STATELEN, and seed it with SEED.  Optimal lengths are 8, 16,<br>
	 * 32, 64, 128 and 256, the bigger the better; values less than 8 will<br>
	 * cause an error and values greater than 256 will be rounded down.<br>
	 * Original signature : <code>char* initstate(unsigned int, char*, size_t)</code><br>
	 * <i>native declaration : stdlib.h:1052</i><br>
	 * @deprecated use the safer methods {@link #initstate(int, java.nio.ByteBuffer, com.sun.jna.NativeLong)} and {@link #initstate(int, com.sun.jna.Pointer, com.sun.jna.NativeLong)} instead
	 */
	@Deprecated 
	Pointer initstate(int __seed, Pointer __statebuf, NativeLong __statelen);
	/**
	 * Initialize the random number generator to use state buffer STATEBUF,<br>
	 * of length STATELEN, and seed it with SEED.  Optimal lengths are 8, 16,<br>
	 * 32, 64, 128 and 256, the bigger the better; values less than 8 will<br>
	 * cause an error and values greater than 256 will be rounded down.<br>
	 * Original signature : <code>char* initstate(unsigned int, char*, size_t)</code><br>
	 * <i>native declaration : stdlib.h:1052</i>
	 */
	Pointer initstate(int __seed, ByteBuffer __statebuf, NativeLong __statelen);
	/**
	 * Switch the random number generator to state buffer STATEBUF,<br>
	 * which should have been previously initialized by `initstate'.<br>
	 * Original signature : <code>char* setstate(char*)</code><br>
	 * <i>native declaration : stdlib.h:1058</i><br>
	 * @deprecated use the safer methods {@link #setstate(java.nio.ByteBuffer)} and {@link #setstate(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	Pointer setstate(Pointer __statebuf);
	/**
	 * Switch the random number generator to state buffer STATEBUF,<br>
	 * which should have been previously initialized by `initstate'.<br>
	 * Original signature : <code>char* setstate(char*)</code><br>
	 * <i>native declaration : stdlib.h:1058</i>
	 */
	Pointer setstate(ByteBuffer __statebuf);
	/**
	 * Original signature : <code>int random_r(random_data*, int32_t*)</code><br>
	 * <i>native declaration : stdlib.h:1069</i><br>
	 * @deprecated use the safer methods {@link #random_r(c.random_data, java.nio.IntBuffer)} and {@link #random_r(c.random_data, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	int random_r(random_data __buf, IntByReference __result);
	/**
	 * Original signature : <code>int random_r(random_data*, int32_t*)</code><br>
	 * <i>native declaration : stdlib.h:1069</i>
	 */
	int random_r(random_data __buf, IntBuffer __result);
	/**
	 * Original signature : <code>int srandom_r(unsigned int, random_data*)</code><br>
	 * <i>native declaration : stdlib.h:1071</i>
	 */
	int srandom_r(int __seed, random_data __buf);
	/**
	 * Original signature : <code>int initstate_r(unsigned int, char*, size_t, random_data*)</code><br>
	 * <i>native declaration : stdlib.h:1073</i><br>
	 * @deprecated use the safer methods {@link #initstate_r(int, java.nio.ByteBuffer, com.sun.jna.NativeLong, c.random_data)} and {@link #initstate_r(int, com.sun.jna.Pointer, com.sun.jna.NativeLong, c.random_data)} instead
	 */
	@Deprecated 
	int initstate_r(int __seed, Pointer __statebuf, NativeLong __statelen, random_data __buf);
	/**
	 * Original signature : <code>int initstate_r(unsigned int, char*, size_t, random_data*)</code><br>
	 * <i>native declaration : stdlib.h:1073</i>
	 */
	int initstate_r(int __seed, ByteBuffer __statebuf, NativeLong __statelen, random_data __buf);
	/**
	 * Original signature : <code>int setstate_r(char*, random_data*)</code><br>
	 * <i>native declaration : stdlib.h:1075</i><br>
	 * @deprecated use the safer methods {@link #setstate_r(java.nio.ByteBuffer, c.random_data)} and {@link #setstate_r(com.sun.jna.Pointer, c.random_data)} instead
	 */
	@Deprecated 
	int setstate_r(Pointer __statebuf, random_data __buf);
	/**
	 * Original signature : <code>int setstate_r(char*, random_data*)</code><br>
	 * <i>native declaration : stdlib.h:1075</i>
	 */
	int setstate_r(ByteBuffer __statebuf, random_data __buf);
	/**
	 * Return a random integer between 0 and RAND_MAX inclusive.<br>
	 * Original signature : <code>int rand()</code><br>
	 * <i>native declaration : stdlib.h:1080</i>
	 */
	int rand();
	/**
	 * Seed the random number generator with the given number.<br>
	 * Original signature : <code>void srand(unsigned int)</code><br>
	 * <i>native declaration : stdlib.h:1085</i>
	 */
	void srand(int __seed);
	/**
	 * Reentrant interface according to POSIX.1.<br>
	 * Original signature : <code>int rand_r(unsigned int*)</code><br>
	 * <i>native declaration : stdlib.h:1090</i><br>
	 * @deprecated use the safer methods {@link #rand_r(java.nio.IntBuffer)} and {@link #rand_r(com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	int rand_r(IntByReference __seed);
	/**
	 * Reentrant interface according to POSIX.1.<br>
	 * Original signature : <code>int rand_r(unsigned int*)</code><br>
	 * <i>native declaration : stdlib.h:1090</i>
	 */
	int rand_r(IntBuffer __seed);
	/**
	 * Return non-negative, double-precision floating-point value in [0.0,1.0).<br>
	 * Original signature : <code>double drand48()</code><br>
	 * <i>native declaration : stdlib.h:1095</i>
	 */
	double drand48();
	/**
	 * Original signature : <code>double erand48(unsigned short[3])</code><br>
	 * <i>native declaration : stdlib.h:1097</i><br>
	 * @deprecated use the safer methods {@link #erand48(java.nio.ShortBuffer)} and {@link #erand48(com.sun.jna.ptr.ShortByReference)} instead
	 */
	@Deprecated 
	double erand48(ShortByReference __xsubi);
	/**
	 * Original signature : <code>double erand48(unsigned short[3])</code><br>
	 * <i>native declaration : stdlib.h:1097</i>
	 */
	double erand48(ShortBuffer __xsubi);
	/**
	 * Return non-negative, long integer in [0,2^31).<br>
	 * Original signature : <code>long lrand48()</code><br>
	 * <i>native declaration : stdlib.h:1102</i>
	 */
	NativeLong lrand48();
	/**
	 * Original signature : <code>long nrand48(unsigned short[3])</code><br>
	 * <i>native declaration : stdlib.h:1104</i><br>
	 * @deprecated use the safer methods {@link #nrand48(java.nio.ShortBuffer)} and {@link #nrand48(com.sun.jna.ptr.ShortByReference)} instead
	 */
	@Deprecated 
	NativeLong nrand48(ShortByReference __xsubi);
	/**
	 * Original signature : <code>long nrand48(unsigned short[3])</code><br>
	 * <i>native declaration : stdlib.h:1104</i>
	 */
	NativeLong nrand48(ShortBuffer __xsubi);
	/**
	 * Return signed, long integers in [-2^31,2^31).<br>
	 * Original signature : <code>long mrand48()</code><br>
	 * <i>native declaration : stdlib.h:1109</i>
	 */
	NativeLong mrand48();
	/**
	 * Original signature : <code>long jrand48(unsigned short[3])</code><br>
	 * <i>native declaration : stdlib.h:1111</i><br>
	 * @deprecated use the safer methods {@link #jrand48(java.nio.ShortBuffer)} and {@link #jrand48(com.sun.jna.ptr.ShortByReference)} instead
	 */
	@Deprecated 
	NativeLong jrand48(ShortByReference __xsubi);
	/**
	 * Original signature : <code>long jrand48(unsigned short[3])</code><br>
	 * <i>native declaration : stdlib.h:1111</i>
	 */
	NativeLong jrand48(ShortBuffer __xsubi);
	/**
	 * Seed random number generator.<br>
	 * Original signature : <code>void srand48(long)</code><br>
	 * <i>native declaration : stdlib.h:1116</i>
	 */
	void srand48(NativeLong __seedval);
	/**
	 * Original signature : <code>short* seed48(unsigned short[3])</code><br>
	 * <i>native declaration : stdlib.h:1118</i><br>
	 * @deprecated use the safer methods {@link #seed48(java.nio.ShortBuffer)} and {@link #seed48(com.sun.jna.ptr.ShortByReference)} instead
	 */
	@Deprecated 
	ShortByReference seed48(ShortByReference __seed16v);
	/**
	 * Original signature : <code>short* seed48(unsigned short[3])</code><br>
	 * <i>native declaration : stdlib.h:1118</i>
	 */
	ShortByReference seed48(ShortBuffer __seed16v);
	/**
	 * Original signature : <code>void lcong48(unsigned short[7])</code><br>
	 * <i>native declaration : stdlib.h:1120</i><br>
	 * @deprecated use the safer methods {@link #lcong48(java.nio.ShortBuffer)} and {@link #lcong48(com.sun.jna.ptr.ShortByReference)} instead
	 */
	@Deprecated 
	void lcong48(ShortByReference __param);
	/**
	 * Original signature : <code>void lcong48(unsigned short[7])</code><br>
	 * <i>native declaration : stdlib.h:1120</i>
	 */
	void lcong48(ShortBuffer __param);
	/**
	 * Return non-negative, double-precision floating-point value in [0.0,1.0).<br>
	 * Original signature : <code>int drand48_r(drand48_data*, double*)</code><br>
	 * <i>native declaration : stdlib.h:1137</i><br>
	 * @deprecated use the safer methods {@link #drand48_r(c.drand48_data, java.nio.DoubleBuffer)} and {@link #drand48_r(c.drand48_data, com.sun.jna.ptr.DoubleByReference)} instead
	 */
	@Deprecated 
	int drand48_r(drand48_data __buffer, DoubleByReference __result);
	/**
	 * Return non-negative, double-precision floating-point value in [0.0,1.0).<br>
	 * Original signature : <code>int drand48_r(drand48_data*, double*)</code><br>
	 * <i>native declaration : stdlib.h:1137</i>
	 */
	int drand48_r(drand48_data __buffer, DoubleBuffer __result);
	/**
	 * Original signature : <code>int erand48_r(unsigned short[3], drand48_data*, double*)</code><br>
	 * <i>native declaration : stdlib.h:1139</i><br>
	 * @deprecated use the safer methods {@link #erand48_r(java.nio.ShortBuffer, c.drand48_data, java.nio.DoubleBuffer)} and {@link #erand48_r(com.sun.jna.ptr.ShortByReference, c.drand48_data, com.sun.jna.ptr.DoubleByReference)} instead
	 */
	@Deprecated 
	int erand48_r(ShortByReference __xsubi, drand48_data __buffer, DoubleByReference __result);
	/**
	 * Original signature : <code>int erand48_r(unsigned short[3], drand48_data*, double*)</code><br>
	 * <i>native declaration : stdlib.h:1139</i>
	 */
	int erand48_r(ShortBuffer __xsubi, drand48_data __buffer, DoubleBuffer __result);
	/**
	 * Return non-negative, long integer in [0,2^31).<br>
	 * Original signature : <code>int lrand48_r(drand48_data*, long*)</code><br>
	 * <i>native declaration : stdlib.h:1144</i>
	 */
	int lrand48_r(drand48_data __buffer, NativeLongByReference __result);
	/**
	 * Original signature : <code>int nrand48_r(unsigned short[3], drand48_data*, long*)</code><br>
	 * <i>native declaration : stdlib.h:1146</i><br>
	 * @deprecated use the safer methods {@link #nrand48_r(java.nio.ShortBuffer, c.drand48_data, com.sun.jna.ptr.NativeLongByReference)} and {@link #nrand48_r(com.sun.jna.ptr.ShortByReference, c.drand48_data, com.sun.jna.ptr.NativeLongByReference)} instead
	 */
	@Deprecated 
	int nrand48_r(ShortByReference __xsubi, drand48_data __buffer, NativeLongByReference __result);
	/**
	 * Original signature : <code>int nrand48_r(unsigned short[3], drand48_data*, long*)</code><br>
	 * <i>native declaration : stdlib.h:1146</i>
	 */
	int nrand48_r(ShortBuffer __xsubi, drand48_data __buffer, NativeLongByReference __result);
	/**
	 * Return signed, long integers in [-2^31,2^31).<br>
	 * Original signature : <code>int mrand48_r(drand48_data*, long*)</code><br>
	 * <i>native declaration : stdlib.h:1151</i>
	 */
	int mrand48_r(drand48_data __buffer, NativeLongByReference __result);
	/**
	 * Original signature : <code>int jrand48_r(unsigned short[3], drand48_data*, long*)</code><br>
	 * <i>native declaration : stdlib.h:1153</i><br>
	 * @deprecated use the safer methods {@link #jrand48_r(java.nio.ShortBuffer, c.drand48_data, com.sun.jna.ptr.NativeLongByReference)} and {@link #jrand48_r(com.sun.jna.ptr.ShortByReference, c.drand48_data, com.sun.jna.ptr.NativeLongByReference)} instead
	 */
	@Deprecated 
	int jrand48_r(ShortByReference __xsubi, drand48_data __buffer, NativeLongByReference __result);
	/**
	 * Original signature : <code>int jrand48_r(unsigned short[3], drand48_data*, long*)</code><br>
	 * <i>native declaration : stdlib.h:1153</i>
	 */
	int jrand48_r(ShortBuffer __xsubi, drand48_data __buffer, NativeLongByReference __result);
	/**
	 * Seed random number generator.<br>
	 * Original signature : <code>int srand48_r(long, drand48_data*)</code><br>
	 * <i>native declaration : stdlib.h:1158</i>
	 */
	int srand48_r(NativeLong __seedval, drand48_data __buffer);
	/**
	 * Original signature : <code>int seed48_r(unsigned short[3], drand48_data*)</code><br>
	 * <i>native declaration : stdlib.h:1160</i><br>
	 * @deprecated use the safer methods {@link #seed48_r(java.nio.ShortBuffer, c.drand48_data)} and {@link #seed48_r(com.sun.jna.ptr.ShortByReference, c.drand48_data)} instead
	 */
	@Deprecated 
	int seed48_r(ShortByReference __seed16v, drand48_data __buffer);
	/**
	 * Original signature : <code>int seed48_r(unsigned short[3], drand48_data*)</code><br>
	 * <i>native declaration : stdlib.h:1160</i>
	 */
	int seed48_r(ShortBuffer __seed16v, drand48_data __buffer);
	/**
	 * Original signature : <code>int lcong48_r(unsigned short[7], drand48_data*)</code><br>
	 * <i>native declaration : stdlib.h:1162</i><br>
	 * @deprecated use the safer methods {@link #lcong48_r(java.nio.ShortBuffer, c.drand48_data)} and {@link #lcong48_r(com.sun.jna.ptr.ShortByReference, c.drand48_data)} instead
	 */
	@Deprecated 
	int lcong48_r(ShortByReference __param, drand48_data __buffer);
	/**
	 * Original signature : <code>int lcong48_r(unsigned short[7], drand48_data*)</code><br>
	 * <i>native declaration : stdlib.h:1162</i>
	 */
	int lcong48_r(ShortBuffer __param, drand48_data __buffer);
	/**
	 * Allocate SIZE bytes of memory.<br>
	 * Original signature : <code>void* malloc(size_t)</code><br>
	 * <i>native declaration : stdlib.h:1167</i>
	 */
	Pointer malloc(NativeLong __size);
	/**
	 * Allocate NMEMB elements of SIZE bytes each, all initialized to 0.<br>
	 * Original signature : <code>void* calloc(size_t, size_t)</code><br>
	 * <i>native declaration : stdlib.h:1172</i>
	 */
	Pointer calloc(NativeLong __nmemb, NativeLong __size);
	/**
	 * __attribute_malloc__ is not used, because if realloc returns<br>
	 * the same pointer that was passed to it, aliasing needs to be allowed<br>
	 * between objects pointed by the old and new pointers.<br>
	 * Original signature : <code>void* realloc(void*, size_t)</code><br>
	 * <i>native declaration : stdlib.h:1179</i>
	 */
	Pointer realloc(Pointer __ptr, NativeLong __size);
	/**
	 * Free a block allocated by `malloc', `realloc' or `calloc'.<br>
	 * Original signature : <code>void free(void*)</code><br>
	 * <i>native declaration : stdlib.h:1184</i>
	 */
	void free(Pointer __ptr);
	/**
	 * Free a block.  An alias for `free'.	(Sun Unices).<br>
	 * Original signature : <code>void cfree(void*)</code><br>
	 * <i>native declaration : stdlib.h:1189</i>
	 */
	void cfree(Pointer __ptr);
	/**
	 * Allocate a block that will be freed when the calling function exits.<br>
	 * Original signature : <code>void* alloca(size_t)</code><br>
	 * <i>native declaration : alloca.h:1195</i>
	 */
	Pointer alloca(NativeLong __size);
	/**
	 * Allocate SIZE bytes on a page boundary.  The storage cannot be freed.<br>
	 * Original signature : <code>void* valloc(size_t)</code><br>
	 * <i>native declaration : stdlib.h:1201</i>
	 */
	Pointer valloc(NativeLong __size);
	/**
	 * Allocate memory of SIZE bytes with an alignment of ALIGNMENT.<br>
	 * Original signature : <code>int posix_memalign(void**, size_t, size_t)</code><br>
	 * <i>native declaration : stdlib.h:1206</i>
	 */
	int posix_memalign(PointerByReference __memptr, NativeLong __alignment, NativeLong __size);
	/**
	 * Abort execution and generate a core-dump.<br>
	 * Original signature : <code>void abort()</code><br>
	 * <i>native declaration : stdlib.h:1211</i>
	 */
	void abort();
	/**
	 * Register a function to be called when `exit' is called.<br>
	 * Original signature : <code>int atexit(atexit___func_callback*)</code><br>
	 * <i>native declaration : stdlib.h:1216</i>
	 */
	int atexit(CLibrary.atexit___func_callback __func);
	/**
	 * Register a function to be called with the status<br>
	 * given to `exit' and the given argument.<br>
	 * Original signature : <code>int on_exit(on_exit___func_callback*, void*)</code><br>
	 * <i>native declaration : stdlib.h:1222</i>
	 */
	int on_exit(CLibrary.on_exit___func_callback __func, Pointer __arg);
	/**
	 * Call all functions registered with `atexit' and `on_exit',<br>
	 * in the reverse of the order in which they were registered,<br>
	 * perform stdio cleanup, and terminate program execution with STATUS.<br>
	 * Original signature : <code>void exit(int)</code><br>
	 * <i>native declaration : stdlib.h:1229</i>
	 */
	void exit(int __status);
	/**
	 * Terminate the program with STATUS without calling any of the<br>
	 * functions registered with `atexit' or `on_exit'.<br>
	 * Original signature : <code>void _Exit(int)</code><br>
	 * <i>native declaration : stdlib.h:1235</i>
	 */
	void _Exit(int __status);
	/**
	 * Return the value of envariable NAME, or NULL if it doesn't exist.<br>
	 * Original signature : <code>char* getenv(const char*)</code><br>
	 * <i>native declaration : stdlib.h:1240</i><br>
	 * @deprecated use the safer methods {@link #getenv(java.lang.String)} and {@link #getenv(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	Pointer getenv(Pointer __name);
	/**
	 * Return the value of envariable NAME, or NULL if it doesn't exist.<br>
	 * Original signature : <code>char* getenv(const char*)</code><br>
	 * <i>native declaration : stdlib.h:1240</i>
	 */
	Pointer getenv(String __name);
	/**
	 * Put STRING, which is of the form "NAME=VALUE", in the environment.<br>
	 * If there is no `=', remove NAME from the environment.<br>
	 * Original signature : <code>int putenv(char*)</code><br>
	 * <i>native declaration : stdlib.h:1246</i><br>
	 * @deprecated use the safer methods {@link #putenv(java.nio.ByteBuffer)} and {@link #putenv(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int putenv(Pointer __string);
	/**
	 * Put STRING, which is of the form "NAME=VALUE", in the environment.<br>
	 * If there is no `=', remove NAME from the environment.<br>
	 * Original signature : <code>int putenv(char*)</code><br>
	 * <i>native declaration : stdlib.h:1246</i>
	 */
	int putenv(ByteBuffer __string);
	/**
	 * Set NAME to VALUE in the environment.<br>
	 * If REPLACE is nonzero, overwrite an existing value.<br>
	 * Original signature : <code>int setenv(const char*, const char*, int)</code><br>
	 * <i>native declaration : stdlib.h:1252</i><br>
	 * @deprecated use the safer methods {@link #setenv(java.lang.String, java.lang.String, int)} and {@link #setenv(com.sun.jna.Pointer, com.sun.jna.Pointer, int)} instead
	 */
	@Deprecated 
	int setenv(Pointer __name, Pointer __value, int __replace);
	/**
	 * Set NAME to VALUE in the environment.<br>
	 * If REPLACE is nonzero, overwrite an existing value.<br>
	 * Original signature : <code>int setenv(const char*, const char*, int)</code><br>
	 * <i>native declaration : stdlib.h:1252</i>
	 */
	int setenv(String __name, String __value, int __replace);
	/**
	 * Remove the variable NAME from the environment.<br>
	 * Original signature : <code>int unsetenv(const char*)</code><br>
	 * <i>native declaration : stdlib.h:1257</i><br>
	 * @deprecated use the safer methods {@link #unsetenv(java.lang.String)} and {@link #unsetenv(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int unsetenv(Pointer __name);
	/**
	 * Remove the variable NAME from the environment.<br>
	 * Original signature : <code>int unsetenv(const char*)</code><br>
	 * <i>native declaration : stdlib.h:1257</i>
	 */
	int unsetenv(String __name);
	/**
	 * The `clearenv' was planned to be added to POSIX.1 but probably<br>
	 * never made it.  Nevertheless the POSIX.9 standard (POSIX bindings<br>
	 * for Fortran 77) requires this function.<br>
	 * Original signature : <code>int clearenv()</code><br>
	 * <i>native declaration : stdlib.h:1264</i>
	 */
	int clearenv();
	/**
	 * Generate a unique temporary file name from TEMPLATE.<br>
	 * The last six characters of TEMPLATE must be "XXXXXX";<br>
	 * they are replaced with a string that makes the file name unique.<br>
	 * Always returns TEMPLATE, it's either a temporary file name or a null<br>
	 * string if it cannot get a unique file name.<br>
	 * Original signature : <code>char* mktemp(char*)</code><br>
	 * <i>native declaration : stdlib.h:1273</i><br>
	 * @deprecated use the safer methods {@link #mktemp(java.nio.ByteBuffer)} and {@link #mktemp(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	Pointer mktemp(Pointer __template);
	/**
	 * Generate a unique temporary file name from TEMPLATE.<br>
	 * The last six characters of TEMPLATE must be "XXXXXX";<br>
	 * they are replaced with a string that makes the file name unique.<br>
	 * Always returns TEMPLATE, it's either a temporary file name or a null<br>
	 * string if it cannot get a unique file name.<br>
	 * Original signature : <code>char* mktemp(char*)</code><br>
	 * <i>native declaration : stdlib.h:1273</i>
	 */
	Pointer mktemp(ByteBuffer __template);
	/**
	 * Original signature : <code>int mkstemp(char*)</code><br>
	 * <i>native declaration : stdlib.h:1275</i><br>
	 * @deprecated use the safer methods {@link #mkstemp(java.nio.ByteBuffer)} and {@link #mkstemp(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int mkstemp(Pointer __template);
	/**
	 * Original signature : <code>int mkstemp(char*)</code><br>
	 * <i>native declaration : stdlib.h:1275</i>
	 */
	int mkstemp(ByteBuffer __template);
	/**
	 * Original signature : <code>int mkstemps(char*, int)</code><br>
	 * <i>native declaration : stdlib.h:1277</i><br>
	 * @deprecated use the safer methods {@link #mkstemps(java.nio.ByteBuffer, int)} and {@link #mkstemps(com.sun.jna.Pointer, int)} instead
	 */
	@Deprecated 
	int mkstemps(Pointer __template, int __suffixlen);
	/**
	 * Original signature : <code>int mkstemps(char*, int)</code><br>
	 * <i>native declaration : stdlib.h:1277</i>
	 */
	int mkstemps(ByteBuffer __template, int __suffixlen);
	/**
	 * Create a unique temporary directory from TEMPLATE.<br>
	 * The last six characters of TEMPLATE must be "XXXXXX";<br>
	 * they are replaced with a string that makes the directory name unique.<br>
	 * Returns TEMPLATE, or a null pointer if it cannot get a unique name.<br>
	 * The directory is created mode 700.<br>
	 * Original signature : <code>char* mkdtemp(char*)</code><br>
	 * <i>native declaration : stdlib.h:1286</i><br>
	 * @deprecated use the safer methods {@link #mkdtemp(java.nio.ByteBuffer)} and {@link #mkdtemp(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	Pointer mkdtemp(Pointer __template);
	/**
	 * Create a unique temporary directory from TEMPLATE.<br>
	 * The last six characters of TEMPLATE must be "XXXXXX";<br>
	 * they are replaced with a string that makes the directory name unique.<br>
	 * Returns TEMPLATE, or a null pointer if it cannot get a unique name.<br>
	 * The directory is created mode 700.<br>
	 * Original signature : <code>char* mkdtemp(char*)</code><br>
	 * <i>native declaration : stdlib.h:1286</i>
	 */
	Pointer mkdtemp(ByteBuffer __template);
	/**
	 * Execute the given line as a shell command.<br>
	 * This function is a cancellation point and therefore not marked with<br>
	 * __THROW.<br>
	 * Original signature : <code>int system(const char*)</code><br>
	 * <i>native declaration : stdlib.h:1293</i><br>
	 * @deprecated use the safer methods {@link #system(java.lang.String)} and {@link #system(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int system(Pointer __command);
	/**
	 * Execute the given line as a shell command.<br>
	 * This function is a cancellation point and therefore not marked with<br>
	 * __THROW.<br>
	 * Original signature : <code>int system(const char*)</code><br>
	 * <i>native declaration : stdlib.h:1293</i>
	 */
	int system(String __command);
	/**
	 * Return the canonical absolute name of file NAME.  If RESOLVED is<br>
	 * null, the result is malloc'd; otherwise, if the canonical name is<br>
	 * PATH_MAX chars or more, returns null with `errno' set to<br>
	 * ENAMETOOLONG; if the name fits in fewer than PATH_MAX chars,<br>
	 * returns the name in RESOLVED.<br>
	 * Original signature : <code>char* realpath(const char*, char*)</code><br>
	 * <i>native declaration : stdlib.h:1302</i><br>
	 * @deprecated use the safer methods {@link #realpath(java.lang.String, java.nio.ByteBuffer)} and {@link #realpath(com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	Pointer realpath(Pointer __name, Pointer __resolved);
	/**
	 * Return the canonical absolute name of file NAME.  If RESOLVED is<br>
	 * null, the result is malloc'd; otherwise, if the canonical name is<br>
	 * PATH_MAX chars or more, returns null with `errno' set to<br>
	 * ENAMETOOLONG; if the name fits in fewer than PATH_MAX chars,<br>
	 * returns the name in RESOLVED.<br>
	 * Original signature : <code>char* realpath(const char*, char*)</code><br>
	 * <i>native declaration : stdlib.h:1302</i>
	 */
	Pointer realpath(String __name, ByteBuffer __resolved);
	/**
	 * Do a binary search for KEY in BASE, which consists of NMEMB elements<br>
	 * of SIZE bytes each, using COMPAR to perform the comparisons.<br>
	 * Original signature : <code>void* bsearch(const void*, const void*, size_t, size_t, __compar_fn_t)</code><br>
	 * <i>native declaration : stdlib.h:1309</i>
	 */
	Pointer bsearch(Pointer __key, Pointer __base, NativeLong __nmemb, NativeLong __size, CLibrary.__compar_fn_t __compar);
	/**
	 * Sort NMEMB elements of BASE, of SIZE bytes each,<br>
	 * using COMPAR to perform the comparisons.<br>
	 * Original signature : <code>void qsort(void*, size_t, size_t, __compar_fn_t)</code><br>
	 * <i>native declaration : stdlib.h:1315</i>
	 */
	void qsort(Pointer __base, NativeLong __nmemb, NativeLong __size, CLibrary.__compar_fn_t __compar);
	/**
	 * Return the absolute value of X.<br>
	 * Original signature : <code>int abs(int)</code><br>
	 * <i>native declaration : stdlib.h:1320</i>
	 */
	int abs(int __x);
	/**
	 * Original signature : <code>long labs(long)</code><br>
	 * <i>native declaration : stdlib.h:1322</i>
	 */
	NativeLong labs(NativeLong __x);
	/**
	 * Original signature : <code>long long llabs(long long)</code><br>
	 * <i>native declaration : stdlib.h:1324</i>
	 */
	NativeLong llabs(NativeLong __x);
	/**
	 * GCC may have built-ins for these someday.<br>
	 * Original signature : <code>div_t div(int, int)</code><br>
	 * <i>native declaration : stdlib.h:1329</i>
	 */
	c.div_t.ByValue div(int __numer, int __denom);
	/**
	 * Original signature : <code>ldiv_t ldiv(long, long)</code><br>
	 * <i>native declaration : stdlib.h:1331</i>
	 */
	c.ldiv_t.ByValue ldiv(NativeLong __numer, NativeLong __denom);
	/**
	 * Original signature : <code>lldiv_t lldiv(long long, long long)</code><br>
	 * <i>native declaration : stdlib.h:1333</i>
	 */
	c.lldiv_t.ByValue lldiv(NativeLong __numer, NativeLong __denom);
	/**
	 * Convert VALUE to a string with NDIGIT digits and return a pointer to<br>
	 * this.  Set *DECPT with the position of the decimal character and *SIGN<br>
	 * with the sign of the number.<br>
	 * Original signature : <code>char* ecvt(double, int, int*, int*)</code><br>
	 * <i>native declaration : stdlib.h:1340</i><br>
	 * @deprecated use the safer methods {@link #ecvt(double, int, java.nio.IntBuffer, java.nio.IntBuffer)} and {@link #ecvt(double, int, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	Pointer ecvt(double __value, int __ndigit, IntByReference __decpt, IntByReference __sign);
	/**
	 * Convert VALUE to a string with NDIGIT digits and return a pointer to<br>
	 * this.  Set *DECPT with the position of the decimal character and *SIGN<br>
	 * with the sign of the number.<br>
	 * Original signature : <code>char* ecvt(double, int, int*, int*)</code><br>
	 * <i>native declaration : stdlib.h:1340</i>
	 */
	Pointer ecvt(double __value, int __ndigit, IntBuffer __decpt, IntBuffer __sign);
	/**
	 * Convert VALUE to a string rounded to NDIGIT decimal digits.  Set *DECPT<br>
	 * with the position of the decimal character and *SIGN with the sign of<br>
	 * the number.<br>
	 * Original signature : <code>char* fcvt(double, int, int*, int*)</code><br>
	 * <i>native declaration : stdlib.h:1347</i><br>
	 * @deprecated use the safer methods {@link #fcvt(double, int, java.nio.IntBuffer, java.nio.IntBuffer)} and {@link #fcvt(double, int, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	Pointer fcvt(double __value, int __ndigit, IntByReference __decpt, IntByReference __sign);
	/**
	 * Convert VALUE to a string rounded to NDIGIT decimal digits.  Set *DECPT<br>
	 * with the position of the decimal character and *SIGN with the sign of<br>
	 * the number.<br>
	 * Original signature : <code>char* fcvt(double, int, int*, int*)</code><br>
	 * <i>native declaration : stdlib.h:1347</i>
	 */
	Pointer fcvt(double __value, int __ndigit, IntBuffer __decpt, IntBuffer __sign);
	/**
	 * If possible convert VALUE to a string with NDIGIT significant digits.<br>
	 * Otherwise use exponential representation.  The resulting string will<br>
	 * be written to BUF.<br>
	 * Original signature : <code>char* gcvt(double, int, char*)</code><br>
	 * <i>native declaration : stdlib.h:1354</i><br>
	 * @deprecated use the safer methods {@link #gcvt(double, int, java.nio.ByteBuffer)} and {@link #gcvt(double, int, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	Pointer gcvt(double __value, int __ndigit, Pointer __buf);
	/**
	 * If possible convert VALUE to a string with NDIGIT significant digits.<br>
	 * Otherwise use exponential representation.  The resulting string will<br>
	 * be written to BUF.<br>
	 * Original signature : <code>char* gcvt(double, int, char*)</code><br>
	 * <i>native declaration : stdlib.h:1354</i>
	 */
	Pointer gcvt(double __value, int __ndigit, ByteBuffer __buf);
	/**
	 * Long double versions of above functions.<br>
	 * Original signature : <code>char* qecvt(long double, int, int*, int*)</code><br>
	 * <i>native declaration : stdlib.h:1359</i><br>
	 * @deprecated use the safer methods {@link #qecvt(double, int, java.nio.IntBuffer, java.nio.IntBuffer)} and {@link #qecvt(double, int, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	Pointer qecvt(double __value, int __ndigit, IntByReference __decpt, IntByReference __sign);
	/**
	 * Long double versions of above functions.<br>
	 * Original signature : <code>char* qecvt(long double, int, int*, int*)</code><br>
	 * <i>native declaration : stdlib.h:1359</i>
	 */
	Pointer qecvt(double __value, int __ndigit, IntBuffer __decpt, IntBuffer __sign);
	/**
	 * Original signature : <code>char* qfcvt(long double, int, int*, int*)</code><br>
	 * <i>native declaration : stdlib.h:1361</i><br>
	 * @deprecated use the safer methods {@link #qfcvt(double, int, java.nio.IntBuffer, java.nio.IntBuffer)} and {@link #qfcvt(double, int, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	Pointer qfcvt(double __value, int __ndigit, IntByReference __decpt, IntByReference __sign);
	/**
	 * Original signature : <code>char* qfcvt(long double, int, int*, int*)</code><br>
	 * <i>native declaration : stdlib.h:1361</i>
	 */
	Pointer qfcvt(double __value, int __ndigit, IntBuffer __decpt, IntBuffer __sign);
	/**
	 * Original signature : <code>char* qgcvt(long double, int, char*)</code><br>
	 * <i>native declaration : stdlib.h:1363</i><br>
	 * @deprecated use the safer methods {@link #qgcvt(double, int, java.nio.ByteBuffer)} and {@link #qgcvt(double, int, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	Pointer qgcvt(double __value, int __ndigit, Pointer __buf);
	/**
	 * Original signature : <code>char* qgcvt(long double, int, char*)</code><br>
	 * <i>native declaration : stdlib.h:1363</i>
	 */
	Pointer qgcvt(double __value, int __ndigit, ByteBuffer __buf);
	/**
	 * Reentrant version of the functions above which provide their own<br>
	 * buffers.<br>
	 * Original signature : <code>int ecvt_r(double, int, int*, int*, char*, size_t)</code><br>
	 * <i>native declaration : stdlib.h:1369</i><br>
	 * @deprecated use the safer methods {@link #ecvt_r(double, int, java.nio.IntBuffer, java.nio.IntBuffer, java.nio.ByteBuffer, com.sun.jna.NativeLong)} and {@link #ecvt_r(double, int, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.IntByReference, com.sun.jna.Pointer, com.sun.jna.NativeLong)} instead
	 */
	@Deprecated 
	int ecvt_r(double __value, int __ndigit, IntByReference __decpt, IntByReference __sign, Pointer __buf, NativeLong __len);
	/**
	 * Reentrant version of the functions above which provide their own<br>
	 * buffers.<br>
	 * Original signature : <code>int ecvt_r(double, int, int*, int*, char*, size_t)</code><br>
	 * <i>native declaration : stdlib.h:1369</i>
	 */
	int ecvt_r(double __value, int __ndigit, IntBuffer __decpt, IntBuffer __sign, ByteBuffer __buf, NativeLong __len);
	/**
	 * Original signature : <code>int fcvt_r(double, int, int*, int*, char*, size_t)</code><br>
	 * <i>native declaration : stdlib.h:1371</i><br>
	 * @deprecated use the safer methods {@link #fcvt_r(double, int, java.nio.IntBuffer, java.nio.IntBuffer, java.nio.ByteBuffer, com.sun.jna.NativeLong)} and {@link #fcvt_r(double, int, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.IntByReference, com.sun.jna.Pointer, com.sun.jna.NativeLong)} instead
	 */
	@Deprecated 
	int fcvt_r(double __value, int __ndigit, IntByReference __decpt, IntByReference __sign, Pointer __buf, NativeLong __len);
	/**
	 * Original signature : <code>int fcvt_r(double, int, int*, int*, char*, size_t)</code><br>
	 * <i>native declaration : stdlib.h:1371</i>
	 */
	int fcvt_r(double __value, int __ndigit, IntBuffer __decpt, IntBuffer __sign, ByteBuffer __buf, NativeLong __len);
	/**
	 * Original signature : <code>int qecvt_r(long double, int, int*, int*, char*, size_t)</code><br>
	 * <i>native declaration : stdlib.h:1373</i><br>
	 * @deprecated use the safer methods {@link #qecvt_r(double, int, java.nio.IntBuffer, java.nio.IntBuffer, java.nio.ByteBuffer, com.sun.jna.NativeLong)} and {@link #qecvt_r(double, int, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.IntByReference, com.sun.jna.Pointer, com.sun.jna.NativeLong)} instead
	 */
	@Deprecated 
	int qecvt_r(double __value, int __ndigit, IntByReference __decpt, IntByReference __sign, Pointer __buf, NativeLong __len);
	/**
	 * Original signature : <code>int qecvt_r(long double, int, int*, int*, char*, size_t)</code><br>
	 * <i>native declaration : stdlib.h:1373</i>
	 */
	int qecvt_r(double __value, int __ndigit, IntBuffer __decpt, IntBuffer __sign, ByteBuffer __buf, NativeLong __len);
	/**
	 * Original signature : <code>int qfcvt_r(long double, int, int*, int*, char*, size_t)</code><br>
	 * <i>native declaration : stdlib.h:1375</i><br>
	 * @deprecated use the safer methods {@link #qfcvt_r(double, int, java.nio.IntBuffer, java.nio.IntBuffer, java.nio.ByteBuffer, com.sun.jna.NativeLong)} and {@link #qfcvt_r(double, int, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.IntByReference, com.sun.jna.Pointer, com.sun.jna.NativeLong)} instead
	 */
	@Deprecated 
	int qfcvt_r(double __value, int __ndigit, IntByReference __decpt, IntByReference __sign, Pointer __buf, NativeLong __len);
	/**
	 * Original signature : <code>int qfcvt_r(long double, int, int*, int*, char*, size_t)</code><br>
	 * <i>native declaration : stdlib.h:1375</i>
	 */
	int qfcvt_r(double __value, int __ndigit, IntBuffer __decpt, IntBuffer __sign, ByteBuffer __buf, NativeLong __len);
	/**
	 * Return the length of the multibyte character<br>
	 * in S, which is no longer than N.<br>
	 * Original signature : <code>int mblen(const char*, size_t)</code><br>
	 * <i>native declaration : stdlib.h:1381</i><br>
	 * @deprecated use the safer methods {@link #mblen(java.lang.String, com.sun.jna.NativeLong)} and {@link #mblen(com.sun.jna.Pointer, com.sun.jna.NativeLong)} instead
	 */
	@Deprecated 
	int mblen(Pointer __s, NativeLong __n);
	/**
	 * Return the length of the multibyte character<br>
	 * in S, which is no longer than N.<br>
	 * Original signature : <code>int mblen(const char*, size_t)</code><br>
	 * <i>native declaration : stdlib.h:1381</i>
	 */
	int mblen(String __s, NativeLong __n);
	/**
	 * Return the length of the given multibyte character,<br>
	 * putting its `wchar_t' representation in *PWC.<br>
	 * Original signature : <code>int mbtowc(wchar_t*, const char*, size_t)</code><br>
	 * <i>native declaration : stdlib.h:1387</i><br>
	 * @deprecated use the safer methods {@link #mbtowc(java.nio.CharBuffer, java.lang.String, com.sun.jna.NativeLong)} and {@link #mbtowc(com.ochafik.lang.jnaerator.runtime.CharByReference, com.sun.jna.Pointer, com.sun.jna.NativeLong)} instead
	 */
	@Deprecated 
//	int mbtowc(CharByReference __pwc, Pointer __s, NativeLong __n);
	/**
	 * Return the length of the given multibyte character,<br>
	 * putting its `wchar_t' representation in *PWC.<br>
	 * Original signature : <code>int mbtowc(wchar_t*, const char*, size_t)</code><br>
	 * <i>native declaration : stdlib.h:1387</i>
	 */
	int mbtowc(CharBuffer __pwc, String __s, NativeLong __n);
	/**
	 * Put the multibyte character represented<br>
	 * by WCHAR in S, returning its length.<br>
	 * Original signature : <code>int wctomb(char*, wchar_t)</code><br>
	 * <i>native declaration : stdlib.h:1393</i><br>
	 * @deprecated use the safer methods {@link #wctomb(java.nio.ByteBuffer, char)} and {@link #wctomb(com.sun.jna.Pointer, char)} instead
	 */
	@Deprecated 
	int wctomb(Pointer __s, char __wchar);
	/**
	 * Put the multibyte character represented<br>
	 * by WCHAR in S, returning its length.<br>
	 * Original signature : <code>int wctomb(char*, wchar_t)</code><br>
	 * <i>native declaration : stdlib.h:1393</i>
	 */
	int wctomb(ByteBuffer __s, char __wchar);
	/**
	 * Convert a multibyte string to a wide char string.<br>
	 * Original signature : <code>size_t mbstowcs(wchar_t*, const char*, size_t)</code><br>
	 * <i>native declaration : stdlib.h:1398</i><br>
	 * @deprecated use the safer methods {@link #mbstowcs(java.nio.CharBuffer, java.lang.String, com.sun.jna.NativeLong)} and {@link #mbstowcs(com.ochafik.lang.jnaerator.runtime.CharByReference, com.sun.jna.Pointer, com.sun.jna.NativeLong)} instead
	 */
//	@Deprecated 
//	NativeLong mbstowcs(CharByReference __pwcs, Pointer __s, NativeLong __n);
	/**
	 * Convert a multibyte string to a wide char string.<br>
	 * Original signature : <code>size_t mbstowcs(wchar_t*, const char*, size_t)</code><br>
	 * <i>native declaration : stdlib.h:1398</i>
	 */
	NativeLong mbstowcs(CharBuffer __pwcs, String __s, NativeLong __n);
	/**
	 * Convert a wide char string to multibyte string.<br>
	 * Original signature : <code>size_t wcstombs(char*, const wchar_t*, size_t)</code><br>
	 * <i>native declaration : stdlib.h:1403</i><br>
	 * @deprecated use the safer methods {@link #wcstombs(java.nio.ByteBuffer, com.sun.jna.WString, com.sun.jna.NativeLong)} and {@link #wcstombs(com.sun.jna.Pointer, com.ochafik.lang.jnaerator.runtime.CharByReference, com.sun.jna.NativeLong)} instead
	 */
//	@Deprecated 
//	NativeLong wcstombs(Pointer __s, CharByReference __pwcs, NativeLong __n);
	/**
	 * Convert a wide char string to multibyte string.<br>
	 * Original signature : <code>size_t wcstombs(char*, const wchar_t*, size_t)</code><br>
	 * <i>native declaration : stdlib.h:1403</i>
	 */
	NativeLong wcstombs(ByteBuffer __s, WString __pwcs, NativeLong __n);
	/**
	 * Determine whether the string value of RESPONSE matches the affirmation<br>
	 * or negative response expression as specified by the LC_MESSAGES category<br>
	 * in the program's current locale.  Returns 1 if affirmative, 0 if<br>
	 * negative, and -1 if not matching.<br>
	 * Original signature : <code>int rpmatch(const char*)</code><br>
	 * <i>native declaration : stdlib.h:1411</i><br>
	 * @deprecated use the safer methods {@link #rpmatch(java.lang.String)} and {@link #rpmatch(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int rpmatch(Pointer __response);
	/**
	 * Determine whether the string value of RESPONSE matches the affirmation<br>
	 * or negative response expression as specified by the LC_MESSAGES category<br>
	 * in the program's current locale.  Returns 1 if affirmative, 0 if<br>
	 * negative, and -1 if not matching.<br>
	 * Original signature : <code>int rpmatch(const char*)</code><br>
	 * <i>native declaration : stdlib.h:1411</i>
	 */
	int rpmatch(String __response);
	/**
	 * Parse comma separated suboption from *OPTIONP and match against<br>
	 * strings in TOKENS.  If found return index and set *VALUEP to<br>
	 * optional value introduced by an equal sign.  If the suboption is<br>
	 * not part of TOKENS return in *VALUEP beginning of unknown<br>
	 * suboption.  On exit *OPTIONP is set to the beginning of the next<br>
	 * token or at the terminating NUL character.<br>
	 * Original signature : <code>int getsubopt(char**, const char**, char**)</code><br>
	 * <i>native declaration : stdlib.h:1421</i><br>
	 * @deprecated use the safer methods {@link #getsubopt(com.sun.jna.ptr.PointerByReference, java.lang.String[], com.sun.jna.ptr.PointerByReference)} and {@link #getsubopt(com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int getsubopt(PointerByReference __optionp, PointerByReference __tokens, PointerByReference __valuep);
	/**
	 * Parse comma separated suboption from *OPTIONP and match against<br>
	 * strings in TOKENS.  If found return index and set *VALUEP to<br>
	 * optional value introduced by an equal sign.  If the suboption is<br>
	 * not part of TOKENS return in *VALUEP beginning of unknown<br>
	 * suboption.  On exit *OPTIONP is set to the beginning of the next<br>
	 * token or at the terminating NUL character.<br>
	 * Original signature : <code>int getsubopt(char**, const char**, char**)</code><br>
	 * <i>native declaration : stdlib.h:1421</i>
	 */
	int getsubopt(PointerByReference __optionp, String __tokens[], PointerByReference __valuep);
	/**
	 * Put the 1 minute, 5 minute and 15 minute load averages into the first<br>
	 * NELEM elements of LOADAVG.  Return the number written (never more than<br>
	 * three, but may be less than NELEM), or -1 if an error occurred.<br>
	 * Original signature : <code>int getloadavg(double[], int)</code><br>
	 * <i>native declaration : stdlib.h:1428</i><br>
	 * @deprecated use the safer methods {@link #getloadavg(java.nio.DoubleBuffer, int)} and {@link #getloadavg(com.sun.jna.ptr.DoubleByReference, int)} instead
	 */
	@Deprecated 
	int getloadavg(DoubleByReference __loadavg, int __nelem);
	/**
	 * Put the 1 minute, 5 minute and 15 minute load averages into the first<br>
	 * NELEM elements of LOADAVG.  Return the number written (never more than<br>
	 * three, but may be less than NELEM), or -1 if an error occurred.<br>
	 * Original signature : <code>int getloadavg(double[], int)</code><br>
	 * <i>native declaration : stdlib.h:1428</i>
	 */
	int getloadavg(DoubleBuffer __loadavg, int __nelem);
	/**
	 * Original signature : <code>int __underflow(_IO_FILE*)</code><br>
	 * <i>native declaration : libio.h:1540</i>
	 */
	int __underflow(_IO_FILE _IO_FILEPtr1);
	/**
	 * Original signature : <code>int __uflow(_IO_FILE*)</code><br>
	 * <i>native declaration : libio.h:1542</i>
	 */
	int __uflow(_IO_FILE _IO_FILEPtr1);
	/**
	 * Original signature : <code>int __overflow(_IO_FILE*, int)</code><br>
	 * <i>native declaration : libio.h:1544</i>
	 */
	int __overflow(_IO_FILE _IO_FILEPtr1, int int1);
	/**
	 * Original signature : <code>int _IO_getc(_IO_FILE*)</code><br>
	 * <i>native declaration : libio.h:1546</i>
	 */
	int _IO_getc(_IO_FILE __fp);
	/**
	 * Original signature : <code>int _IO_putc(int, _IO_FILE*)</code><br>
	 * <i>native declaration : libio.h:1548</i>
	 */
	int _IO_putc(int __c, _IO_FILE __fp);
	/**
	 * Original signature : <code>int _IO_feof(_IO_FILE*)</code><br>
	 * <i>native declaration : libio.h:1550</i>
	 */
	int _IO_feof(_IO_FILE __fp);
	/**
	 * Original signature : <code>int _IO_ferror(_IO_FILE*)</code><br>
	 * <i>native declaration : libio.h:1552</i>
	 */
	int _IO_ferror(_IO_FILE __fp);
	/**
	 * Original signature : <code>int _IO_peekc_locked(_IO_FILE*)</code><br>
	 * <i>native declaration : libio.h:1554</i>
	 */
	int _IO_peekc_locked(_IO_FILE __fp);
	/**
	 * Original signature : <code>void _IO_flockfile(_IO_FILE*)</code><br>
	 * <i>native declaration : libio.h:1556</i>
	 */
	void _IO_flockfile(_IO_FILE _IO_FILEPtr1);
	/**
	 * Original signature : <code>void _IO_funlockfile(_IO_FILE*)</code><br>
	 * <i>native declaration : libio.h:1558</i>
	 */
	void _IO_funlockfile(_IO_FILE _IO_FILEPtr1);
	/**
	 * Original signature : <code>int _IO_ftrylockfile(_IO_FILE*)</code><br>
	 * <i>native declaration : libio.h:1560</i>
	 */
	int _IO_ftrylockfile(_IO_FILE _IO_FILEPtr1);
	/**
	 * Original signature : <code>int _IO_vfscanf(_IO_FILE*, const char*, __gnuc_va_list, int*)</code><br>
	 * <i>native declaration : libio.h:1562</i><br>
	 * @deprecated use the safer methods {@link #_IO_vfscanf(c._IO_FILE, java.lang.String, c.CLibrary.__gnuc_va_list, java.nio.IntBuffer)} and {@link #_IO_vfscanf(c._IO_FILE, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	int _IO_vfscanf(_IO_FILE _IO_FILEPtr1, Pointer charPtr1, Pointer __gnuc_va_list1, IntByReference intPtr1);
	/**
	 * Original signature : <code>int _IO_vfscanf(_IO_FILE*, const char*, __gnuc_va_list, int*)</code><br>
	 * <i>native declaration : libio.h:1562</i>
	 */
	int _IO_vfscanf(_IO_FILE _IO_FILEPtr1, String charPtr1, CLibrary.__gnuc_va_list __gnuc_va_list1, IntBuffer intPtr1);
	/**
	 * Original signature : <code>int _IO_vfprintf(_IO_FILE*, const char*, __gnuc_va_list)</code><br>
	 * <i>native declaration : libio.h:1564</i><br>
	 * @deprecated use the safer methods {@link #_IO_vfprintf(c._IO_FILE, java.lang.String, c.CLibrary.__gnuc_va_list)} and {@link #_IO_vfprintf(c._IO_FILE, com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int _IO_vfprintf(_IO_FILE _IO_FILEPtr1, Pointer charPtr1, Pointer __gnuc_va_list1);
	/**
	 * Original signature : <code>int _IO_vfprintf(_IO_FILE*, const char*, __gnuc_va_list)</code><br>
	 * <i>native declaration : libio.h:1564</i>
	 */
	int _IO_vfprintf(_IO_FILE _IO_FILEPtr1, String charPtr1, CLibrary.__gnuc_va_list __gnuc_va_list1);
	/**
	 * Original signature : <code>__ssize_t _IO_padn(_IO_FILE*, int, __ssize_t)</code><br>
	 * <i>native declaration : libio.h:1566</i>
	 */
	NativeLong _IO_padn(_IO_FILE _IO_FILEPtr1, int int1, NativeLong __ssize_t1);
	/**
	 * Original signature : <code>size_t _IO_sgetn(_IO_FILE*, void*, size_t)</code><br>
	 * <i>native declaration : libio.h:1568</i>
	 */
	NativeLong _IO_sgetn(_IO_FILE _IO_FILEPtr1, Pointer voidPtr1, NativeLong size_t1);
	/**
	 * Original signature : <code>__off64_t _IO_seekoff(_IO_FILE*, __off64_t, int, int)</code><br>
	 * <i>native declaration : libio.h:1570</i>
	 */
	NativeLong _IO_seekoff(_IO_FILE _IO_FILEPtr1, NativeLong __off64_t1, int int1, int int2);
	/**
	 * Original signature : <code>__off64_t _IO_seekpos(_IO_FILE*, __off64_t, int)</code><br>
	 * <i>native declaration : libio.h:1572</i>
	 */
	NativeLong _IO_seekpos(_IO_FILE _IO_FILEPtr1, NativeLong __off64_t1, int int1);
	/**
	 * Original signature : <code>void _IO_free_backup_area(_IO_FILE*)</code><br>
	 * <i>native declaration : libio.h:1574</i>
	 */
	void _IO_free_backup_area(_IO_FILE _IO_FILEPtr1);
	/**
	 * Remove file FILENAME.<br>
	 * Original signature : <code>int remove(const char*)</code><br>
	 * <i>native declaration : stdio.h:1586</i><br>
	 * @deprecated use the safer methods {@link #remove(java.lang.String)} and {@link #remove(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int remove(Pointer __filename);
	/**
	 * Remove file FILENAME.<br>
	 * Original signature : <code>int remove(const char*)</code><br>
	 * <i>native declaration : stdio.h:1586</i>
	 */
	int remove(String __filename);
	/**
	 * Rename file OLD to NEW.<br>
	 * Original signature : <code>int rename(const char*, const char*)</code><br>
	 * <i>native declaration : stdio.h:1591</i><br>
	 * @deprecated use the safer methods {@link #rename(java.lang.String, java.lang.String)} and {@link #rename(com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int rename(Pointer __old, Pointer __new);
	/**
	 * Rename file OLD to NEW.<br>
	 * Original signature : <code>int rename(const char*, const char*)</code><br>
	 * <i>native declaration : stdio.h:1591</i>
	 */
	int rename(String __old, String __new);
	/**
	 * Rename file OLD relative to OLDFD to NEW relative to NEWFD.<br>
	 * Original signature : <code>int renameat(int, const char*, int, const char*)</code><br>
	 * <i>native declaration : stdio.h:1596</i><br>
	 * @deprecated use the safer methods {@link #renameat(int, java.lang.String, int, java.lang.String)} and {@link #renameat(int, com.sun.jna.Pointer, int, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int renameat(int __oldfd, Pointer __old, int __newfd, Pointer __new);
	/**
	 * Rename file OLD relative to OLDFD to NEW relative to NEWFD.<br>
	 * Original signature : <code>int renameat(int, const char*, int, const char*)</code><br>
	 * <i>native declaration : stdio.h:1596</i>
	 */
	int renameat(int __oldfd, String __old, int __newfd, String __new);
	/**
	 * Original signature : <code>FILE* tmpfile()</code><br>
	 * <i>native declaration : stdio.h:1598</i>
	 */
	_IO_FILE tmpfile();
	/**
	 * Generate a temporary filename.<br>
	 * Original signature : <code>char* tmpnam(char*)</code><br>
	 * <i>native declaration : stdio.h:1603</i><br>
	 * @deprecated use the safer methods {@link #tmpnam(java.nio.ByteBuffer)} and {@link #tmpnam(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	Pointer tmpnam(Pointer __s);
	/**
	 * Generate a temporary filename.<br>
	 * Original signature : <code>char* tmpnam(char*)</code><br>
	 * <i>native declaration : stdio.h:1603</i>
	 */
	Pointer tmpnam(ByteBuffer __s);
	/**
	 * This is the reentrant variant of `tmpnam'.  The only difference is<br>
	 * that it does not allow S to be NULL.<br>
	 * Original signature : <code>char* tmpnam_r(char*)</code><br>
	 * <i>native declaration : stdio.h:1609</i><br>
	 * @deprecated use the safer methods {@link #tmpnam_r(java.nio.ByteBuffer)} and {@link #tmpnam_r(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	Pointer tmpnam_r(Pointer __s);
	/**
	 * This is the reentrant variant of `tmpnam'.  The only difference is<br>
	 * that it does not allow S to be NULL.<br>
	 * Original signature : <code>char* tmpnam_r(char*)</code><br>
	 * <i>native declaration : stdio.h:1609</i>
	 */
	Pointer tmpnam_r(ByteBuffer __s);
	/**
	 * Generate a unique temporary filename using up to five characters of PFX<br>
	 * if it is not NULL.  The directory to put this file in is searched for<br>
	 * as follows: First the environment variable "TMPDIR" is checked.<br>
	 * If it contains the name of a writable directory, that directory is used.<br>
	 * If not and if DIR is not NULL, that value is checked.  If that fails,<br>
	 * P_tmpdir is tried and finally "/tmp".  The storage for the filename<br>
	 * is allocated by `malloc'.<br>
	 * Original signature : <code>char* tempnam(const char*, const char*)</code><br>
	 * <i>native declaration : stdio.h:1620</i><br>
	 * @deprecated use the safer methods {@link #tempnam(java.lang.String, java.lang.String)} and {@link #tempnam(com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	Pointer tempnam(Pointer __dir, Pointer __pfx);
	/**
	 * Generate a unique temporary filename using up to five characters of PFX<br>
	 * if it is not NULL.  The directory to put this file in is searched for<br>
	 * as follows: First the environment variable "TMPDIR" is checked.<br>
	 * If it contains the name of a writable directory, that directory is used.<br>
	 * If not and if DIR is not NULL, that value is checked.  If that fails,<br>
	 * P_tmpdir is tried and finally "/tmp".  The storage for the filename<br>
	 * is allocated by `malloc'.<br>
	 * Original signature : <code>char* tempnam(const char*, const char*)</code><br>
	 * <i>native declaration : stdio.h:1620</i>
	 */
	Pointer tempnam(String __dir, String __pfx);
	/**
	 * Close STREAM.<br>
	 * This function is a possible cancellation point and therefore not<br>
	 * marked with __THROW.<br>
	 * Original signature : <code>int fclose(FILE*)</code><br>
	 * <i>native declaration : stdio.h:1627</i>
	 */
	int fclose(_IO_FILE __stream);
	/**
	 * Flush STREAM, or all streams if STREAM is NULL.<br>
	 * This function is a possible cancellation point and therefore not<br>
	 * marked with __THROW.<br>
	 * Original signature : <code>int fflush(FILE*)</code><br>
	 * <i>native declaration : stdio.h:1634</i>
	 */
	int fflush(_IO_FILE __stream);
	/**
	 * Faster versions when locking is not required.<br>
	 * This function is not part of POSIX and therefore no official<br>
	 * cancellation point.  But due to similarity with an POSIX interface<br>
	 * or due to the implementation it is a cancellation point and<br>
	 * therefore not marked with __THROW.<br>
	 * Original signature : <code>int fflush_unlocked(FILE*)</code><br>
	 * <i>native declaration : stdio.h:1643</i>
	 */
	int fflush_unlocked(_IO_FILE __stream);
	/**
	 * Open a file and create a new stream for it.<br>
	 * This function is a possible cancellation point and therefore not<br>
	 * marked with __THROW.<br>
	 * Original signature : <code>FILE* fopen(const char*, const char*)</code><br>
	 * <i>native declaration : stdio.h:1650</i><br>
	 * @deprecated use the safer methods {@link #fopen(java.lang.String, java.lang.String)} and {@link #fopen(com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	_IO_FILE fopen(Pointer __filename, Pointer __modes);
	/**
	 * Open a file and create a new stream for it.<br>
	 * This function is a possible cancellation point and therefore not<br>
	 * marked with __THROW.<br>
	 * Original signature : <code>FILE* fopen(const char*, const char*)</code><br>
	 * <i>native declaration : stdio.h:1650</i>
	 */
	_IO_FILE fopen(String __filename, String __modes);
	/**
	 * Open a file, replacing an existing stream with it.<br>
	 * This function is a possible cancellation point and therefore not<br>
	 * marked with __THROW.<br>
	 * Original signature : <code>FILE* freopen(const char*, const char*, FILE*)</code><br>
	 * <i>native declaration : stdio.h:1657</i><br>
	 * @deprecated use the safer methods {@link #freopen(java.lang.String, java.lang.String, c._IO_FILE)} and {@link #freopen(com.sun.jna.Pointer, com.sun.jna.Pointer, c._IO_FILE)} instead
	 */
	@Deprecated 
	_IO_FILE freopen(Pointer __filename, Pointer __modes, _IO_FILE __stream);
	/**
	 * Open a file, replacing an existing stream with it.<br>
	 * This function is a possible cancellation point and therefore not<br>
	 * marked with __THROW.<br>
	 * Original signature : <code>FILE* freopen(const char*, const char*, FILE*)</code><br>
	 * <i>native declaration : stdio.h:1657</i>
	 */
	_IO_FILE freopen(String __filename, String __modes, _IO_FILE __stream);
	/**
	 * Create a new stream that refers to an existing system file descriptor.<br>
	 * Original signature : <code>FILE* fdopen(int, const char*)</code><br>
	 * <i>native declaration : stdio.h:1662</i><br>
	 * @deprecated use the safer methods {@link #fdopen(int, java.lang.String)} and {@link #fdopen(int, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	_IO_FILE fdopen(int __fd, Pointer __modes);
	/**
	 * Create a new stream that refers to an existing system file descriptor.<br>
	 * Original signature : <code>FILE* fdopen(int, const char*)</code><br>
	 * <i>native declaration : stdio.h:1662</i>
	 */
	_IO_FILE fdopen(int __fd, String __modes);
	/**
	 * Create a new stream that refers to a memory buffer.<br>
	 * Original signature : <code>FILE* fmemopen(void*, size_t, const char*)</code><br>
	 * <i>native declaration : stdio.h:1667</i><br>
	 * @deprecated use the safer methods {@link #fmemopen(com.sun.jna.Pointer, com.sun.jna.NativeLong, java.lang.String)} and {@link #fmemopen(com.sun.jna.Pointer, com.sun.jna.NativeLong, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	_IO_FILE fmemopen(Pointer __s, NativeLong __len, Pointer __modes);
	/**
	 * Create a new stream that refers to a memory buffer.<br>
	 * Original signature : <code>FILE* fmemopen(void*, size_t, const char*)</code><br>
	 * <i>native declaration : stdio.h:1667</i>
	 */
	_IO_FILE fmemopen(Pointer __s, NativeLong __len, String __modes);
	/**
	 * Open a stream that writes into a malloc'd buffer that is expanded as<br>
	 * necessary.  *BUFLOC and *SIZELOC are updated with the buffer's location<br>
	 * and the number of characters written on fflush or fclose.<br>
	 * Original signature : <code>FILE* open_memstream(char**, size_t*)</code><br>
	 * <i>native declaration : stdio.h:1674</i>
	 */
	_IO_FILE open_memstream(PointerByReference __bufloc, NativeLongByReference __sizeloc);
	/**
	 * If BUF is NULL, make STREAM unbuffered.<br>
	 * Else make it use buffer BUF, of size BUFSIZ.<br>
	 * Original signature : <code>void setbuf(FILE*, char*)</code><br>
	 * <i>native declaration : stdio.h:1680</i><br>
	 * @deprecated use the safer methods {@link #setbuf(c._IO_FILE, java.nio.ByteBuffer)} and {@link #setbuf(c._IO_FILE, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	void setbuf(_IO_FILE __stream, Pointer __buf);
	/**
	 * If BUF is NULL, make STREAM unbuffered.<br>
	 * Else make it use buffer BUF, of size BUFSIZ.<br>
	 * Original signature : <code>void setbuf(FILE*, char*)</code><br>
	 * <i>native declaration : stdio.h:1680</i>
	 */
	void setbuf(_IO_FILE __stream, ByteBuffer __buf);
	/**
	 * Make STREAM use buffering mode MODE.<br>
	 * If BUF is not NULL, use N bytes of it for buffering;<br>
	 * else allocate an internal buffer N bytes long.<br>
	 * Original signature : <code>int setvbuf(FILE*, char*, int, size_t)</code><br>
	 * <i>native declaration : stdio.h:1687</i><br>
	 * @deprecated use the safer methods {@link #setvbuf(c._IO_FILE, java.nio.ByteBuffer, int, com.sun.jna.NativeLong)} and {@link #setvbuf(c._IO_FILE, com.sun.jna.Pointer, int, com.sun.jna.NativeLong)} instead
	 */
	@Deprecated 
	int setvbuf(_IO_FILE __stream, Pointer __buf, int __modes, NativeLong __n);
	/**
	 * Make STREAM use buffering mode MODE.<br>
	 * If BUF is not NULL, use N bytes of it for buffering;<br>
	 * else allocate an internal buffer N bytes long.<br>
	 * Original signature : <code>int setvbuf(FILE*, char*, int, size_t)</code><br>
	 * <i>native declaration : stdio.h:1687</i>
	 */
	int setvbuf(_IO_FILE __stream, ByteBuffer __buf, int __modes, NativeLong __n);
	/**
	 * If BUF is NULL, make STREAM unbuffered.<br>
	 * Else make it use SIZE bytes of BUF for buffering.<br>
	 * Original signature : <code>void setbuffer(FILE*, char*, size_t)</code><br>
	 * <i>native declaration : stdio.h:1693</i><br>
	 * @deprecated use the safer methods {@link #setbuffer(c._IO_FILE, java.nio.ByteBuffer, com.sun.jna.NativeLong)} and {@link #setbuffer(c._IO_FILE, com.sun.jna.Pointer, com.sun.jna.NativeLong)} instead
	 */
	@Deprecated 
	void setbuffer(_IO_FILE __stream, Pointer __buf, NativeLong __size);
	/**
	 * If BUF is NULL, make STREAM unbuffered.<br>
	 * Else make it use SIZE bytes of BUF for buffering.<br>
	 * Original signature : <code>void setbuffer(FILE*, char*, size_t)</code><br>
	 * <i>native declaration : stdio.h:1693</i>
	 */
	void setbuffer(_IO_FILE __stream, ByteBuffer __buf, NativeLong __size);
	/**
	 * Make STREAM line-buffered.<br>
	 * Original signature : <code>void setlinebuf(FILE*)</code><br>
	 * <i>native declaration : stdio.h:1698</i>
	 */
	void setlinebuf(_IO_FILE __stream);
	/**
	 * Write formatted output to STREAM.<br>
	 * This function is a possible cancellation point and therefore not<br>
	 * marked with __THROW.<br>
	 * Original signature : <code>int fprintf(FILE*, const char*, null)</code><br>
	 * <i>native declaration : stdio.h:1705</i><br>
	 * @deprecated use the safer methods {@link #fprintf(c._IO_FILE, java.lang.String, java.lang.Object)} and {@link #fprintf(c._IO_FILE, com.sun.jna.Pointer, java.lang.Object)} instead
	 */
	@Deprecated 
	int fprintf(_IO_FILE __stream, Pointer __format, Object... varargs);
	/**
	 * Write formatted output to STREAM.<br>
	 * This function is a possible cancellation point and therefore not<br>
	 * marked with __THROW.<br>
	 * Original signature : <code>int fprintf(FILE*, const char*, null)</code><br>
	 * <i>native declaration : stdio.h:1705</i>
	 */
	int fprintf(_IO_FILE __stream, String __format, Object... varargs);
	/**
	 * Write formatted output to stdout.<br>
	 * This function is a possible cancellation point and therefore not<br>
	 * marked with __THROW.<br>
	 * Original signature : <code>int printf(const char*, null)</code><br>
	 * <i>native declaration : stdio.h:1712</i><br>
	 * @deprecated use the safer methods {@link #printf(java.lang.String, java.lang.Object)} and {@link #printf(com.sun.jna.Pointer, java.lang.Object)} instead
	 */
	@Deprecated 
	int printf(Pointer __format, Object... varargs);
	/**
	 * Write formatted output to stdout.<br>
	 * This function is a possible cancellation point and therefore not<br>
	 * marked with __THROW.<br>
	 * Original signature : <code>int printf(const char*, null)</code><br>
	 * <i>native declaration : stdio.h:1712</i>
	 */
	int printf(String __format, Object... varargs);
	/**
	 * Write formatted output to S.<br>
	 * Original signature : <code>int sprintf(char*, const char*, null)</code><br>
	 * <i>native declaration : stdio.h:1717</i><br>
	 * @deprecated use the safer methods {@link #sprintf(java.nio.ByteBuffer, java.lang.String, java.lang.Object)} and {@link #sprintf(com.sun.jna.Pointer, com.sun.jna.Pointer, java.lang.Object)} instead
	 */
	@Deprecated 
	int sprintf(Pointer __s, Pointer __format, Object... varargs);
	/**
	 * Write formatted output to S.<br>
	 * Original signature : <code>int sprintf(char*, const char*, null)</code><br>
	 * <i>native declaration : stdio.h:1717</i>
	 */
	int sprintf(ByteBuffer __s, String __format, Object... varargs);
	/**
	 * Write formatted output to S from argument list ARG.<br>
	 * This function is a possible cancellation point and therefore not<br>
	 * marked with __THROW.<br>
	 * Original signature : <code>int vfprintf(FILE*, const char*, __gnuc_va_list)</code><br>
	 * <i>native declaration : stdio.h:1724</i><br>
	 * @deprecated use the safer methods {@link #vfprintf(c._IO_FILE, java.lang.String, c.CLibrary.__gnuc_va_list)} and {@link #vfprintf(c._IO_FILE, com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int vfprintf(_IO_FILE __s, Pointer __format, Pointer __arg);
	/**
	 * Write formatted output to S from argument list ARG.<br>
	 * This function is a possible cancellation point and therefore not<br>
	 * marked with __THROW.<br>
	 * Original signature : <code>int vfprintf(FILE*, const char*, __gnuc_va_list)</code><br>
	 * <i>native declaration : stdio.h:1724</i>
	 */
	int vfprintf(_IO_FILE __s, String __format, CLibrary.__gnuc_va_list __arg);
	/**
	 * Write formatted output to stdout from argument list ARG.<br>
	 * This function is a possible cancellation point and therefore not<br>
	 * marked with __THROW.<br>
	 * Original signature : <code>int vprintf(const char*, __gnuc_va_list)</code><br>
	 * <i>native declaration : stdio.h:1731</i><br>
	 * @deprecated use the safer methods {@link #vprintf(java.lang.String, c.CLibrary.__gnuc_va_list)} and {@link #vprintf(com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int vprintf(Pointer __format, Pointer __arg);
	/**
	 * Write formatted output to stdout from argument list ARG.<br>
	 * This function is a possible cancellation point and therefore not<br>
	 * marked with __THROW.<br>
	 * Original signature : <code>int vprintf(const char*, __gnuc_va_list)</code><br>
	 * <i>native declaration : stdio.h:1731</i>
	 */
	int vprintf(String __format, CLibrary.__gnuc_va_list __arg);
	/**
	 * Write formatted output to S from argument list ARG.<br>
	 * Original signature : <code>int vsprintf(char*, const char*, __gnuc_va_list)</code><br>
	 * <i>native declaration : stdio.h:1736</i><br>
	 * @deprecated use the safer methods {@link #vsprintf(java.nio.ByteBuffer, java.lang.String, c.CLibrary.__gnuc_va_list)} and {@link #vsprintf(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int vsprintf(Pointer __s, Pointer __format, Pointer __arg);
	/**
	 * Write formatted output to S from argument list ARG.<br>
	 * Original signature : <code>int vsprintf(char*, const char*, __gnuc_va_list)</code><br>
	 * <i>native declaration : stdio.h:1736</i>
	 */
	int vsprintf(ByteBuffer __s, String __format, CLibrary.__gnuc_va_list __arg);
	/**
	 * Maximum chars of output to write in MAXLEN.<br>
	 * Original signature : <code>int snprintf(char*, size_t, const char*, null)</code><br>
	 * <i>native declaration : stdio.h:1741</i><br>
	 * @deprecated use the safer methods {@link #snprintf(java.nio.ByteBuffer, com.sun.jna.NativeLong, java.lang.String, java.lang.Object)} and {@link #snprintf(com.sun.jna.Pointer, com.sun.jna.NativeLong, com.sun.jna.Pointer, java.lang.Object)} instead
	 */
	@Deprecated 
	int snprintf(Pointer __s, NativeLong __maxlen, Pointer __format, Object... varargs);
	/**
	 * Maximum chars of output to write in MAXLEN.<br>
	 * Original signature : <code>int snprintf(char*, size_t, const char*, null)</code><br>
	 * <i>native declaration : stdio.h:1741</i>
	 */
	int snprintf(ByteBuffer __s, NativeLong __maxlen, String __format, Object... varargs);
	/**
	 * Original signature : <code>int vsnprintf(char*, size_t, const char*, __gnuc_va_list)</code><br>
	 * <i>native declaration : stdio.h:1743</i><br>
	 * @deprecated use the safer methods {@link #vsnprintf(java.nio.ByteBuffer, com.sun.jna.NativeLong, java.lang.String, c.CLibrary.__gnuc_va_list)} and {@link #vsnprintf(com.sun.jna.Pointer, com.sun.jna.NativeLong, com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int vsnprintf(Pointer __s, NativeLong __maxlen, Pointer __format, Pointer __arg);
	/**
	 * Original signature : <code>int vsnprintf(char*, size_t, const char*, __gnuc_va_list)</code><br>
	 * <i>native declaration : stdio.h:1743</i>
	 */
	int vsnprintf(ByteBuffer __s, NativeLong __maxlen, String __format, CLibrary.__gnuc_va_list __arg);
	/**
	 * Write formatted output to a file descriptor.<br>
	 * Original signature : <code>int vdprintf(int, const char*, __gnuc_va_list)</code><br>
	 * <i>native declaration : stdio.h:1748</i><br>
	 * @deprecated use the safer methods {@link #vdprintf(int, java.lang.String, c.CLibrary.__gnuc_va_list)} and {@link #vdprintf(int, com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int vdprintf(int __fd, Pointer __fmt, Pointer __arg);
	/**
	 * Write formatted output to a file descriptor.<br>
	 * Original signature : <code>int vdprintf(int, const char*, __gnuc_va_list)</code><br>
	 * <i>native declaration : stdio.h:1748</i>
	 */
	int vdprintf(int __fd, String __fmt, CLibrary.__gnuc_va_list __arg);
	/**
	 * Original signature : <code>int dprintf(int, const char*, null)</code><br>
	 * <i>native declaration : stdio.h:1750</i><br>
	 * @deprecated use the safer methods {@link #dprintf(int, java.lang.String, java.lang.Object)} and {@link #dprintf(int, com.sun.jna.Pointer, java.lang.Object)} instead
	 */
	@Deprecated 
	int dprintf(int __fd, Pointer __fmt, Object... varargs);
	/**
	 * Original signature : <code>int dprintf(int, const char*, null)</code><br>
	 * <i>native declaration : stdio.h:1750</i>
	 */
	int dprintf(int __fd, String __fmt, Object... varargs);
	/**
	 * Read formatted input from STREAM.<br>
	 * This function is a possible cancellation point and therefore not<br>
	 * marked with __THROW.<br>
	 * Original signature : <code>int fscanf(FILE*, const char*, null)</code><br>
	 * <i>native declaration : stdio.h:1757</i><br>
	 * @deprecated use the safer methods {@link #fscanf(c._IO_FILE, java.lang.String, java.lang.Object)} and {@link #fscanf(c._IO_FILE, com.sun.jna.Pointer, java.lang.Object)} instead
	 */
	@Deprecated 
	int fscanf(_IO_FILE __stream, Pointer __format, Object... varargs);
	/**
	 * Read formatted input from STREAM.<br>
	 * This function is a possible cancellation point and therefore not<br>
	 * marked with __THROW.<br>
	 * Original signature : <code>int fscanf(FILE*, const char*, null)</code><br>
	 * <i>native declaration : stdio.h:1757</i>
	 */
	int fscanf(_IO_FILE __stream, String __format, Object... varargs);
	/**
	 * Read formatted input from stdin.<br>
	 * This function is a possible cancellation point and therefore not<br>
	 * marked with __THROW.<br>
	 * Original signature : <code>int scanf(const char*, null)</code><br>
	 * <i>native declaration : stdio.h:1764</i><br>
	 * @deprecated use the safer methods {@link #scanf(java.lang.String, java.lang.Object)} and {@link #scanf(com.sun.jna.Pointer, java.lang.Object)} instead
	 */
	@Deprecated 
	int scanf(Pointer __format, Object... varargs);
	/**
	 * Read formatted input from stdin.<br>
	 * This function is a possible cancellation point and therefore not<br>
	 * marked with __THROW.<br>
	 * Original signature : <code>int scanf(const char*, null)</code><br>
	 * <i>native declaration : stdio.h:1764</i>
	 */
	int scanf(String __format, Object... varargs);
	/**
	 * Read formatted input from S.<br>
	 * Original signature : <code>int sscanf(const char*, const char*, null)</code><br>
	 * <i>native declaration : stdio.h:1769</i><br>
	 * @deprecated use the safer methods {@link #sscanf(java.lang.String, java.lang.String, java.lang.Object)} and {@link #sscanf(com.sun.jna.Pointer, com.sun.jna.Pointer, java.lang.Object)} instead
	 */
	@Deprecated 
	int sscanf(Pointer __s, Pointer __format, Object... varargs);
	/**
	 * Read formatted input from S.<br>
	 * Original signature : <code>int sscanf(const char*, const char*, null)</code><br>
	 * <i>native declaration : stdio.h:1769</i>
	 */
	int sscanf(String __s, String __format, Object... varargs);
	/**
	 * Original signature : <code>int __isoc99_fscanf(FILE*, const char*, null)</code><br>
	 * <i>native declaration : stdio.h:1771</i><br>
	 * @deprecated use the safer methods {@link #__isoc99_fscanf(c._IO_FILE, java.lang.String, java.lang.Object)} and {@link #__isoc99_fscanf(c._IO_FILE, com.sun.jna.Pointer, java.lang.Object)} instead
	 */
	@Deprecated 
	int __isoc99_fscanf(_IO_FILE __stream, Pointer __format, Object... varargs);
	/**
	 * Original signature : <code>int __isoc99_fscanf(FILE*, const char*, null)</code><br>
	 * <i>native declaration : stdio.h:1771</i>
	 */
	int __isoc99_fscanf(_IO_FILE __stream, String __format, Object... varargs);
	/**
	 * Original signature : <code>int __isoc99_scanf(const char*, null)</code><br>
	 * <i>native declaration : stdio.h:1773</i><br>
	 * @deprecated use the safer methods {@link #__isoc99_scanf(java.lang.String, java.lang.Object)} and {@link #__isoc99_scanf(com.sun.jna.Pointer, java.lang.Object)} instead
	 */
	@Deprecated 
	int __isoc99_scanf(Pointer __format, Object... varargs);
	/**
	 * Original signature : <code>int __isoc99_scanf(const char*, null)</code><br>
	 * <i>native declaration : stdio.h:1773</i>
	 */
	int __isoc99_scanf(String __format, Object... varargs);
	/**
	 * Original signature : <code>int __isoc99_sscanf(const char*, const char*, null)</code><br>
	 * <i>native declaration : stdio.h:1775</i><br>
	 * @deprecated use the safer methods {@link #__isoc99_sscanf(java.lang.String, java.lang.String, java.lang.Object)} and {@link #__isoc99_sscanf(com.sun.jna.Pointer, com.sun.jna.Pointer, java.lang.Object)} instead
	 */
	@Deprecated 
	int __isoc99_sscanf(Pointer __s, Pointer __format, Object... varargs);
	/**
	 * Original signature : <code>int __isoc99_sscanf(const char*, const char*, null)</code><br>
	 * <i>native declaration : stdio.h:1775</i>
	 */
	int __isoc99_sscanf(String __s, String __format, Object... varargs);
	/**
	 * Read formatted input from S into argument list ARG.<br>
	 * This function is a possible cancellation point and therefore not<br>
	 * marked with __THROW.<br>
	 * Original signature : <code>int vfscanf(FILE*, const char*, __gnuc_va_list)</code><br>
	 * <i>native declaration : stdio.h:1782</i><br>
	 * @deprecated use the safer methods {@link #vfscanf(c._IO_FILE, java.lang.String, c.CLibrary.__gnuc_va_list)} and {@link #vfscanf(c._IO_FILE, com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int vfscanf(_IO_FILE __s, Pointer __format, Pointer __arg);
	/**
	 * Read formatted input from S into argument list ARG.<br>
	 * This function is a possible cancellation point and therefore not<br>
	 * marked with __THROW.<br>
	 * Original signature : <code>int vfscanf(FILE*, const char*, __gnuc_va_list)</code><br>
	 * <i>native declaration : stdio.h:1782</i>
	 */
	int vfscanf(_IO_FILE __s, String __format, CLibrary.__gnuc_va_list __arg);
	/**
	 * Read formatted input from stdin into argument list ARG.<br>
	 * This function is a possible cancellation point and therefore not<br>
	 * marked with __THROW.<br>
	 * Original signature : <code>int vscanf(const char*, __gnuc_va_list)</code><br>
	 * <i>native declaration : stdio.h:1789</i><br>
	 * @deprecated use the safer methods {@link #vscanf(java.lang.String, c.CLibrary.__gnuc_va_list)} and {@link #vscanf(com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int vscanf(Pointer __format, Pointer __arg);
	/**
	 * Read formatted input from stdin into argument list ARG.<br>
	 * This function is a possible cancellation point and therefore not<br>
	 * marked with __THROW.<br>
	 * Original signature : <code>int vscanf(const char*, __gnuc_va_list)</code><br>
	 * <i>native declaration : stdio.h:1789</i>
	 */
	int vscanf(String __format, CLibrary.__gnuc_va_list __arg);
	/**
	 * Read formatted input from S into argument list ARG.<br>
	 * Original signature : <code>int vsscanf(const char*, const char*, __gnuc_va_list)</code><br>
	 * <i>native declaration : stdio.h:1794</i><br>
	 * @deprecated use the safer methods {@link #vsscanf(java.lang.String, java.lang.String, c.CLibrary.__gnuc_va_list)} and {@link #vsscanf(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int vsscanf(Pointer __s, Pointer __format, Pointer __arg);
	/**
	 * Read formatted input from S into argument list ARG.<br>
	 * Original signature : <code>int vsscanf(const char*, const char*, __gnuc_va_list)</code><br>
	 * <i>native declaration : stdio.h:1794</i>
	 */
	int vsscanf(String __s, String __format, CLibrary.__gnuc_va_list __arg);
	/**
	 * Original signature : <code>int __isoc99_vfscanf(FILE*, const char*, __gnuc_va_list)</code><br>
	 * <i>native declaration : stdio.h:1796</i><br>
	 * @deprecated use the safer methods {@link #__isoc99_vfscanf(c._IO_FILE, java.lang.String, c.CLibrary.__gnuc_va_list)} and {@link #__isoc99_vfscanf(c._IO_FILE, com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int __isoc99_vfscanf(_IO_FILE __s, Pointer __format, Pointer __arg);
	/**
	 * Original signature : <code>int __isoc99_vfscanf(FILE*, const char*, __gnuc_va_list)</code><br>
	 * <i>native declaration : stdio.h:1796</i>
	 */
	int __isoc99_vfscanf(_IO_FILE __s, String __format, CLibrary.__gnuc_va_list __arg);
	/**
	 * Original signature : <code>int __isoc99_vscanf(const char*, __gnuc_va_list)</code><br>
	 * <i>native declaration : stdio.h:1798</i><br>
	 * @deprecated use the safer methods {@link #__isoc99_vscanf(java.lang.String, c.CLibrary.__gnuc_va_list)} and {@link #__isoc99_vscanf(com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int __isoc99_vscanf(Pointer __format, Pointer __arg);
	/**
	 * Original signature : <code>int __isoc99_vscanf(const char*, __gnuc_va_list)</code><br>
	 * <i>native declaration : stdio.h:1798</i>
	 */
	int __isoc99_vscanf(String __format, CLibrary.__gnuc_va_list __arg);
	/**
	 * Original signature : <code>int __isoc99_vsscanf(const char*, const char*, __gnuc_va_list)</code><br>
	 * <i>native declaration : stdio.h:1800</i><br>
	 * @deprecated use the safer methods {@link #__isoc99_vsscanf(java.lang.String, java.lang.String, c.CLibrary.__gnuc_va_list)} and {@link #__isoc99_vsscanf(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int __isoc99_vsscanf(Pointer __s, Pointer __format, Pointer __arg);
	/**
	 * Original signature : <code>int __isoc99_vsscanf(const char*, const char*, __gnuc_va_list)</code><br>
	 * <i>native declaration : stdio.h:1800</i>
	 */
	int __isoc99_vsscanf(String __s, String __format, CLibrary.__gnuc_va_list __arg);
	/**
	 * Read a character from STREAM.<br>
	 * These functions are possible cancellation points and therefore not<br>
	 * marked with __THROW.<br>
	 * Original signature : <code>int fgetc(FILE*)</code><br>
	 * <i>native declaration : stdio.h:1807</i>
	 */
	int fgetc(_IO_FILE __stream);
	/**
	 * Original signature : <code>int getc(FILE*)</code><br>
	 * <i>native declaration : stdio.h:1809</i>
	 */
	int getc(_IO_FILE __stream);
	/**
	 * Read a character from stdin.<br>
	 * This function is a possible cancellation point and therefore not<br>
	 * marked with __THROW.<br>
	 * Original signature : <code>int getchar()</code><br>
	 * <i>native declaration : stdio.h:1816</i>
	 */
	int getchar();
	/**
	 * These are defined in POSIX.1:1996.<br>
	 * These functions are possible cancellation points and therefore not<br>
	 * marked with __THROW.<br>
	 * Original signature : <code>int getc_unlocked(FILE*)</code><br>
	 * <i>native declaration : stdio.h:1823</i>
	 */
	int getc_unlocked(_IO_FILE __stream);
	/**
	 * Original signature : <code>int getchar_unlocked()</code><br>
	 * <i>native declaration : stdio.h:1825</i>
	 */
	int getchar_unlocked();
	/**
	 * Faster version when locking is not necessary.<br>
	 * This function is not part of POSIX and therefore no official<br>
	 * cancellation point.  But due to similarity with an POSIX interface<br>
	 * or due to the implementation it is a cancellation point and<br>
	 * therefore not marked with __THROW.<br>
	 * Original signature : <code>int fgetc_unlocked(FILE*)</code><br>
	 * <i>native declaration : stdio.h:1834</i>
	 */
	int fgetc_unlocked(_IO_FILE __stream);
	/**
	 * Write a character to STREAM.<br>
	 * These functions are possible cancellation points and therefore not<br>
	 * marked with __THROW.<br>
	 * These functions is a possible cancellation point and therefore not<br>
	 * marked with __THROW.<br>
	 * Original signature : <code>int fputc(int, FILE*)</code><br>
	 * <i>native declaration : stdio.h:1843</i>
	 */
	int fputc(int __c, _IO_FILE __stream);
	/**
	 * Original signature : <code>int putc(int, FILE*)</code><br>
	 * <i>native declaration : stdio.h:1845</i>
	 */
	int putc(int __c, _IO_FILE __stream);
	/**
	 * Write a character to stdout.<br>
	 * This function is a possible cancellation point and therefore not<br>
	 * marked with __THROW.<br>
	 * Original signature : <code>int putchar(int)</code><br>
	 * <i>native declaration : stdio.h:1852</i>
	 */
	int putchar(int __c);
	/**
	 * Faster version when locking is not necessary.<br>
	 * This function is not part of POSIX and therefore no official<br>
	 * cancellation point.  But due to similarity with an POSIX interface<br>
	 * or due to the implementation it is a cancellation point and<br>
	 * therefore not marked with __THROW.<br>
	 * Original signature : <code>int fputc_unlocked(int, FILE*)</code><br>
	 * <i>native declaration : stdio.h:1861</i>
	 */
	int fputc_unlocked(int __c, _IO_FILE __stream);
	/**
	 * These are defined in POSIX.1:1996.<br>
	 * These functions are possible cancellation points and therefore not<br>
	 * marked with __THROW.<br>
	 * Original signature : <code>int putc_unlocked(int, FILE*)</code><br>
	 * <i>native declaration : stdio.h:1868</i>
	 */
	int putc_unlocked(int __c, _IO_FILE __stream);
	/**
	 * Original signature : <code>int putchar_unlocked(int)</code><br>
	 * <i>native declaration : stdio.h:1870</i>
	 */
	int putchar_unlocked(int __c);
	/**
	 * Get a word (int) from STREAM.<br>
	 * Original signature : <code>int getw(FILE*)</code><br>
	 * <i>native declaration : stdio.h:1875</i>
	 */
	int getw(_IO_FILE __stream);
	/**
	 * Write a word (int) to STREAM.<br>
	 * Original signature : <code>int putw(int, FILE*)</code><br>
	 * <i>native declaration : stdio.h:1880</i>
	 */
	int putw(int __w, _IO_FILE __stream);
	/**
	 * Get a newline-terminated string of finite length from STREAM.<br>
	 * This function is a possible cancellation point and therefore not<br>
	 * marked with __THROW.<br>
	 * Original signature : <code>char* fgets(char*, int, FILE*)</code><br>
	 * <i>native declaration : stdio.h:1887</i><br>
	 * @deprecated use the safer methods {@link #fgets(java.nio.ByteBuffer, int, c._IO_FILE)} and {@link #fgets(com.sun.jna.Pointer, int, c._IO_FILE)} instead
	 */
	@Deprecated 
	Pointer fgets(Pointer __s, int __n, _IO_FILE __stream);
	/**
	 * Get a newline-terminated string of finite length from STREAM.<br>
	 * This function is a possible cancellation point and therefore not<br>
	 * marked with __THROW.<br>
	 * Original signature : <code>char* fgets(char*, int, FILE*)</code><br>
	 * <i>native declaration : stdio.h:1887</i>
	 */
	Pointer fgets(ByteBuffer __s, int __n, _IO_FILE __stream);
	/**
	 * Get a newline-terminated string from stdin, removing the newline.<br>
	 * DO NOT USE THIS FUNCTION!!  There is no limit on how much it will read.<br>
	 * The function has been officially removed in ISO C11.  This opportunity<br>
	 * is used to also remove it from the GNU feature list.  It is now only<br>
	 * available when explicitly using an old ISO C, Unix, or POSIX standard.<br>
	 * GCC defines _GNU_SOURCE when building C++ code and the function is still<br>
	 * in C++11, so it is also available for C++.<br>
	 * This function is a possible cancellation point and therefore not<br>
	 * marked with __THROW.<br>
	 * Original signature : <code>char* gets(char*)</code><br>
	 * <i>native declaration : stdio.h:1900</i><br>
	 * @deprecated use the safer methods {@link #gets(java.nio.ByteBuffer)} and {@link #gets(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	Pointer gets(Pointer __s);
	/**
	 * Get a newline-terminated string from stdin, removing the newline.<br>
	 * DO NOT USE THIS FUNCTION!!  There is no limit on how much it will read.<br>
	 * The function has been officially removed in ISO C11.  This opportunity<br>
	 * is used to also remove it from the GNU feature list.  It is now only<br>
	 * available when explicitly using an old ISO C, Unix, or POSIX standard.<br>
	 * GCC defines _GNU_SOURCE when building C++ code and the function is still<br>
	 * in C++11, so it is also available for C++.<br>
	 * This function is a possible cancellation point and therefore not<br>
	 * marked with __THROW.<br>
	 * Original signature : <code>char* gets(char*)</code><br>
	 * <i>native declaration : stdio.h:1900</i>
	 */
	Pointer gets(ByteBuffer __s);
	/**
	 * Read up to (and including) a DELIMITER from STREAM into *LINEPTR<br>
	 * (and null-terminate it). *LINEPTR is a pointer returned from malloc (or<br>
	 * NULL), pointing to *N characters of space.  It is realloc'd as<br>
	 * necessary.  Returns the number of characters read (not including the<br>
	 * null terminator), or -1 on error or EOF.<br>
	 * These functions are not part of POSIX and therefore no official<br>
	 * cancellation point.  But due to similarity with an POSIX interface<br>
	 * or due to the implementation they are cancellation points and<br>
	 * therefore not marked with __THROW.<br>
	 * Original signature : <code>__ssize_t __getdelim(char**, size_t*, int, FILE*)</code><br>
	 * <i>native declaration : stdio.h:1913</i>
	 */
	NativeLong __getdelim(PointerByReference __lineptr, NativeLongByReference __n, int __delimiter, _IO_FILE __stream);
	/**
	 * Original signature : <code>__ssize_t getdelim(char**, size_t*, int, FILE*)</code><br>
	 * <i>native declaration : stdio.h:1915</i>
	 */
	NativeLong getdelim(PointerByReference __lineptr, NativeLongByReference __n, int __delimiter, _IO_FILE __stream);
	/**
	 * Like `getdelim', but reads up to a newline.<br>
	 * This function is not part of POSIX and therefore no official<br>
	 * cancellation point.  But due to similarity with an POSIX interface<br>
	 * or due to the implementation it is a cancellation point and<br>
	 * therefore not marked with __THROW.<br>
	 * Original signature : <code>__ssize_t getline(char**, size_t*, FILE*)</code><br>
	 * <i>native declaration : stdio.h:1924</i>
	 */
	NativeLong getline(PointerByReference __lineptr, NativeLongByReference __n, _IO_FILE __stream);
	/**
	 * Write a string to STREAM.<br>
	 * This function is a possible cancellation point and therefore not<br>
	 * marked with __THROW.<br>
	 * Original signature : <code>int fputs(const char*, FILE*)</code><br>
	 * <i>native declaration : stdio.h:1931</i><br>
	 * @deprecated use the safer methods {@link #fputs(java.lang.String, c._IO_FILE)} and {@link #fputs(com.sun.jna.Pointer, c._IO_FILE)} instead
	 */
	@Deprecated 
	int fputs(Pointer __s, _IO_FILE __stream);
	/**
	 * Write a string to STREAM.<br>
	 * This function is a possible cancellation point and therefore not<br>
	 * marked with __THROW.<br>
	 * Original signature : <code>int fputs(const char*, FILE*)</code><br>
	 * <i>native declaration : stdio.h:1931</i>
	 */
	int fputs(String __s, _IO_FILE __stream);
	/**
	 * Write a string, followed by a newline, to stdout.<br>
	 * This function is a possible cancellation point and therefore not<br>
	 * marked with __THROW.<br>
	 * Original signature : <code>int puts(const char*)</code><br>
	 * <i>native declaration : stdio.h:1938</i><br>
	 * @deprecated use the safer methods {@link #puts(java.lang.String)} and {@link #puts(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int puts(Pointer __s);
	/**
	 * Write a string, followed by a newline, to stdout.<br>
	 * This function is a possible cancellation point and therefore not<br>
	 * marked with __THROW.<br>
	 * Original signature : <code>int puts(const char*)</code><br>
	 * <i>native declaration : stdio.h:1938</i>
	 */
	int puts(String __s);
	/**
	 * Push a character back onto the input buffer of STREAM.<br>
	 * This function is a possible cancellation point and therefore not<br>
	 * marked with __THROW.<br>
	 * Original signature : <code>int ungetc(int, FILE*)</code><br>
	 * <i>native declaration : stdio.h:1945</i>
	 */
	int ungetc(int __c, _IO_FILE __stream);
	/**
	 * Read chunks of generic data from STREAM.<br>
	 * This function is a possible cancellation point and therefore not<br>
	 * marked with __THROW.<br>
	 * Original signature : <code>size_t fread(void*, size_t, size_t, FILE*)</code><br>
	 * <i>native declaration : stdio.h:1952</i>
	 */
	NativeLong fread(Pointer __ptr, NativeLong __size, NativeLong __n, _IO_FILE __stream);
	/**
	 * Write chunks of generic data to STREAM.<br>
	 * This function is a possible cancellation point and therefore not<br>
	 * marked with __THROW.<br>
	 * Original signature : <code>size_t fwrite(const void*, size_t, size_t, FILE*)</code><br>
	 * <i>native declaration : stdio.h:1959</i>
	 */
	NativeLong fwrite(Pointer __ptr, NativeLong __size, NativeLong __n, _IO_FILE __s);
	/**
	 * Faster versions when locking is not necessary.<br>
	 * These functions are not part of POSIX and therefore no official<br>
	 * cancellation point.  But due to similarity with an POSIX interface<br>
	 * or due to the implementation they are cancellation points and<br>
	 * therefore not marked with __THROW.<br>
	 * Original signature : <code>size_t fread_unlocked(void*, size_t, size_t, FILE*)</code><br>
	 * <i>native declaration : stdio.h:1968</i>
	 */
	NativeLong fread_unlocked(Pointer __ptr, NativeLong __size, NativeLong __n, _IO_FILE __stream);
	/**
	 * Original signature : <code>size_t fwrite_unlocked(const void*, size_t, size_t, FILE*)</code><br>
	 * <i>native declaration : stdio.h:1970</i>
	 */
	NativeLong fwrite_unlocked(Pointer __ptr, NativeLong __size, NativeLong __n, _IO_FILE __stream);
	/**
	 * Seek to a certain position on STREAM.<br>
	 * This function is a possible cancellation point and therefore not<br>
	 * marked with __THROW.<br>
	 * Original signature : <code>int fseek(FILE*, long, int)</code><br>
	 * <i>native declaration : stdio.h:1977</i>
	 */
	int fseek(_IO_FILE __stream, NativeLong __off, int __whence);
	/**
	 * Return the current position of STREAM.<br>
	 * This function is a possible cancellation point and therefore not<br>
	 * marked with __THROW.<br>
	 * Original signature : <code>long ftell(FILE*)</code><br>
	 * <i>native declaration : stdio.h:1984</i>
	 */
	NativeLong ftell(_IO_FILE __stream);
	/**
	 * Rewind to the beginning of STREAM.<br>
	 * This function is a possible cancellation point and therefore not<br>
	 * marked with __THROW.<br>
	 * Original signature : <code>void rewind(FILE*)</code><br>
	 * <i>native declaration : stdio.h:1991</i>
	 */
	void rewind(_IO_FILE __stream);
	/**
	 * Seek to a certain position on STREAM.<br>
	 * This function is a possible cancellation point and therefore not<br>
	 * marked with __THROW.<br>
	 * Original signature : <code>int fseeko(FILE*, __off_t, int)</code><br>
	 * <i>native declaration : stdio.h:1998</i>
	 */
	int fseeko(_IO_FILE __stream, NativeLong __off, int __whence);
	/**
	 * Return the current position of STREAM.<br>
	 * This function is a possible cancellation point and therefore not<br>
	 * marked with __THROW.<br>
	 * Original signature : <code>__off_t ftello(FILE*)</code><br>
	 * <i>native declaration : stdio.h:2005</i>
	 */
	NativeLong ftello(_IO_FILE __stream);
	/**
	 * Get STREAM's position.<br>
	 * This function is a possible cancellation point and therefore not<br>
	 * marked with __THROW.<br>
	 * Original signature : <code>int fgetpos(FILE*, fpos_t*)</code><br>
	 * <i>native declaration : stdio.h:2012</i>
	 */
	int fgetpos(_IO_FILE __stream, _G_fpos_t __pos);
	/**
	 * Set STREAM's position.<br>
	 * This function is a possible cancellation point and therefore not<br>
	 * marked with __THROW.<br>
	 * Original signature : <code>int fsetpos(FILE*, const fpos_t*)</code><br>
	 * <i>native declaration : stdio.h:2019</i>
	 */
	int fsetpos(_IO_FILE __stream, _G_fpos_t __pos);
	/**
	 * Clear the error and EOF indicators for STREAM.<br>
	 * Original signature : <code>void clearerr(FILE*)</code><br>
	 * <i>native declaration : stdio.h:2024</i>
	 */
	void clearerr(_IO_FILE __stream);
	/**
	 * Return the EOF indicator for STREAM.<br>
	 * Original signature : <code>int feof(FILE*)</code><br>
	 * <i>native declaration : stdio.h:2029</i>
	 */
	int feof(_IO_FILE __stream);
	/**
	 * Return the error indicator for STREAM.<br>
	 * Original signature : <code>int ferror(FILE*)</code><br>
	 * <i>native declaration : stdio.h:2034</i>
	 */
	int ferror(_IO_FILE __stream);
	/**
	 * Faster versions when locking is not required.<br>
	 * Original signature : <code>void clearerr_unlocked(FILE*)</code><br>
	 * <i>native declaration : stdio.h:2039</i>
	 */
	void clearerr_unlocked(_IO_FILE __stream);
	/**
	 * Original signature : <code>int feof_unlocked(FILE*)</code><br>
	 * <i>native declaration : stdio.h:2041</i>
	 */
	int feof_unlocked(_IO_FILE __stream);
	/**
	 * Original signature : <code>int ferror_unlocked(FILE*)</code><br>
	 * <i>native declaration : stdio.h:2043</i>
	 */
	int ferror_unlocked(_IO_FILE __stream);
	/**
	 * Print a message describing the meaning of the value of errno.<br>
	 * This function is a possible cancellation point and therefore not<br>
	 * marked with __THROW.<br>
	 * Original signature : <code>void perror(const char*)</code><br>
	 * <i>native declaration : stdio.h:2050</i><br>
	 * @deprecated use the safer methods {@link #perror(java.lang.String)} and {@link #perror(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	void perror(Pointer __s);
	/**
	 * Print a message describing the meaning of the value of errno.<br>
	 * This function is a possible cancellation point and therefore not<br>
	 * marked with __THROW.<br>
	 * Original signature : <code>void perror(const char*)</code><br>
	 * <i>native declaration : stdio.h:2050</i>
	 */
	void perror(String __s);
	/**
	 * Return the system file descriptor for STREAM.<br>
	 * Original signature : <code>int fileno(FILE*)</code><br>
	 * <i>native declaration : stdio.h:2057</i>
	 */
	int fileno(_IO_FILE __stream);
	/**
	 * Faster version when locking is not required.<br>
	 * Original signature : <code>int fileno_unlocked(FILE*)</code><br>
	 * <i>native declaration : stdio.h:2062</i>
	 */
	int fileno_unlocked(_IO_FILE __stream);
	/**
	 * Create a new stream connected to a pipe running the given command.<br>
	 * This function is a possible cancellation point and therefore not<br>
	 * marked with __THROW.<br>
	 * Original signature : <code>FILE* popen(const char*, const char*)</code><br>
	 * <i>native declaration : stdio.h:2069</i><br>
	 * @deprecated use the safer methods {@link #popen(java.lang.String, java.lang.String)} and {@link #popen(com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	_IO_FILE popen(Pointer __command, Pointer __modes);
	/**
	 * Create a new stream connected to a pipe running the given command.<br>
	 * This function is a possible cancellation point and therefore not<br>
	 * marked with __THROW.<br>
	 * Original signature : <code>FILE* popen(const char*, const char*)</code><br>
	 * <i>native declaration : stdio.h:2069</i>
	 */
	_IO_FILE popen(String __command, String __modes);
	/**
	 * Close a stream opened by popen and return the status of its child.<br>
	 * This function is a possible cancellation point and therefore not<br>
	 * marked with __THROW.<br>
	 * Original signature : <code>int pclose(FILE*)</code><br>
	 * <i>native declaration : stdio.h:2076</i>
	 */
	int pclose(_IO_FILE __stream);
	/**
	 * Return the name of the controlling terminal.<br>
	 * Original signature : <code>char* ctermid(char*)</code><br>
	 * <i>native declaration : stdio.h:2081</i><br>
	 * @deprecated use the safer methods {@link #ctermid(java.nio.ByteBuffer)} and {@link #ctermid(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	Pointer ctermid(Pointer __s);
	/**
	 * Return the name of the controlling terminal.<br>
	 * Original signature : <code>char* ctermid(char*)</code><br>
	 * <i>native declaration : stdio.h:2081</i>
	 */
	Pointer ctermid(ByteBuffer __s);
	/**
	 * Acquire ownership of STREAM.<br>
	 * Original signature : <code>void flockfile(FILE*)</code><br>
	 * <i>native declaration : stdio.h:2086</i>
	 */
	void flockfile(_IO_FILE __stream);
	/**
	 * Try to acquire ownership of STREAM but do not block if it is not<br>
	 * possible.<br>
	 * Original signature : <code>int ftrylockfile(FILE*)</code><br>
	 * <i>native declaration : stdio.h:2092</i>
	 */
	int ftrylockfile(_IO_FILE __stream);
	/**
	 * Relinquish the ownership granted for STREAM.<br>
	 * Original signature : <code>void funlockfile(FILE*)</code><br>
	 * <i>native declaration : stdio.h:2097</i>
	 */
	void funlockfile(_IO_FILE __stream);
	/**
	 * Return the output baud rate stored in *TERMIOS_P.<br>
	 * Original signature : <code>speed_t cfgetospeed(termios*)</code><br>
	 * <i>native declaration : termios.h:2117</i>
	 */
	int cfgetospeed(termios __termios_p);
	/**
	 * Return the input baud rate stored in *TERMIOS_P.<br>
	 * Original signature : <code>speed_t cfgetispeed(termios*)</code><br>
	 * <i>native declaration : termios.h:2122</i>
	 */
	int cfgetispeed(termios __termios_p);
	/**
	 * Set the output baud rate stored in *TERMIOS_P to SPEED.<br>
	 * Original signature : <code>int cfsetospeed(termios*, speed_t)</code><br>
	 * <i>native declaration : termios.h:2127</i>
	 */
	int cfsetospeed(termios __termios_p, int __speed);
	/**
	 * Set the input baud rate stored in *TERMIOS_P to SPEED.<br>
	 * Original signature : <code>int cfsetispeed(termios*, speed_t)</code><br>
	 * <i>native declaration : termios.h:2132</i>
	 */
	int cfsetispeed(termios __termios_p, int __speed);
	/**
	 * Set both the input and output baud rates in *TERMIOS_OP to SPEED.<br>
	 * Original signature : <code>int cfsetspeed(termios*, speed_t)</code><br>
	 * <i>native declaration : termios.h:2137</i>
	 */
	int cfsetspeed(termios __termios_p, int __speed);
	/**
	 * Put the state of FD into *TERMIOS_P.<br>
	 * Original signature : <code>int tcgetattr(int, termios*)</code><br>
	 * <i>native declaration : termios.h:2142</i>
	 */
	int tcgetattr(int __fd, termios __termios_p);
	/**
	 * Set the state of FD to *TERMIOS_P.<br>
	 * Values for OPTIONAL_ACTIONS (TCSA*) are in <bits/termios.h>.<br>
	 * Original signature : <code>int tcsetattr(int, int, termios*)</code><br>
	 * <i>native declaration : termios.h:2148</i>
	 */
	int tcsetattr(int __fd, int __optional_actions, termios __termios_p);
	/**
	 * Set *TERMIOS_P to indicate raw mode.<br>
	 * Original signature : <code>void cfmakeraw(termios*)</code><br>
	 * <i>native declaration : termios.h:2153</i>
	 */
	void cfmakeraw(termios __termios_p);
	/**
	 * Send zero bits on FD.<br>
	 * Original signature : <code>int tcsendbreak(int, int)</code><br>
	 * <i>native declaration : termios.h:2158</i>
	 */
	int tcsendbreak(int __fd, int __duration);
	/**
	 * Wait for pending output to be written on FD.<br>
	 * This function is a cancellation point and therefore not marked with<br>
	 * __THROW.<br>
	 * Original signature : <code>int tcdrain(int)</code><br>
	 * <i>native declaration : termios.h:2165</i>
	 */
	int tcdrain(int __fd);
	/**
	 * Flush pending data on FD.<br>
	 * Values for QUEUE_SELECTOR (TC{I,O,IO}FLUSH) are in <bits/termios.h>.<br>
	 * Original signature : <code>int tcflush(int, int)</code><br>
	 * <i>native declaration : termios.h:2171</i>
	 */
	int tcflush(int __fd, int __queue_selector);
	/**
	 * Suspend or restart transmission on FD.<br>
	 * Values for ACTION (TC[IO]{OFF,ON}) are in <bits/termios.h>.<br>
	 * Original signature : <code>int tcflow(int, int)</code><br>
	 * <i>native declaration : termios.h:2177</i>
	 */
	int tcflow(int __fd, int __action);
	/**
	 * Get process group ID for session leader for controlling terminal FD.<br>
	 * Original signature : <code>__pid_t tcgetsid(int)</code><br>
	 * <i>native declaration : termios.h:2182</i>
	 */
	int tcgetsid(int __fd);
	/**
	 * Test for access to NAME using the real UID and real GID.<br>
	 * Original signature : <code>int access(const char*, int)</code><br>
	 * <i>native declaration : unistd.h:2192</i><br>
	 * @deprecated use the safer methods {@link #access(java.lang.String, int)} and {@link #access(com.sun.jna.Pointer, int)} instead
	 */
	@Deprecated 
	int access(Pointer __name, int __type);
	/**
	 * Test for access to NAME using the real UID and real GID.<br>
	 * Original signature : <code>int access(const char*, int)</code><br>
	 * <i>native declaration : unistd.h:2192</i>
	 */
	int access(String __name, int __type);
	/**
	 * Test for access to FILE relative to the directory FD is open on.<br>
	 * If AT_EACCESS is set in FLAG, then use effective IDs like `eaccess',<br>
	 * otherwise use real IDs like `access'.<br>
	 * Original signature : <code>int faccessat(int, const char*, int, int)</code><br>
	 * <i>native declaration : unistd.h:2199</i><br>
	 * @deprecated use the safer methods {@link #faccessat(int, java.lang.String, int, int)} and {@link #faccessat(int, com.sun.jna.Pointer, int, int)} instead
	 */
	@Deprecated 
	int faccessat(int __fd, Pointer __file, int __type, int __flag);
	/**
	 * Test for access to FILE relative to the directory FD is open on.<br>
	 * If AT_EACCESS is set in FLAG, then use effective IDs like `eaccess',<br>
	 * otherwise use real IDs like `access'.<br>
	 * Original signature : <code>int faccessat(int, const char*, int, int)</code><br>
	 * <i>native declaration : unistd.h:2199</i>
	 */
	int faccessat(int __fd, String __file, int __type, int __flag);
	/**
	 * Original signature : <code>__off_t lseek(int, __off_t, int)</code><br>
	 * <i>native declaration : unistd.h:2201</i>
	 */
	NativeLong lseek(int __fd, NativeLong __offset, int __whence);
	/**
	 * Close the file descriptor FD.<br>
	 * This function is a cancellation point and therefore not marked with<br>
	 * __THROW.<br>
	 * Original signature : <code>int close(int)</code><br>
	 * <i>native declaration : unistd.h:2208</i>
	 */
	int close(int __fd);
	/**
	 * Read NBYTES into BUF from FD.  Return the<br>
	 * number read, -1 for errors or 0 for EOF.<br>
	 * This function is a cancellation point and therefore not marked with<br>
	 * __THROW.<br>
	 * Original signature : <code>ssize_t read(int, void*, size_t)</code><br>
	 * <i>native declaration : unistd.h:2216</i>
	 */
	NativeLong read(int __fd, Pointer __buf, NativeLong __nbytes);
	/**
	 * Write N bytes of BUF to FD.  Return the number written, or -1.<br>
	 * This function is a cancellation point and therefore not marked with<br>
	 * __THROW.<br>
	 * Original signature : <code>ssize_t write(int, const void*, size_t)</code><br>
	 * <i>native declaration : unistd.h:2223</i>
	 */
	NativeLong write(int __fd, Pointer __buf, NativeLong __n);
	/**
	 * Read NBYTES into BUF from FD at the given position OFFSET without<br>
	 * changing the file pointer.  Return the number read, -1 for errors<br>
	 * or 0 for EOF.<br>
	 * This function is a cancellation point and therefore not marked with<br>
	 * __THROW.<br>
	 * Original signature : <code>ssize_t pread(int, void*, size_t, __off_t)</code><br>
	 * <i>native declaration : unistd.h:2232</i>
	 */
	NativeLong pread(int __fd, Pointer __buf, NativeLong __nbytes, NativeLong __offset);
	/**
	 * Write N bytes of BUF to FD at the given position OFFSET without<br>
	 * changing the file pointer.  Return the number written, or -1.<br>
	 * This function is a cancellation point and therefore not marked with<br>
	 * __THROW.<br>
	 * Original signature : <code>ssize_t pwrite(int, const void*, size_t, __off_t)</code><br>
	 * <i>native declaration : unistd.h:2240</i>
	 */
	NativeLong pwrite(int __fd, Pointer __buf, NativeLong __n, NativeLong __offset);
	/**
	 * Create a one-way communication channel (pipe).<br>
	 * If successful, two file descriptors are stored in PIPEDES;<br>
	 * bytes written on PIPEDES[1] can be read from PIPEDES[0].<br>
	 * Returns 0 if successful, -1 if not.<br>
	 * Original signature : <code>int pipe(int[2])</code><br>
	 * <i>native declaration : unistd.h:2248</i><br>
	 * @deprecated use the safer methods {@link #pipe(java.nio.IntBuffer)} and {@link #pipe(com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	int pipe(IntByReference __pipedes);
	/**
	 * Create a one-way communication channel (pipe).<br>
	 * If successful, two file descriptors are stored in PIPEDES;<br>
	 * bytes written on PIPEDES[1] can be read from PIPEDES[0].<br>
	 * Returns 0 if successful, -1 if not.<br>
	 * Original signature : <code>int pipe(int[2])</code><br>
	 * <i>native declaration : unistd.h:2248</i>
	 */
	int pipe(IntBuffer __pipedes);
	/**
	 * Schedule an alarm.  In SECONDS seconds, the process will get a SIGALRM.<br>
	 * If SECONDS is zero, any currently scheduled alarm will be cancelled.<br>
	 * The function returns the number of seconds remaining until the last<br>
	 * alarm scheduled would have signaled, or zero if there wasn't one.<br>
	 * There is no return value to indicate an error, but you can set `errno'<br>
	 * to 0 and check its value after calling `alarm', and this might tell you.<br>
	 * The signal may come late due to processor scheduling.<br>
	 * Original signature : <code>int alarm(unsigned int)</code><br>
	 * <i>native declaration : unistd.h:2259</i>
	 */
	int alarm(int __seconds);
	/**
	 * Make the process sleep for SECONDS seconds, or until a signal arrives<br>
	 * and is not ignored.  The function returns the number of seconds less<br>
	 * than SECONDS which it actually slept (thus zero if it slept the full time).<br>
	 * If a signal handler does a `longjmp' or modifies the handling of the<br>
	 * SIGALRM signal while inside `sleep' call, the handling of the SIGALRM<br>
	 * signal afterwards is undefined.  There is no return value to indicate<br>
	 * error, but if `sleep' returns SECONDS, it probably didn't work.<br>
	 * This function is a cancellation point and therefore not marked with<br>
	 * __THROW.<br>
	 * Original signature : <code>int sleep(unsigned int)</code><br>
	 * <i>native declaration : unistd.h:2272</i>
	 */
	int sleep(int __seconds);
	/**
	 * Set an alarm to go off (generating a SIGALRM signal) in VALUE<br>
	 * microseconds.  If INTERVAL is nonzero, when the alarm goes off, the<br>
	 * timer is reset to go off every INTERVAL microseconds thereafter.<br>
	 * Returns the number of microseconds remaining before the alarm.<br>
	 * Original signature : <code>__useconds_t ualarm(__useconds_t, __useconds_t)</code><br>
	 * <i>native declaration : unistd.h:2280</i>
	 */
	int ualarm(int __value, int __interval);
	/**
	 * Sleep USECONDS microseconds, or until a signal arrives that is not blocked<br>
	 * or ignored.<br>
	 * This function is a cancellation point and therefore not marked with<br>
	 * __THROW.<br>
	 * Original signature : <code>int usleep(__useconds_t)</code><br>
	 * <i>native declaration : unistd.h:2288</i>
	 */
	int usleep(int __useconds);
	/**
	 * Suspend the process until a signal arrives.<br>
	 * This always returns -1 and sets `errno' to EINTR.<br>
	 * This function is a cancellation point and therefore not marked with<br>
	 * __THROW.<br>
	 * Original signature : <code>int pause()</code><br>
	 * <i>native declaration : unistd.h:2296</i>
	 */
	int pause();
	/**
	 * Change the owner and group of FILE.<br>
	 * Original signature : <code>int chown(const char*, __uid_t, __gid_t)</code><br>
	 * <i>native declaration : unistd.h:2301</i><br>
	 * @deprecated use the safer methods {@link #chown(java.lang.String, int, int)} and {@link #chown(com.sun.jna.Pointer, int, int)} instead
	 */
	@Deprecated 
	int chown(Pointer __file, int __owner, int __group);
	/**
	 * Change the owner and group of FILE.<br>
	 * Original signature : <code>int chown(const char*, __uid_t, __gid_t)</code><br>
	 * <i>native declaration : unistd.h:2301</i>
	 */
	int chown(String __file, int __owner, int __group);
	/**
	 * Change the owner and group of the file that FD is open on.<br>
	 * Original signature : <code>int fchown(int, __uid_t, __gid_t)</code><br>
	 * <i>native declaration : unistd.h:2306</i>
	 */
	int fchown(int __fd, int __owner, int __group);
	/**
	 * Change owner and group of FILE, if it is a symbolic<br>
	 * link the ownership of the symbolic link is changed.<br>
	 * Original signature : <code>int lchown(const char*, __uid_t, __gid_t)</code><br>
	 * <i>native declaration : unistd.h:2312</i><br>
	 * @deprecated use the safer methods {@link #lchown(java.lang.String, int, int)} and {@link #lchown(com.sun.jna.Pointer, int, int)} instead
	 */
	@Deprecated 
	int lchown(Pointer __file, int __owner, int __group);
	/**
	 * Change owner and group of FILE, if it is a symbolic<br>
	 * link the ownership of the symbolic link is changed.<br>
	 * Original signature : <code>int lchown(const char*, __uid_t, __gid_t)</code><br>
	 * <i>native declaration : unistd.h:2312</i>
	 */
	int lchown(String __file, int __owner, int __group);
	/**
	 * Change the owner and group of FILE relative to the directory FD is open<br>
	 * on.<br>
	 * Original signature : <code>int fchownat(int, const char*, __uid_t, __gid_t, int)</code><br>
	 * <i>native declaration : unistd.h:2318</i><br>
	 * @deprecated use the safer methods {@link #fchownat(int, java.lang.String, int, int, int)} and {@link #fchownat(int, com.sun.jna.Pointer, int, int, int)} instead
	 */
	@Deprecated 
	int fchownat(int __fd, Pointer __file, int __owner, int __group, int __flag);
	/**
	 * Change the owner and group of FILE relative to the directory FD is open<br>
	 * on.<br>
	 * Original signature : <code>int fchownat(int, const char*, __uid_t, __gid_t, int)</code><br>
	 * <i>native declaration : unistd.h:2318</i>
	 */
	int fchownat(int __fd, String __file, int __owner, int __group, int __flag);
	/**
	 * Change the process's working directory to PATH.<br>
	 * Original signature : <code>int chdir(const char*)</code><br>
	 * <i>native declaration : unistd.h:2323</i><br>
	 * @deprecated use the safer methods {@link #chdir(java.lang.String)} and {@link #chdir(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int chdir(Pointer __path);
	/**
	 * Change the process's working directory to PATH.<br>
	 * Original signature : <code>int chdir(const char*)</code><br>
	 * <i>native declaration : unistd.h:2323</i>
	 */
	int chdir(String __path);
	/**
	 * Change the process's working directory to the one FD is open on.<br>
	 * Original signature : <code>int fchdir(int)</code><br>
	 * <i>native declaration : unistd.h:2328</i>
	 */
	int fchdir(int __fd);
	/**
	 * Get the pathname of the current working directory,<br>
	 * and put it in SIZE bytes of BUF.  Returns NULL if the<br>
	 * directory couldn't be determined or SIZE was too small.<br>
	 * If successful, returns BUF.  In GNU, if BUF is NULL,<br>
	 * an array is allocated with `malloc'; the array is SIZE<br>
	 * bytes long, unless SIZE == 0, in which case it is as<br>
	 * big as necessary.<br>
	 * Original signature : <code>char* getcwd(char*, size_t)</code><br>
	 * <i>native declaration : unistd.h:2339</i><br>
	 * @deprecated use the safer methods {@link #getcwd(java.nio.ByteBuffer, com.sun.jna.NativeLong)} and {@link #getcwd(com.sun.jna.Pointer, com.sun.jna.NativeLong)} instead
	 */
	@Deprecated 
	Pointer getcwd(Pointer __buf, NativeLong __size);
	/**
	 * Get the pathname of the current working directory,<br>
	 * and put it in SIZE bytes of BUF.  Returns NULL if the<br>
	 * directory couldn't be determined or SIZE was too small.<br>
	 * If successful, returns BUF.  In GNU, if BUF is NULL,<br>
	 * an array is allocated with `malloc'; the array is SIZE<br>
	 * bytes long, unless SIZE == 0, in which case it is as<br>
	 * big as necessary.<br>
	 * Original signature : <code>char* getcwd(char*, size_t)</code><br>
	 * <i>native declaration : unistd.h:2339</i>
	 */
	Pointer getcwd(ByteBuffer __buf, NativeLong __size);
	/**
	 * Put the absolute pathname of the current working directory in BUF.<br>
	 * If successful, return BUF.  If not, put an error message in<br>
	 * BUF and return NULL.  BUF should be at least PATH_MAX bytes long.<br>
	 * Original signature : <code>char* getwd(char*)</code><br>
	 * <i>native declaration : unistd.h:2346</i><br>
	 * @deprecated use the safer methods {@link #getwd(java.nio.ByteBuffer)} and {@link #getwd(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	Pointer getwd(Pointer __buf);
	/**
	 * Put the absolute pathname of the current working directory in BUF.<br>
	 * If successful, return BUF.  If not, put an error message in<br>
	 * BUF and return NULL.  BUF should be at least PATH_MAX bytes long.<br>
	 * Original signature : <code>char* getwd(char*)</code><br>
	 * <i>native declaration : unistd.h:2346</i>
	 */
	Pointer getwd(ByteBuffer __buf);
	/**
	 * Duplicate FD, returning a new file descriptor on the same file.<br>
	 * Original signature : <code>int dup(int)</code><br>
	 * <i>native declaration : unistd.h:2351</i>
	 */
	int dup(int __fd);
	/**
	 * Duplicate FD to FD2, closing FD2 and making it open on the same file.<br>
	 * Original signature : <code>int dup2(int, int)</code><br>
	 * <i>native declaration : unistd.h:2356</i>
	 */
	int dup2(int __fd, int __fd2);
	/**
	 * Replace the current process, executing PATH with arguments ARGV and<br>
	 * environment ENVP.  ARGV and ENVP are terminated by NULL pointers.<br>
	 * Original signature : <code>int execve(const char*, const char*[], const char*[])</code><br>
	 * <i>native declaration : unistd.h:2364</i><br>
	 * @deprecated use the safer methods {@link #execve(java.lang.String, java.lang.String[], java.lang.String[])} and {@link #execve(com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int execve(Pointer __path, PointerByReference __argv, PointerByReference __envp);
	/**
	 * Replace the current process, executing PATH with arguments ARGV and<br>
	 * environment ENVP.  ARGV and ENVP are terminated by NULL pointers.<br>
	 * Original signature : <code>int execve(const char*, const char*[], const char*[])</code><br>
	 * <i>native declaration : unistd.h:2364</i>
	 */
	int execve(String __path, String __argv[], String __envp[]);
	/**
	 * Execute the file FD refers to, overlaying the running program image.<br>
	 * ARGV and ENVP are passed to the new program, as for `execve'.<br>
	 * Original signature : <code>int fexecve(int, const char*[], const char*[])</code><br>
	 * <i>native declaration : unistd.h:2370</i><br>
	 * @deprecated use the safer methods {@link #fexecve(int, java.lang.String[], java.lang.String[])} and {@link #fexecve(int, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int fexecve(int __fd, PointerByReference __argv, PointerByReference __envp);
	/**
	 * Execute the file FD refers to, overlaying the running program image.<br>
	 * ARGV and ENVP are passed to the new program, as for `execve'.<br>
	 * Original signature : <code>int fexecve(int, const char*[], const char*[])</code><br>
	 * <i>native declaration : unistd.h:2370</i>
	 */
	int fexecve(int __fd, String __argv[], String __envp[]);
	/**
	 * Execute PATH with arguments ARGV and environment from `environ'.<br>
	 * Original signature : <code>int execv(const char*, const char*[])</code><br>
	 * <i>native declaration : unistd.h:2375</i><br>
	 * @deprecated use the safer methods {@link #execv(java.lang.String, java.lang.String[])} and {@link #execv(com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int execv(Pointer __path, PointerByReference __argv);
	/**
	 * Execute PATH with arguments ARGV and environment from `environ'.<br>
	 * Original signature : <code>int execv(const char*, const char*[])</code><br>
	 * <i>native declaration : unistd.h:2375</i>
	 */
	int execv(String __path, String __argv[]);
	/**
	 * Execute PATH with all arguments after PATH until a NULL pointer,<br>
	 * and the argument after that for environment.<br>
	 * Original signature : <code>int execle(const char*, const char*, null)</code><br>
	 * <i>native declaration : unistd.h:2381</i><br>
	 * @deprecated use the safer methods {@link #execle(java.lang.String, java.lang.String, java.lang.Object)} and {@link #execle(com.sun.jna.Pointer, com.sun.jna.Pointer, java.lang.Object)} instead
	 */
	@Deprecated 
	int execle(Pointer __path, Pointer __arg, Object... varargs);
	/**
	 * Execute PATH with all arguments after PATH until a NULL pointer,<br>
	 * and the argument after that for environment.<br>
	 * Original signature : <code>int execle(const char*, const char*, null)</code><br>
	 * <i>native declaration : unistd.h:2381</i>
	 */
	int execle(String __path, String __arg, Object... varargs);
	/**
	 * Execute PATH with all arguments after PATH until<br>
	 * a NULL pointer and environment from `environ'.<br>
	 * Original signature : <code>int execl(const char*, const char*, null)</code><br>
	 * <i>native declaration : unistd.h:2387</i><br>
	 * @deprecated use the safer methods {@link #execl(java.lang.String, java.lang.String, java.lang.Object)} and {@link #execl(com.sun.jna.Pointer, com.sun.jna.Pointer, java.lang.Object)} instead
	 */
	@Deprecated 
	int execl(Pointer __path, Pointer __arg, Object... varargs);
	/**
	 * Execute PATH with all arguments after PATH until<br>
	 * a NULL pointer and environment from `environ'.<br>
	 * Original signature : <code>int execl(const char*, const char*, null)</code><br>
	 * <i>native declaration : unistd.h:2387</i>
	 */
	int execl(String __path, String __arg, Object... varargs);
	/**
	 * Execute FILE, searching in the `PATH' environment variable if it contains<br>
	 * no slashes, with arguments ARGV and environment from `environ'.<br>
	 * Original signature : <code>int execvp(const char*, const char*[])</code><br>
	 * <i>native declaration : unistd.h:2393</i><br>
	 * @deprecated use the safer methods {@link #execvp(java.lang.String, java.lang.String[])} and {@link #execvp(com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int execvp(Pointer __file, PointerByReference __argv);
	/**
	 * Execute FILE, searching in the `PATH' environment variable if it contains<br>
	 * no slashes, with arguments ARGV and environment from `environ'.<br>
	 * Original signature : <code>int execvp(const char*, const char*[])</code><br>
	 * <i>native declaration : unistd.h:2393</i>
	 */
	int execvp(String __file, String __argv[]);
	/**
	 * Execute FILE, searching in the `PATH' environment variable if<br>
	 * it contains no slashes, with all arguments after FILE until a<br>
	 * NULL pointer and environment from `environ'.<br>
	 * Original signature : <code>int execlp(const char*, const char*, null)</code><br>
	 * <i>native declaration : unistd.h:2400</i><br>
	 * @deprecated use the safer methods {@link #execlp(java.lang.String, java.lang.String, java.lang.Object)} and {@link #execlp(com.sun.jna.Pointer, com.sun.jna.Pointer, java.lang.Object)} instead
	 */
	@Deprecated 
	int execlp(Pointer __file, Pointer __arg, Object... varargs);
	/**
	 * Execute FILE, searching in the `PATH' environment variable if<br>
	 * it contains no slashes, with all arguments after FILE until a<br>
	 * NULL pointer and environment from `environ'.<br>
	 * Original signature : <code>int execlp(const char*, const char*, null)</code><br>
	 * <i>native declaration : unistd.h:2400</i>
	 */
	int execlp(String __file, String __arg, Object... varargs);
	/**
	 * Add INC to priority of the current process.<br>
	 * Original signature : <code>int nice(int)</code><br>
	 * <i>native declaration : unistd.h:2405</i>
	 */
	int nice(int __inc);
	/**
	 * Terminate program execution with the low-order 8 bits of STATUS.<br>
	 * Original signature : <code>void _exit(int)</code><br>
	 * <i>native declaration : unistd.h:2410</i>
	 */
	void _exit(int __status);
	/**
	 * Get file-specific configuration information about PATH.<br>
	 * Original signature : <code>long pathconf(const char*, int)</code><br>
	 * <i>native declaration : unistd.h:2729</i><br>
	 * @deprecated use the safer methods {@link #pathconf(java.lang.String, int)} and {@link #pathconf(com.sun.jna.Pointer, int)} instead
	 */
	@Deprecated 
	NativeLong pathconf(Pointer __path, int __name);
	/**
	 * Get file-specific configuration information about PATH.<br>
	 * Original signature : <code>long pathconf(const char*, int)</code><br>
	 * <i>native declaration : unistd.h:2729</i>
	 */
	NativeLong pathconf(String __path, int __name);
	/**
	 * Get file-specific configuration about descriptor FD.<br>
	 * Original signature : <code>long fpathconf(int, int)</code><br>
	 * <i>native declaration : unistd.h:2734</i>
	 */
	NativeLong fpathconf(int __fd, int __name);
	/**
	 * Get the value of the system variable NAME.<br>
	 * Original signature : <code>long sysconf(int)</code><br>
	 * <i>native declaration : unistd.h:2739</i>
	 */
	NativeLong sysconf(int __name);
	/**
	 * Get the value of the string-valued system variable NAME.<br>
	 * Original signature : <code>size_t confstr(int, char*, size_t)</code><br>
	 * <i>native declaration : unistd.h:2744</i><br>
	 * @deprecated use the safer methods {@link #confstr(int, java.nio.ByteBuffer, com.sun.jna.NativeLong)} and {@link #confstr(int, com.sun.jna.Pointer, com.sun.jna.NativeLong)} instead
	 */
	@Deprecated 
	NativeLong confstr(int __name, Pointer __buf, NativeLong __len);
	/**
	 * Get the value of the string-valued system variable NAME.<br>
	 * Original signature : <code>size_t confstr(int, char*, size_t)</code><br>
	 * <i>native declaration : unistd.h:2744</i>
	 */
	NativeLong confstr(int __name, ByteBuffer __buf, NativeLong __len);
	/**
	 * Get the process ID of the calling process.<br>
	 * Original signature : <code>__pid_t getpid()</code><br>
	 * <i>native declaration : unistd.h:2749</i>
	 */
	int getpid();
	/**
	 * Get the process ID of the calling process's parent.<br>
	 * Original signature : <code>__pid_t getppid()</code><br>
	 * <i>native declaration : unistd.h:2754</i>
	 */
	int getppid();
	/**
	 * Original signature : <code>__pid_t getpgrp()</code><br>
	 * <i>native declaration : unistd.h:2756</i>
	 */
	int getpgrp();
	/**
	 * Get the process group ID of process PID.<br>
	 * Original signature : <code>__pid_t __getpgid(__pid_t)</code><br>
	 * <i>native declaration : unistd.h:2761</i>
	 */
	int __getpgid(int __pid);
	/**
	 * Original signature : <code>__pid_t getpgid(__pid_t)</code><br>
	 * <i>native declaration : unistd.h:2763</i>
	 */
	int getpgid(int __pid);
	/**
	 * Set the process group ID of the process matching PID to PGID.<br>
	 * If PID is zero, the current process's process group ID is set.<br>
	 * If PGID is zero, the process ID of the process is used.<br>
	 * Original signature : <code>int setpgid(__pid_t, __pid_t)</code><br>
	 * <i>native declaration : unistd.h:2770</i>
	 */
	int setpgid(int __pid, int __pgid);
	/**
	 * Set the process group ID of the calling process to its own PID.<br>
	 * This is exactly the same as `setpgid (0, 0)'.<br>
	 * Original signature : <code>int setpgrp()</code><br>
	 * <i>native declaration : unistd.h:2776</i>
	 */
	int setpgrp();
	/**
	 * Create a new session with the calling process as its leader.<br>
	 * The process group IDs of the session and the calling process<br>
	 * are set to the process ID of the calling process, which is returned.<br>
	 * Original signature : <code>__pid_t setsid()</code><br>
	 * <i>native declaration : unistd.h:2783</i>
	 */
	int setsid();
	/**
	 * Return the session ID of the given process.<br>
	 * Original signature : <code>__pid_t getsid(__pid_t)</code><br>
	 * <i>native declaration : unistd.h:2788</i>
	 */
	int getsid(int __pid);
	/**
	 * Get the real user ID of the calling process.<br>
	 * Original signature : <code>__uid_t getuid()</code><br>
	 * <i>native declaration : unistd.h:2793</i>
	 */
	int getuid();
	/**
	 * Get the effective user ID of the calling process.<br>
	 * Original signature : <code>__uid_t geteuid()</code><br>
	 * <i>native declaration : unistd.h:2798</i>
	 */
	int geteuid();
	/**
	 * Get the real group ID of the calling process.<br>
	 * Original signature : <code>__gid_t getgid()</code><br>
	 * <i>native declaration : unistd.h:2803</i>
	 */
	int getgid();
	/**
	 * Get the effective group ID of the calling process.<br>
	 * Original signature : <code>__gid_t getegid()</code><br>
	 * <i>native declaration : unistd.h:2808</i>
	 */
	int getegid();
	/**
	 * If SIZE is zero, return the number of supplementary groups<br>
	 * the calling process is in.  Otherwise, fill in the group IDs<br>
	 * of its supplementary groups in LIST and return the number written.<br>
	 * Original signature : <code>int getgroups(int, __gid_t[])</code><br>
	 * <i>native declaration : unistd.h:2815</i><br>
	 * @deprecated use the safer methods {@link #getgroups(int, java.nio.IntBuffer)} and {@link #getgroups(int, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	int getgroups(int __size, IntByReference __list);
	/**
	 * If SIZE is zero, return the number of supplementary groups<br>
	 * the calling process is in.  Otherwise, fill in the group IDs<br>
	 * of its supplementary groups in LIST and return the number written.<br>
	 * Original signature : <code>int getgroups(int, __gid_t[])</code><br>
	 * <i>native declaration : unistd.h:2815</i>
	 */
	int getgroups(int __size, IntBuffer __list);
	/**
	 * Set the user ID of the calling process to UID.<br>
	 * If the calling process is the super-user, set the real<br>
	 * and effective user IDs, and the saved set-user-ID to UID;<br>
	 * if not, the effective user ID is set to UID.<br>
	 * Original signature : <code>int setuid(__uid_t)</code><br>
	 * <i>native declaration : unistd.h:2823</i>
	 */
	int setuid(int __uid);
	/**
	 * Set the real user ID of the calling process to RUID,<br>
	 * and the effective user ID of the calling process to EUID.<br>
	 * Original signature : <code>int setreuid(__uid_t, __uid_t)</code><br>
	 * <i>native declaration : unistd.h:2829</i>
	 */
	int setreuid(int __ruid, int __euid);
	/**
	 * Set the effective user ID of the calling process to UID.<br>
	 * Original signature : <code>int seteuid(__uid_t)</code><br>
	 * <i>native declaration : unistd.h:2834</i>
	 */
	int seteuid(int __uid);
	/**
	 * Set the group ID of the calling process to GID.<br>
	 * If the calling process is the super-user, set the real<br>
	 * and effective group IDs, and the saved set-group-ID to GID;<br>
	 * if not, the effective group ID is set to GID.<br>
	 * Original signature : <code>int setgid(__gid_t)</code><br>
	 * <i>native declaration : unistd.h:2842</i>
	 */
	int setgid(int __gid);
	/**
	 * Set the real group ID of the calling process to RGID,<br>
	 * and the effective group ID of the calling process to EGID.<br>
	 * Original signature : <code>int setregid(__gid_t, __gid_t)</code><br>
	 * <i>native declaration : unistd.h:2848</i>
	 */
	int setregid(int __rgid, int __egid);
	/**
	 * Set the effective group ID of the calling process to GID.<br>
	 * Original signature : <code>int setegid(__gid_t)</code><br>
	 * <i>native declaration : unistd.h:2853</i>
	 */
	int setegid(int __gid);
	/**
	 * Clone the calling process, creating an exact copy.<br>
	 * Return -1 for errors, 0 to the new process,<br>
	 * and the process ID of the new process to the old process.<br>
	 * Original signature : <code>__pid_t fork()</code><br>
	 * <i>native declaration : unistd.h:2860</i>
	 */
	int fork();
	/**
	 * Clone the calling process, but without copying the whole address space.<br>
	 * The calling process is suspended until the new process exits or is<br>
	 * replaced by a call to `execve'.  Return -1 for errors, 0 to the new process,<br>
	 * and the process ID of the new process to the old process.<br>
	 * Original signature : <code>__pid_t vfork()</code><br>
	 * <i>native declaration : unistd.h:2868</i>
	 */
	int vfork();
	/**
	 * Return the pathname of the terminal FD is open on, or NULL on errors.<br>
	 * The returned storage is good only until the next call to this function.<br>
	 * Original signature : <code>char* ttyname(int)</code><br>
	 * <i>native declaration : unistd.h:2874</i>
	 */
	Pointer ttyname(int __fd);
	/**
	 * Store at most BUFLEN characters of the pathname of the terminal FD is<br>
	 * open on in BUF.  Return 0 on success, otherwise an error number.<br>
	 * Original signature : <code>int ttyname_r(int, char*, size_t)</code><br>
	 * <i>native declaration : unistd.h:2880</i><br>
	 * @deprecated use the safer methods {@link #ttyname_r(int, java.nio.ByteBuffer, com.sun.jna.NativeLong)} and {@link #ttyname_r(int, com.sun.jna.Pointer, com.sun.jna.NativeLong)} instead
	 */
	@Deprecated 
	int ttyname_r(int __fd, Pointer __buf, NativeLong __buflen);
	/**
	 * Store at most BUFLEN characters of the pathname of the terminal FD is<br>
	 * open on in BUF.  Return 0 on success, otherwise an error number.<br>
	 * Original signature : <code>int ttyname_r(int, char*, size_t)</code><br>
	 * <i>native declaration : unistd.h:2880</i>
	 */
	int ttyname_r(int __fd, ByteBuffer __buf, NativeLong __buflen);
	/**
	 * Return 1 if FD is a valid descriptor associated<br>
	 * with a terminal, zero if not.<br>
	 * Original signature : <code>int isatty(int)</code><br>
	 * <i>native declaration : unistd.h:2886</i>
	 */
	int isatty(int __fd);
	/**
	 * Return the index into the active-logins file (utmp) for<br>
	 * the controlling terminal.<br>
	 * Original signature : <code>int ttyslot()</code><br>
	 * <i>native declaration : unistd.h:2892</i>
	 */
	int ttyslot();
	/**
	 * Make a link to FROM named TO.<br>
	 * Original signature : <code>int link(const char*, const char*)</code><br>
	 * <i>native declaration : unistd.h:2897</i><br>
	 * @deprecated use the safer methods {@link #link(java.lang.String, java.lang.String)} and {@link #link(com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int link(Pointer __from, Pointer __to);
	/**
	 * Make a link to FROM named TO.<br>
	 * Original signature : <code>int link(const char*, const char*)</code><br>
	 * <i>native declaration : unistd.h:2897</i>
	 */
	int link(String __from, String __to);
	/**
	 * Like link but relative paths in TO and FROM are interpreted relative<br>
	 * to FROMFD and TOFD respectively.<br>
	 * Original signature : <code>int linkat(int, const char*, int, const char*, int)</code><br>
	 * <i>native declaration : unistd.h:2903</i><br>
	 * @deprecated use the safer methods {@link #linkat(int, java.lang.String, int, java.lang.String, int)} and {@link #linkat(int, com.sun.jna.Pointer, int, com.sun.jna.Pointer, int)} instead
	 */
	@Deprecated 
	int linkat(int __fromfd, Pointer __from, int __tofd, Pointer __to, int __flags);
	/**
	 * Like link but relative paths in TO and FROM are interpreted relative<br>
	 * to FROMFD and TOFD respectively.<br>
	 * Original signature : <code>int linkat(int, const char*, int, const char*, int)</code><br>
	 * <i>native declaration : unistd.h:2903</i>
	 */
	int linkat(int __fromfd, String __from, int __tofd, String __to, int __flags);
	/**
	 * Make a symbolic link to FROM named TO.<br>
	 * Original signature : <code>int symlink(const char*, const char*)</code><br>
	 * <i>native declaration : unistd.h:2908</i><br>
	 * @deprecated use the safer methods {@link #symlink(java.lang.String, java.lang.String)} and {@link #symlink(com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int symlink(Pointer __from, Pointer __to);
	/**
	 * Make a symbolic link to FROM named TO.<br>
	 * Original signature : <code>int symlink(const char*, const char*)</code><br>
	 * <i>native declaration : unistd.h:2908</i>
	 */
	int symlink(String __from, String __to);
	/**
	 * Read the contents of the symbolic link PATH into no more than<br>
	 * LEN bytes of BUF.  The contents are not null-terminated.<br>
	 * Returns the number of characters read, or -1 for errors.<br>
	 * Original signature : <code>ssize_t readlink(const char*, char*, size_t)</code><br>
	 * <i>native declaration : unistd.h:2915</i><br>
	 * @deprecated use the safer methods {@link #readlink(java.lang.String, java.nio.ByteBuffer, com.sun.jna.NativeLong)} and {@link #readlink(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.NativeLong)} instead
	 */
	@Deprecated 
	NativeLong readlink(Pointer __path, Pointer __buf, NativeLong __len);
	/**
	 * Read the contents of the symbolic link PATH into no more than<br>
	 * LEN bytes of BUF.  The contents are not null-terminated.<br>
	 * Returns the number of characters read, or -1 for errors.<br>
	 * Original signature : <code>ssize_t readlink(const char*, char*, size_t)</code><br>
	 * <i>native declaration : unistd.h:2915</i>
	 */
	NativeLong readlink(String __path, ByteBuffer __buf, NativeLong __len);
	/**
	 * Like symlink but a relative path in TO is interpreted relative to TOFD.<br>
	 * Original signature : <code>int symlinkat(const char*, int, const char*)</code><br>
	 * <i>native declaration : unistd.h:2920</i><br>
	 * @deprecated use the safer methods {@link #symlinkat(java.lang.String, int, java.lang.String)} and {@link #symlinkat(com.sun.jna.Pointer, int, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int symlinkat(Pointer __from, int __tofd, Pointer __to);
	/**
	 * Like symlink but a relative path in TO is interpreted relative to TOFD.<br>
	 * Original signature : <code>int symlinkat(const char*, int, const char*)</code><br>
	 * <i>native declaration : unistd.h:2920</i>
	 */
	int symlinkat(String __from, int __tofd, String __to);
	/**
	 * Like readlink but a relative PATH is interpreted relative to FD.<br>
	 * Original signature : <code>ssize_t readlinkat(int, const char*, char*, size_t)</code><br>
	 * <i>native declaration : unistd.h:2925</i><br>
	 * @deprecated use the safer methods {@link #readlinkat(int, java.lang.String, java.nio.ByteBuffer, com.sun.jna.NativeLong)} and {@link #readlinkat(int, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.NativeLong)} instead
	 */
	@Deprecated 
	NativeLong readlinkat(int __fd, Pointer __path, Pointer __buf, NativeLong __len);
	/**
	 * Like readlink but a relative PATH is interpreted relative to FD.<br>
	 * Original signature : <code>ssize_t readlinkat(int, const char*, char*, size_t)</code><br>
	 * <i>native declaration : unistd.h:2925</i>
	 */
	NativeLong readlinkat(int __fd, String __path, ByteBuffer __buf, NativeLong __len);
	/**
	 * Remove the link NAME.<br>
	 * Original signature : <code>int unlink(const char*)</code><br>
	 * <i>native declaration : unistd.h:2930</i><br>
	 * @deprecated use the safer methods {@link #unlink(java.lang.String)} and {@link #unlink(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int unlink(Pointer __name);
	/**
	 * Remove the link NAME.<br>
	 * Original signature : <code>int unlink(const char*)</code><br>
	 * <i>native declaration : unistd.h:2930</i>
	 */
	int unlink(String __name);
	/**
	 * Remove the link NAME relative to FD.<br>
	 * Original signature : <code>int unlinkat(int, const char*, int)</code><br>
	 * <i>native declaration : unistd.h:2935</i><br>
	 * @deprecated use the safer methods {@link #unlinkat(int, java.lang.String, int)} and {@link #unlinkat(int, com.sun.jna.Pointer, int)} instead
	 */
	@Deprecated 
	int unlinkat(int __fd, Pointer __name, int __flag);
	/**
	 * Remove the link NAME relative to FD.<br>
	 * Original signature : <code>int unlinkat(int, const char*, int)</code><br>
	 * <i>native declaration : unistd.h:2935</i>
	 */
	int unlinkat(int __fd, String __name, int __flag);
	/**
	 * Remove the directory PATH.<br>
	 * Original signature : <code>int rmdir(const char*)</code><br>
	 * <i>native declaration : unistd.h:2940</i><br>
	 * @deprecated use the safer methods {@link #rmdir(java.lang.String)} and {@link #rmdir(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int rmdir(Pointer __path);
	/**
	 * Remove the directory PATH.<br>
	 * Original signature : <code>int rmdir(const char*)</code><br>
	 * <i>native declaration : unistd.h:2940</i>
	 */
	int rmdir(String __path);
	/**
	 * Return the foreground process group ID of FD.<br>
	 * Original signature : <code>__pid_t tcgetpgrp(int)</code><br>
	 * <i>native declaration : unistd.h:2945</i>
	 */
	int tcgetpgrp(int __fd);
	/**
	 * Set the foreground process group ID of FD set PGRP_ID.<br>
	 * Original signature : <code>int tcsetpgrp(int, __pid_t)</code><br>
	 * <i>native declaration : unistd.h:2950</i>
	 */
	int tcsetpgrp(int __fd, int __pgrp_id);
	/**
	 * Return the login name of the user.<br>
	 * This function is a possible cancellation point and therefore not<br>
	 * marked with __THROW.<br>
	 * Original signature : <code>char* getlogin()</code><br>
	 * <i>native declaration : unistd.h:2957</i>
	 */
	Pointer getlogin();
	/**
	 * Return at most NAME_LEN characters of the login name of the user in NAME.<br>
	 * If it cannot be determined or some other error occurred, return the error<br>
	 * code.  Otherwise return 0.<br>
	 * This function is a possible cancellation point and therefore not<br>
	 * marked with __THROW.<br>
	 * Original signature : <code>int getlogin_r(char*, size_t)</code><br>
	 * <i>native declaration : unistd.h:2966</i><br>
	 * @deprecated use the safer methods {@link #getlogin_r(java.nio.ByteBuffer, com.sun.jna.NativeLong)} and {@link #getlogin_r(com.sun.jna.Pointer, com.sun.jna.NativeLong)} instead
	 */
	@Deprecated 
	int getlogin_r(Pointer __name, NativeLong __name_len);
	/**
	 * Return at most NAME_LEN characters of the login name of the user in NAME.<br>
	 * If it cannot be determined or some other error occurred, return the error<br>
	 * code.  Otherwise return 0.<br>
	 * This function is a possible cancellation point and therefore not<br>
	 * marked with __THROW.<br>
	 * Original signature : <code>int getlogin_r(char*, size_t)</code><br>
	 * <i>native declaration : unistd.h:2966</i>
	 */
	int getlogin_r(ByteBuffer __name, NativeLong __name_len);
	/**
	 * Set the login name returned by `getlogin'.<br>
	 * Original signature : <code>int setlogin(const char*)</code><br>
	 * <i>native declaration : unistd.h:2971</i><br>
	 * @deprecated use the safer methods {@link #setlogin(java.lang.String)} and {@link #setlogin(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int setlogin(Pointer __name);
	/**
	 * Set the login name returned by `getlogin'.<br>
	 * Original signature : <code>int setlogin(const char*)</code><br>
	 * <i>native declaration : unistd.h:2971</i>
	 */
	int setlogin(String __name);
	/**
	 * Many other libraries have conflicting prototypes for getopt, with<br>
	 * differences in the consts, in stdlib.h.  To avoid compilation<br>
	 * errors, only prototype getopt for the GNU C library.<br>
	 * Original signature : <code>int getopt(int, const char**, const char*)</code><br>
	 * <i>native declaration : getopt.h:2983</i><br>
	 * @deprecated use the safer methods {@link #getopt(int, java.lang.String[], java.lang.String)} and {@link #getopt(int, com.sun.jna.ptr.PointerByReference, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int getopt(int ___argc, PointerByReference ___argv, Pointer __shortopts);
	/**
	 * Many other libraries have conflicting prototypes for getopt, with<br>
	 * differences in the consts, in stdlib.h.  To avoid compilation<br>
	 * errors, only prototype getopt for the GNU C library.<br>
	 * Original signature : <code>int getopt(int, const char**, const char*)</code><br>
	 * <i>native declaration : getopt.h:2983</i>
	 */
	int getopt(int ___argc, String ___argv[], String __shortopts);
	/**
	 * Put the name of the current host in no more than LEN bytes of NAME.<br>
	 * The result is null-terminated if LEN is large enough for the full<br>
	 * name and the terminator.<br>
	 * Original signature : <code>int gethostname(char*, size_t)</code><br>
	 * <i>native declaration : unistd.h:2991</i><br>
	 * @deprecated use the safer methods {@link #gethostname(java.nio.ByteBuffer, com.sun.jna.NativeLong)} and {@link #gethostname(com.sun.jna.Pointer, com.sun.jna.NativeLong)} instead
	 */
	@Deprecated 
	int gethostname(Pointer __name, NativeLong __len);
	/**
	 * Put the name of the current host in no more than LEN bytes of NAME.<br>
	 * The result is null-terminated if LEN is large enough for the full<br>
	 * name and the terminator.<br>
	 * Original signature : <code>int gethostname(char*, size_t)</code><br>
	 * <i>native declaration : unistd.h:2991</i>
	 */
	int gethostname(ByteBuffer __name, NativeLong __len);
	/**
	 * Set the name of the current host to NAME, which is LEN bytes long.<br>
	 * This call is restricted to the super-user.<br>
	 * Original signature : <code>int sethostname(const char*, size_t)</code><br>
	 * <i>native declaration : unistd.h:2997</i><br>
	 * @deprecated use the safer methods {@link #sethostname(java.lang.String, com.sun.jna.NativeLong)} and {@link #sethostname(com.sun.jna.Pointer, com.sun.jna.NativeLong)} instead
	 */
	@Deprecated 
	int sethostname(Pointer __name, NativeLong __len);
	/**
	 * Set the name of the current host to NAME, which is LEN bytes long.<br>
	 * This call is restricted to the super-user.<br>
	 * Original signature : <code>int sethostname(const char*, size_t)</code><br>
	 * <i>native declaration : unistd.h:2997</i>
	 */
	int sethostname(String __name, NativeLong __len);
	/**
	 * Set the current machine's Internet number to ID.<br>
	 * This call is restricted to the super-user.<br>
	 * Original signature : <code>int sethostid(long)</code><br>
	 * <i>native declaration : unistd.h:3003</i>
	 */
	int sethostid(NativeLong __id);
	/**
	 * Get and set the NIS (aka YP) domain name, if any.<br>
	 * Called just like `gethostname' and `sethostname'.<br>
	 * The NIS domain name is usually the empty string when not using NIS.<br>
	 * Original signature : <code>int getdomainname(char*, size_t)</code><br>
	 * <i>native declaration : unistd.h:3010</i><br>
	 * @deprecated use the safer methods {@link #getdomainname(java.nio.ByteBuffer, com.sun.jna.NativeLong)} and {@link #getdomainname(com.sun.jna.Pointer, com.sun.jna.NativeLong)} instead
	 */
	@Deprecated 
	int getdomainname(Pointer __name, NativeLong __len);
	/**
	 * Get and set the NIS (aka YP) domain name, if any.<br>
	 * Called just like `gethostname' and `sethostname'.<br>
	 * The NIS domain name is usually the empty string when not using NIS.<br>
	 * Original signature : <code>int getdomainname(char*, size_t)</code><br>
	 * <i>native declaration : unistd.h:3010</i>
	 */
	int getdomainname(ByteBuffer __name, NativeLong __len);
	/**
	 * Original signature : <code>int setdomainname(const char*, size_t)</code><br>
	 * <i>native declaration : unistd.h:3012</i><br>
	 * @deprecated use the safer methods {@link #setdomainname(java.lang.String, com.sun.jna.NativeLong)} and {@link #setdomainname(com.sun.jna.Pointer, com.sun.jna.NativeLong)} instead
	 */
	@Deprecated 
	int setdomainname(Pointer __name, NativeLong __len);
	/**
	 * Original signature : <code>int setdomainname(const char*, size_t)</code><br>
	 * <i>native declaration : unistd.h:3012</i>
	 */
	int setdomainname(String __name, NativeLong __len);
	/**
	 * Revoke access permissions to all processes currently communicating<br>
	 * with the control terminal, and then send a SIGHUP signal to the process<br>
	 * group of the control terminal.<br>
	 * Original signature : <code>int vhangup()</code><br>
	 * <i>native declaration : unistd.h:3019</i>
	 */
	int vhangup();
	/**
	 * Revoke the access of all descriptors currently open on FILE.<br>
	 * Original signature : <code>int revoke(const char*)</code><br>
	 * <i>native declaration : unistd.h:3024</i><br>
	 * @deprecated use the safer methods {@link #revoke(java.lang.String)} and {@link #revoke(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int revoke(Pointer __file);
	/**
	 * Revoke the access of all descriptors currently open on FILE.<br>
	 * Original signature : <code>int revoke(const char*)</code><br>
	 * <i>native declaration : unistd.h:3024</i>
	 */
	int revoke(String __file);
	/**
	 * Enable statistical profiling, writing samples of the PC into at most<br>
	 * SIZE bytes of SAMPLE_BUFFER; every processor clock tick while profiling<br>
	 * is enabled, the system examines the user PC and increments<br>
	 * SAMPLE_BUFFER[((PC - OFFSET) / 2) * SCALE / 65536].  If SCALE is zero,<br>
	 * disable profiling.  Returns zero on success, -1 on error.<br>
	 * Original signature : <code>int profil(unsigned short*, size_t, size_t, unsigned int)</code><br>
	 * <i>native declaration : unistd.h:3033</i><br>
	 * @deprecated use the safer methods {@link #profil(java.nio.ShortBuffer, com.sun.jna.NativeLong, com.sun.jna.NativeLong, int)} and {@link #profil(com.sun.jna.ptr.ShortByReference, com.sun.jna.NativeLong, com.sun.jna.NativeLong, int)} instead
	 */
	@Deprecated 
	int profil(ShortByReference __sample_buffer, NativeLong __size, NativeLong __offset, int __scale);
	/**
	 * Enable statistical profiling, writing samples of the PC into at most<br>
	 * SIZE bytes of SAMPLE_BUFFER; every processor clock tick while profiling<br>
	 * is enabled, the system examines the user PC and increments<br>
	 * SAMPLE_BUFFER[((PC - OFFSET) / 2) * SCALE / 65536].  If SCALE is zero,<br>
	 * disable profiling.  Returns zero on success, -1 on error.<br>
	 * Original signature : <code>int profil(unsigned short*, size_t, size_t, unsigned int)</code><br>
	 * <i>native declaration : unistd.h:3033</i>
	 */
	int profil(ShortBuffer __sample_buffer, NativeLong __size, NativeLong __offset, int __scale);
	/**
	 * Turn accounting on if NAME is an existing file.  The system will then write<br>
	 * a record for each process as it terminates, to this file.  If NAME is NULL,<br>
	 * turn accounting off.  This call is restricted to the super-user.<br>
	 * Original signature : <code>int acct(const char*)</code><br>
	 * <i>native declaration : unistd.h:3040</i><br>
	 * @deprecated use the safer methods {@link #acct(java.lang.String)} and {@link #acct(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int acct(Pointer __name);
	/**
	 * Turn accounting on if NAME is an existing file.  The system will then write<br>
	 * a record for each process as it terminates, to this file.  If NAME is NULL,<br>
	 * turn accounting off.  This call is restricted to the super-user.<br>
	 * Original signature : <code>int acct(const char*)</code><br>
	 * <i>native declaration : unistd.h:3040</i>
	 */
	int acct(String __name);
	/**
	 * Successive calls return the shells listed in `/etc/shells'.<br>
	 * Original signature : <code>char* getusershell()</code><br>
	 * <i>native declaration : unistd.h:3045</i>
	 */
	Pointer getusershell();
	/**
	 * Discard cached info.<br>
	 * Original signature : <code>void endusershell()</code><br>
	 * <i>native declaration : unistd.h:3050</i>
	 */
	void endusershell();
	/**
	 * Rewind and re-read the file.<br>
	 * Original signature : <code>void setusershell()</code><br>
	 * <i>native declaration : unistd.h:3055</i>
	 */
	void setusershell();
	/**
	 * Put the program in the background, and dissociate from the controlling<br>
	 * terminal.  If NOCHDIR is zero, do `chdir ("/")'.  If NOCLOSE is zero,<br>
	 * redirects stdin, stdout, and stderr to /dev/null.<br>
	 * Original signature : <code>int daemon(int, int)</code><br>
	 * <i>native declaration : unistd.h:3062</i>
	 */
	int daemon(int __nochdir, int __noclose);
	/**
	 * Make PATH be the root directory (the starting point for absolute paths).<br>
	 * This call is restricted to the super-user.<br>
	 * Original signature : <code>int chroot(const char*)</code><br>
	 * <i>native declaration : unistd.h:3068</i><br>
	 * @deprecated use the safer methods {@link #chroot(java.lang.String)} and {@link #chroot(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int chroot(Pointer __path);
	/**
	 * Make PATH be the root directory (the starting point for absolute paths).<br>
	 * This call is restricted to the super-user.<br>
	 * Original signature : <code>int chroot(const char*)</code><br>
	 * <i>native declaration : unistd.h:3068</i>
	 */
	int chroot(String __path);
	/**
	 * Prompt with PROMPT and read a string from the terminal without echoing.<br>
	 * Uses /dev/tty if possible; otherwise stderr and stdin.<br>
	 * Original signature : <code>char* getpass(const char*)</code><br>
	 * <i>native declaration : unistd.h:3074</i><br>
	 * @deprecated use the safer methods {@link #getpass(java.lang.String)} and {@link #getpass(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	Pointer getpass(Pointer __prompt);
	/**
	 * Prompt with PROMPT and read a string from the terminal without echoing.<br>
	 * Uses /dev/tty if possible; otherwise stderr and stdin.<br>
	 * Original signature : <code>char* getpass(const char*)</code><br>
	 * <i>native declaration : unistd.h:3074</i>
	 */
	Pointer getpass(String __prompt);
	/**
	 * Make all changes done to FD actually appear on disk.<br>
	 * This function is a cancellation point and therefore not marked with<br>
	 * __THROW.<br>
	 * Original signature : <code>int fsync(int)</code><br>
	 * <i>native declaration : unistd.h:3081</i>
	 */
	int fsync(int __fd);
	/**
	 * Return identifier for the current host.<br>
	 * Original signature : <code>long gethostid()</code><br>
	 * <i>native declaration : unistd.h:3086</i>
	 */
	NativeLong gethostid();
	/**
	 * Make all changes done to all files actually appear on disk.<br>
	 * Original signature : <code>void sync()</code><br>
	 * <i>native declaration : unistd.h:3091</i>
	 */
	void sync();
	/**
	 * Return the number of bytes in a page.  This is the system's page size,<br>
	 * which is not necessarily the same as the hardware page size.<br>
	 * Original signature : <code>int getpagesize()</code><br>
	 * <i>native declaration : unistd.h:3097</i>
	 */
	int getpagesize();
	/**
	 * Return the maximum number of file descriptors<br>
	 * the current process could possibly have.<br>
	 * Original signature : <code>int getdtablesize()</code><br>
	 * <i>native declaration : unistd.h:3103</i>
	 */
	int getdtablesize();
	/**
	 * Original signature : <code>int truncate(const char*, __off_t)</code><br>
	 * <i>native declaration : unistd.h:3105</i><br>
	 * @deprecated use the safer methods {@link #truncate(java.lang.String, com.sun.jna.NativeLong)} and {@link #truncate(com.sun.jna.Pointer, com.sun.jna.NativeLong)} instead
	 */
	@Deprecated 
	int truncate(Pointer __file, NativeLong __length);
	/**
	 * Original signature : <code>int truncate(const char*, __off_t)</code><br>
	 * <i>native declaration : unistd.h:3105</i>
	 */
	int truncate(String __file, NativeLong __length);
	/**
	 * Original signature : <code>int ftruncate(int, __off_t)</code><br>
	 * <i>native declaration : unistd.h:3107</i>
	 */
	int ftruncate(int __fd, NativeLong __length);
	/**
	 * Set the end of accessible data space (aka "the break") to ADDR.<br>
	 * Returns zero on success and -1 for errors (with errno set).<br>
	 * Original signature : <code>int brk(void*)</code><br>
	 * <i>native declaration : unistd.h:3113</i>
	 */
	int brk(Pointer __addr);
	/**
	 * Increase or decrease the end of accessible data space by DELTA bytes.<br>
	 * If successful, returns the address the previous end of data space<br>
	 * (i.e. the beginning of the new space, if DELTA > 0);<br>
	 * returns (void *) -1 for errors (with errno set).<br>
	 * Original signature : <code>void* sbrk(intptr_t)</code><br>
	 * <i>native declaration : unistd.h:3121</i><br>
	 * @deprecated use the safer methods {@link #sbrk(java.nio.IntBuffer)} and {@link #sbrk(com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	Pointer sbrk(IntByReference __delta);
	/**
	 * Increase or decrease the end of accessible data space by DELTA bytes.<br>
	 * If successful, returns the address the previous end of data space<br>
	 * (i.e. the beginning of the new space, if DELTA > 0);<br>
	 * returns (void *) -1 for errors (with errno set).<br>
	 * Original signature : <code>void* sbrk(intptr_t)</code><br>
	 * <i>native declaration : unistd.h:3121</i>
	 */
	Pointer sbrk(IntBuffer __delta);
	/**
	 * Invoke `system call' number SYSNO, passing it the remaining arguments.<br>
	 * This is completely system-dependent, and not often useful.<br>
	 * In Unix, `syscall' sets `errno' for all errors and most calls return -1<br>
	 * for errors; in many systems you cannot pass arguments or get return<br>
	 * values for all system calls (`pipe', `fork', and `getppid' typically<br>
	 * among them).<br>
	 * In Mach, all system calls take normal arguments and always return an<br>
	 * error code (zero for success).<br>
	 * Original signature : <code>long syscall(long, null)</code><br>
	 * <i>native declaration : unistd.h:3133</i>
	 */
	NativeLong syscall(NativeLong __sysno, Object... varargs);
	/**
	 * Synchronize at least the data part of a file with the underlying<br>
	 * media.<br>
	 * Original signature : <code>int fdatasync(int)</code><br>
	 * <i>native declaration : unistd.h:3139</i>
	 */
	int fdatasync(int __fildes);
	/**
	 * Get file attributes for FILE and put them in BUF.<br>
	 * Original signature : <code>int stat(const char*, stat*)</code><br>
	 * <i>native declaration : x86_64-linux-gnu/sys/stat.h:3146</i><br>
	 * @deprecated use the safer methods {@link #stat(java.lang.String, c.stat)} and {@link #stat(com.sun.jna.Pointer, c.stat)} instead
	 */
	@Deprecated 
	int stat(Pointer __file, stat __buf);
	/**
	 * Get file attributes for FILE and put them in BUF.<br>
	 * Original signature : <code>int stat(const char*, stat*)</code><br>
	 * <i>native declaration : x86_64-linux-gnu/sys/stat.h:3146</i>
	 */
	int stat(String __file, stat __buf);
	/**
	 * Get file attributes for the file, device, pipe, or socket<br>
	 * that file descriptor FD is open on and put them in BUF.<br>
	 * Original signature : <code>int fstat(int, stat*)</code><br>
	 * <i>native declaration : x86_64-linux-gnu/sys/stat.h:3152</i>
	 */
	int fstat(int __fd, stat __buf);
	/**
	 * Original signature : <code>int fstatat(int, const char*, stat*, int)</code><br>
	 * <i>native declaration : x86_64-linux-gnu/sys/stat.h:3154</i><br>
	 * @deprecated use the safer methods {@link #fstatat(int, java.lang.String, c.stat, int)} and {@link #fstatat(int, com.sun.jna.Pointer, c.stat, int)} instead
	 */
	@Deprecated 
	int fstatat(int __fd, Pointer __file, stat __buf, int __flag);
	/**
	 * Original signature : <code>int fstatat(int, const char*, stat*, int)</code><br>
	 * <i>native declaration : x86_64-linux-gnu/sys/stat.h:3154</i>
	 */
	int fstatat(int __fd, String __file, stat __buf, int __flag);
	/**
	 * Get file attributes about FILE and put them in BUF.<br>
	 * If FILE is a symbolic link, do not follow it.<br>
	 * Original signature : <code>int lstat(const char*, stat*)</code><br>
	 * <i>native declaration : x86_64-linux-gnu/sys/stat.h:3160</i><br>
	 * @deprecated use the safer methods {@link #lstat(java.lang.String, c.stat)} and {@link #lstat(com.sun.jna.Pointer, c.stat)} instead
	 */
	@Deprecated 
	int lstat(Pointer __file, stat __buf);
	/**
	 * Get file attributes about FILE and put them in BUF.<br>
	 * If FILE is a symbolic link, do not follow it.<br>
	 * Original signature : <code>int lstat(const char*, stat*)</code><br>
	 * <i>native declaration : x86_64-linux-gnu/sys/stat.h:3160</i>
	 */
	int lstat(String __file, stat __buf);
	/**
	 * Set file access permissions for FILE to MODE.<br>
	 * If FILE is a symbolic link, this affects its target instead.<br>
	 * Original signature : <code>int chmod(const char*, __mode_t)</code><br>
	 * <i>native declaration : x86_64-linux-gnu/sys/stat.h:3166</i><br>
	 * @deprecated use the safer methods {@link #chmod(java.lang.String, int)} and {@link #chmod(com.sun.jna.Pointer, int)} instead
	 */
	@Deprecated 
	int chmod(Pointer __file, int __mode);
	/**
	 * Set file access permissions for FILE to MODE.<br>
	 * If FILE is a symbolic link, this affects its target instead.<br>
	 * Original signature : <code>int chmod(const char*, __mode_t)</code><br>
	 * <i>native declaration : x86_64-linux-gnu/sys/stat.h:3166</i>
	 */
	int chmod(String __file, int __mode);
	/**
	 * Set file access permissions for FILE to MODE.<br>
	 * If FILE is a symbolic link, this affects the link itself<br>
	 * rather than its target.<br>
	 * Original signature : <code>int lchmod(const char*, __mode_t)</code><br>
	 * <i>native declaration : x86_64-linux-gnu/sys/stat.h:3173</i><br>
	 * @deprecated use the safer methods {@link #lchmod(java.lang.String, int)} and {@link #lchmod(com.sun.jna.Pointer, int)} instead
	 */
	@Deprecated 
	int lchmod(Pointer __file, int __mode);
	/**
	 * Set file access permissions for FILE to MODE.<br>
	 * If FILE is a symbolic link, this affects the link itself<br>
	 * rather than its target.<br>
	 * Original signature : <code>int lchmod(const char*, __mode_t)</code><br>
	 * <i>native declaration : x86_64-linux-gnu/sys/stat.h:3173</i>
	 */
	int lchmod(String __file, int __mode);
	/**
	 * Original signature : <code>int fchmod(int, __mode_t)</code><br>
	 * <i>native declaration : x86_64-linux-gnu/sys/stat.h:3175</i>
	 */
	int fchmod(int __fd, int __mode);
	/**
	 * Set file access permissions of FILE relative to<br>
	 * the directory FD is open on.<br>
	 * Original signature : <code>int fchmodat(int, const char*, __mode_t, int)</code><br>
	 * <i>native declaration : x86_64-linux-gnu/sys/stat.h:3181</i><br>
	 * @deprecated use the safer methods {@link #fchmodat(int, java.lang.String, int, int)} and {@link #fchmodat(int, com.sun.jna.Pointer, int, int)} instead
	 */
	@Deprecated 
	int fchmodat(int __fd, Pointer __file, int __mode, int __flag);
	/**
	 * Set file access permissions of FILE relative to<br>
	 * the directory FD is open on.<br>
	 * Original signature : <code>int fchmodat(int, const char*, __mode_t, int)</code><br>
	 * <i>native declaration : x86_64-linux-gnu/sys/stat.h:3181</i>
	 */
	int fchmodat(int __fd, String __file, int __mode, int __flag);
	/**
	 * Set the file creation mask of the current process to MASK,<br>
	 * and return the old creation mask.<br>
	 * Original signature : <code>__mode_t umask(__mode_t)</code><br>
	 * <i>native declaration : x86_64-linux-gnu/sys/stat.h:3187</i>
	 */
	int umask(int __mask);
	/**
	 * Create a new directory named PATH, with permission bits MODE.<br>
	 * Original signature : <code>int mkdir(const char*, __mode_t)</code><br>
	 * <i>native declaration : x86_64-linux-gnu/sys/stat.h:3192</i><br>
	 * @deprecated use the safer methods {@link #mkdir(java.lang.String, int)} and {@link #mkdir(com.sun.jna.Pointer, int)} instead
	 */
	@Deprecated 
	int mkdir(Pointer __path, int __mode);
	/**
	 * Create a new directory named PATH, with permission bits MODE.<br>
	 * Original signature : <code>int mkdir(const char*, __mode_t)</code><br>
	 * <i>native declaration : x86_64-linux-gnu/sys/stat.h:3192</i>
	 */
	int mkdir(String __path, int __mode);
	/**
	 * Like mkdir, create a new directory with permission bits MODE.  But<br>
	 * interpret relative PATH names relative to the directory associated<br>
	 * with FD.<br>
	 * Original signature : <code>int mkdirat(int, const char*, __mode_t)</code><br>
	 * <i>native declaration : x86_64-linux-gnu/sys/stat.h:3199</i><br>
	 * @deprecated use the safer methods {@link #mkdirat(int, java.lang.String, int)} and {@link #mkdirat(int, com.sun.jna.Pointer, int)} instead
	 */
	@Deprecated 
	int mkdirat(int __fd, Pointer __path, int __mode);
	/**
	 * Like mkdir, create a new directory with permission bits MODE.  But<br>
	 * interpret relative PATH names relative to the directory associated<br>
	 * with FD.<br>
	 * Original signature : <code>int mkdirat(int, const char*, __mode_t)</code><br>
	 * <i>native declaration : x86_64-linux-gnu/sys/stat.h:3199</i>
	 */
	int mkdirat(int __fd, String __path, int __mode);
	/**
	 * Original signature : <code>int mknod(const char*, __mode_t, __dev_t)</code><br>
	 * <i>native declaration : x86_64-linux-gnu/sys/stat.h:3201</i><br>
	 * @deprecated use the safer methods {@link #mknod(java.lang.String, int, com.sun.jna.NativeLong)} and {@link #mknod(com.sun.jna.Pointer, int, com.sun.jna.NativeLong)} instead
	 */
	@Deprecated 
	int mknod(Pointer __path, int __mode, NativeLong __dev);
	/**
	 * Original signature : <code>int mknod(const char*, __mode_t, __dev_t)</code><br>
	 * <i>native declaration : x86_64-linux-gnu/sys/stat.h:3201</i>
	 */
	int mknod(String __path, int __mode, NativeLong __dev);
	/**
	 * Like mknod, create a new device file with permission bits MODE and<br>
	 * device number DEV.  But interpret relative PATH names relative to<br>
	 * the directory associated with FD.<br>
	 * Original signature : <code>int mknodat(int, const char*, __mode_t, __dev_t)</code><br>
	 * <i>native declaration : x86_64-linux-gnu/sys/stat.h:3208</i><br>
	 * @deprecated use the safer methods {@link #mknodat(int, java.lang.String, int, com.sun.jna.NativeLong)} and {@link #mknodat(int, com.sun.jna.Pointer, int, com.sun.jna.NativeLong)} instead
	 */
	@Deprecated 
	int mknodat(int __fd, Pointer __path, int __mode, NativeLong __dev);
	/**
	 * Like mknod, create a new device file with permission bits MODE and<br>
	 * device number DEV.  But interpret relative PATH names relative to<br>
	 * the directory associated with FD.<br>
	 * Original signature : <code>int mknodat(int, const char*, __mode_t, __dev_t)</code><br>
	 * <i>native declaration : x86_64-linux-gnu/sys/stat.h:3208</i>
	 */
	int mknodat(int __fd, String __path, int __mode, NativeLong __dev);
	/**
	 * Create a new FIFO named PATH, with permission bits MODE.<br>
	 * Original signature : <code>int mkfifo(const char*, __mode_t)</code><br>
	 * <i>native declaration : x86_64-linux-gnu/sys/stat.h:3213</i><br>
	 * @deprecated use the safer methods {@link #mkfifo(java.lang.String, int)} and {@link #mkfifo(com.sun.jna.Pointer, int)} instead
	 */
	@Deprecated 
	int mkfifo(Pointer __path, int __mode);
	/**
	 * Create a new FIFO named PATH, with permission bits MODE.<br>
	 * Original signature : <code>int mkfifo(const char*, __mode_t)</code><br>
	 * <i>native declaration : x86_64-linux-gnu/sys/stat.h:3213</i>
	 */
	int mkfifo(String __path, int __mode);
	/**
	 * Like mkfifo, create a new FIFO with permission bits MODE.  But<br>
	 * interpret relative PATH names relative to the directory associated<br>
	 * with FD.<br>
	 * Original signature : <code>int mkfifoat(int, const char*, __mode_t)</code><br>
	 * <i>native declaration : x86_64-linux-gnu/sys/stat.h:3220</i><br>
	 * @deprecated use the safer methods {@link #mkfifoat(int, java.lang.String, int)} and {@link #mkfifoat(int, com.sun.jna.Pointer, int)} instead
	 */
	@Deprecated 
	int mkfifoat(int __fd, Pointer __path, int __mode);
	/**
	 * Like mkfifo, create a new FIFO with permission bits MODE.  But<br>
	 * interpret relative PATH names relative to the directory associated<br>
	 * with FD.<br>
	 * Original signature : <code>int mkfifoat(int, const char*, __mode_t)</code><br>
	 * <i>native declaration : x86_64-linux-gnu/sys/stat.h:3220</i>
	 */
	int mkfifoat(int __fd, String __path, int __mode);
	/**
	 * Set file access and modification times relative to directory file<br>
	 * descriptor.<br>
	 * Original signature : <code>int utimensat(int, const char*, timespec[2], int)</code><br>
	 * <i>native declaration : x86_64-linux-gnu/sys/stat.h:3226</i><br>
	 * @deprecated use the safer methods {@link #utimensat(int, java.lang.String, c.timespec[], int)} and {@link #utimensat(int, com.sun.jna.Pointer, c.timespec[], int)} instead
	 */
	@Deprecated 
	int utimensat(int __fd, Pointer __path, Pointer __times, int __flags);
	/**
	 * Set file access and modification times relative to directory file<br>
	 * descriptor.<br>
	 * Original signature : <code>int utimensat(int, const char*, timespec[2], int)</code><br>
	 * <i>native declaration : x86_64-linux-gnu/sys/stat.h:3226</i>
	 */
	int utimensat(int __fd, String __path, timespec __times[], int __flags);
	/**
	 * Set file access and modification times relative to directory file<br>
	 * descriptor.<br>
	 * Original signature : <code>int utimensat(int, const char*, timespec[2], int)</code><br>
	 * <i>native declaration : x86_64-linux-gnu/sys/stat.h:3226</i>
	 */
	int utimensat(int __fd, Pointer __path, timespec __times[], int __flags);
	/**
	 * Set file access and modification times of the file associated with FD.<br>
	 * Original signature : <code>int futimens(int, timespec[2])</code><br>
	 * <i>native declaration : x86_64-linux-gnu/sys/stat.h:3231</i><br>
	 * @deprecated use the safer method {@link #futimens(int, c.timespec[])} instead
	 */
	@Deprecated 
	int futimens(int __fd, Pointer __times);
	/**
	 * Set file access and modification times of the file associated with FD.<br>
	 * Original signature : <code>int futimens(int, timespec[2])</code><br>
	 * <i>native declaration : x86_64-linux-gnu/sys/stat.h:3231</i>
	 */
	int futimens(int __fd, timespec __times[]);
	/**
	 * Original signature : <code>int __fxstat(int, int, stat*)</code><br>
	 * <i>native declaration : x86_64-linux-gnu/sys/stat.h:3233</i>
	 */
	int __fxstat(int __ver, int __fildes, stat __stat_buf);
	/**
	 * Original signature : <code>int __xstat(int, const char*, stat*)</code><br>
	 * <i>native declaration : x86_64-linux-gnu/sys/stat.h:3235</i><br>
	 * @deprecated use the safer methods {@link #__xstat(int, java.lang.String, c.stat)} and {@link #__xstat(int, com.sun.jna.Pointer, c.stat)} instead
	 */
	@Deprecated 
	int __xstat(int __ver, Pointer __filename, stat __stat_buf);
	/**
	 * Original signature : <code>int __xstat(int, const char*, stat*)</code><br>
	 * <i>native declaration : x86_64-linux-gnu/sys/stat.h:3235</i>
	 */
	int __xstat(int __ver, String __filename, stat __stat_buf);
	/**
	 * Original signature : <code>int __lxstat(int, const char*, stat*)</code><br>
	 * <i>native declaration : x86_64-linux-gnu/sys/stat.h:3237</i><br>
	 * @deprecated use the safer methods {@link #__lxstat(int, java.lang.String, c.stat)} and {@link #__lxstat(int, com.sun.jna.Pointer, c.stat)} instead
	 */
	@Deprecated 
	int __lxstat(int __ver, Pointer __filename, stat __stat_buf);
	/**
	 * Original signature : <code>int __lxstat(int, const char*, stat*)</code><br>
	 * <i>native declaration : x86_64-linux-gnu/sys/stat.h:3237</i>
	 */
	int __lxstat(int __ver, String __filename, stat __stat_buf);
	/**
	 * Original signature : <code>int __fxstatat(int, int, const char*, stat*, int)</code><br>
	 * <i>native declaration : x86_64-linux-gnu/sys/stat.h:3239</i><br>
	 * @deprecated use the safer methods {@link #__fxstatat(int, int, java.lang.String, c.stat, int)} and {@link #__fxstatat(int, int, com.sun.jna.Pointer, c.stat, int)} instead
	 */
	@Deprecated 
	int __fxstatat(int __ver, int __fildes, Pointer __filename, stat __stat_buf, int __flag);
	/**
	 * Original signature : <code>int __fxstatat(int, int, const char*, stat*, int)</code><br>
	 * <i>native declaration : x86_64-linux-gnu/sys/stat.h:3239</i>
	 */
	int __fxstatat(int __ver, int __fildes, String __filename, stat __stat_buf, int __flag);
	/**
	 * Original signature : <code>int __xmknod(int, const char*, __mode_t, __dev_t*)</code><br>
	 * <i>native declaration : x86_64-linux-gnu/sys/stat.h:3241</i><br>
	 * @deprecated use the safer methods {@link #__xmknod(int, java.lang.String, int, com.sun.jna.ptr.NativeLongByReference)} and {@link #__xmknod(int, com.sun.jna.Pointer, int, com.sun.jna.ptr.NativeLongByReference)} instead
	 */
	@Deprecated 
	int __xmknod(int __ver, Pointer __path, int __mode, NativeLongByReference __dev);
	/**
	 * Original signature : <code>int __xmknod(int, const char*, __mode_t, __dev_t*)</code><br>
	 * <i>native declaration : x86_64-linux-gnu/sys/stat.h:3241</i>
	 */
	int __xmknod(int __ver, String __path, int __mode, NativeLongByReference __dev);
	/**
	 * Original signature : <code>int __xmknodat(int, int, const char*, __mode_t, __dev_t*)</code><br>
	 * <i>native declaration : x86_64-linux-gnu/sys/stat.h:3243</i><br>
	 * @deprecated use the safer methods {@link #__xmknodat(int, int, java.lang.String, int, com.sun.jna.ptr.NativeLongByReference)} and {@link #__xmknodat(int, int, com.sun.jna.Pointer, int, com.sun.jna.ptr.NativeLongByReference)} instead
	 */
	@Deprecated 
	int __xmknodat(int __ver, int __fd, Pointer __path, int __mode, NativeLongByReference __dev);
	/**
	 * Original signature : <code>int __xmknodat(int, int, const char*, __mode_t, __dev_t*)</code><br>
	 * <i>native declaration : x86_64-linux-gnu/sys/stat.h:3243</i>
	 */
	int __xmknodat(int __ver, int __fd, String __path, int __mode, NativeLongByReference __dev);
	/**
	 * Wait for a child to die.  When one does, put its status in *STAT_LOC<br>
	 * and return its process ID.  For errors, return (pid_t) -1.<br>
	 * This function is a cancellation point and therefore not marked with<br>
	 * __THROW.<br>
	 * Original signature : <code>__pid_t wait(void*)</code><br>
	 * <i>native declaration : x86_64-linux-gnu/sys/wait.h:3258</i>
	 */
	int wait$(Pointer __stat_loc);
	/**
	 * Wait for a child matching PID to die.<br>
	 * If PID is greater than 0, match any process whose process ID is PID.<br>
	 * If PID is (pid_t) -1, match any process.<br>
	 * If PID is (pid_t) 0, match any process with the<br>
	 * same process group as the current process.<br>
	 * If PID is less than -1, match any process whose<br>
	 * process group is the absolute value of PID.<br>
	 * If the WNOHANG bit is set in OPTIONS, and that child<br>
	 * is not already dead, return (pid_t) 0.  If successful,<br>
	 * return PID and store the dead child's status in STAT_LOC.<br>
	 * Return (pid_t) -1 for errors.  If the WUNTRACED bit is<br>
	 * set in OPTIONS, return status for stopped children; otherwise don't.<br>
	 * This function is a cancellation point and therefore not marked with<br>
	 * __THROW.<br>
	 * Original signature : <code>__pid_t waitpid(__pid_t, int*, int)</code><br>
	 * <i>native declaration : x86_64-linux-gnu/sys/wait.h:3276</i><br>
	 * @deprecated use the safer methods {@link #waitpid(int, java.nio.IntBuffer, int)} and {@link #waitpid(int, com.sun.jna.ptr.IntByReference, int)} instead
	 */
	@Deprecated 
	int waitpid(int __pid, IntByReference __stat_loc, int __options);
	/**
	 * Wait for a child matching PID to die.<br>
	 * If PID is greater than 0, match any process whose process ID is PID.<br>
	 * If PID is (pid_t) -1, match any process.<br>
	 * If PID is (pid_t) 0, match any process with the<br>
	 * same process group as the current process.<br>
	 * If PID is less than -1, match any process whose<br>
	 * process group is the absolute value of PID.<br>
	 * If the WNOHANG bit is set in OPTIONS, and that child<br>
	 * is not already dead, return (pid_t) 0.  If successful,<br>
	 * return PID and store the dead child's status in STAT_LOC.<br>
	 * Return (pid_t) -1 for errors.  If the WUNTRACED bit is<br>
	 * set in OPTIONS, return status for stopped children; otherwise don't.<br>
	 * This function is a cancellation point and therefore not marked with<br>
	 * __THROW.<br>
	 * Original signature : <code>__pid_t waitpid(__pid_t, int*, int)</code><br>
	 * <i>native declaration : x86_64-linux-gnu/sys/wait.h:3276</i>
	 */
	int waitpid(int __pid, IntBuffer __stat_loc, int __options);
	/**
	 * Wait for a childing matching IDTYPE and ID to change the status and<br>
	 * place appropriate information in *INFOP.<br>
	 * If IDTYPE is P_PID, match any process whose process ID is ID.<br>
	 * If IDTYPE is P_PGID, match any process whose process group is ID.<br>
	 * If IDTYPE is P_ALL, match any process.<br>
	 * If the WNOHANG bit is set in OPTIONS, and that child<br>
	 * is not already dead, clear *INFOP and return 0.  If successful, store<br>
	 * exit code and status in *INFOP.<br>
	 * This function is a cancellation point and therefore not marked with<br>
	 * __THROW.<br>
	 * Original signature : <code>int waitid(idtype_t, __id_t, siginfo_t*, int)</code><br>
	 * <i>native declaration : x86_64-linux-gnu/sys/wait.h:3290</i>
	 */
	int waitid(int __idtype, int __id, siginfo_t __infop, int __options);
	/**
	 * Wait for a child to exit.  When one does, put its status in *STAT_LOC and<br>
	 * return its process ID.  For errors return (pid_t) -1.  If USAGE is not<br>
	 * nil, store information about the child's resource usage there.  If the<br>
	 * WUNTRACED bit is set in OPTIONS, return status for stopped children;<br>
	 * otherwise don't.<br>
	 * Original signature : <code>__pid_t wait3(void*, int, rusage*)</code><br>
	 * <i>native declaration : x86_64-linux-gnu/sys/wait.h:3304</i>
	 */
	int wait3(Pointer __stat_loc, int __options, CLibrary.rusage __usage);
	/**
	 * PID is like waitpid.  Other args are like wait3.<br>
	 * Original signature : <code>__pid_t wait4(__pid_t, void*, int, rusage*)</code><br>
	 * <i>native declaration : x86_64-linux-gnu/sys/wait.h:3309</i>
	 */
	int wait4(int __pid, Pointer __stat_loc, int __options, CLibrary.rusage __usage);
	/**
	 * Perform the I/O control operation specified by REQUEST on FD.<br>
	 * One argument may follow; its presence and type depend on REQUEST.<br>
	 * Return value depends on REQUEST.  Usually -1 indicates error.<br>
	 * Original signature : <code>int ioctl(int, unsigned long, null)</code><br>
	 * <i>native declaration : x86_64-linux-gnu/sys/ioctl.h:3332</i>
	 */
	int ioctl(int __fd, NativeLong __request, Object... varargs);
	/**
	 * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
	 * SKIPPED:<br>
	 * <i>native declaration : libio.h:1510</i><br>
	 * _IO_2_1_stdin_
	 */
	/**
	 * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
	 * SKIPPED:<br>
	 * <i>native declaration : libio.h:1511</i><br>
	 * _IO_2_1_stdout_
	 */
	/**
	 * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
	 * SKIPPED:<br>
	 * <i>native declaration : libio.h:1512</i><br>
	 * _IO_2_1_stderr_
	 */
	/**
	 * Standard streams.<br>
	 * Standard input stream.
	 */
//	public static final GlobalStruct<_IO_FILE > stdin = new GlobalStruct<_IO_FILE >(CLibrary.JNA_NATIVE_LIB, _IO_FILE.class, "stdin");
//	/** Standard output stream. */
//	public static final GlobalStruct<_IO_FILE > stdout = new GlobalStruct<_IO_FILE >(CLibrary.JNA_NATIVE_LIB, _IO_FILE.class, "stdout");
//	/** Standard error output stream. */
//	public static final GlobalStruct<_IO_FILE > stderr = new GlobalStruct<_IO_FILE >(CLibrary.JNA_NATIVE_LIB, _IO_FILE.class, "stderr");
//	public static final GlobalInt sys_nerr = new GlobalInt(CLibrary.JNA_NATIVE_LIB, "sys_nerr");
//	public static final GlobalPointerType<ByteByReference > optarg = new GlobalPointerType<ByteByReference >(CLibrary.JNA_NATIVE_LIB, ByteByReference.class, "optarg");
//	public static final GlobalInt optind = new GlobalInt(CLibrary.JNA_NATIVE_LIB, "optind");
//	public static final GlobalInt opterr = new GlobalInt(CLibrary.JNA_NATIVE_LIB, "opterr");
//	public static final GlobalInt optopt = new GlobalInt(CLibrary.JNA_NATIVE_LIB, "optopt");
	public static class _IO_FILE_plus extends PointerType {
		public _IO_FILE_plus(Pointer address) {
			super(address);
		}
		public _IO_FILE_plus() {
			super();
		}
	};
	public static class rusage extends PointerType {
		public rusage(Pointer address) {
			super(address);
		}
		public rusage() {
			super();
		}
	};
	public static class _IO_lock_t extends PointerType {
		public _IO_lock_t(Pointer address) {
			super(address);
		}
		public _IO_lock_t() {
			super();
		}
	};
	public static class __gnuc_va_list extends PointerType {
		public __gnuc_va_list(Pointer address) {
			super(address);
		}
		public __gnuc_va_list() {
			super();
		}
	};
	public static class t_uscalar_t extends PointerType {
		public t_uscalar_t(Pointer address) {
			super(address);
		}
		public t_uscalar_t() {
			super();
		}
	};
}
