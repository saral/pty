package c;
import com.sun.jna.NativeLong;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * <i>native declaration : bits/sigcontext.h:625</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class _xsave_hdr extends Structure {
	/** C type : __uint64_t */
	public NativeLong xstate_bv;
	/** C type : __uint64_t[2] */
	public NativeLong[] reserved1 = new NativeLong[2];
	/** C type : __uint64_t[5] */
	public NativeLong[] reserved2 = new NativeLong[5];
	public _xsave_hdr() {
		super();
	}
	protected List<? > getFieldOrder() {
		return Arrays.asList("xstate_bv", "reserved1", "reserved2");
	}
	/**
	 * @param xstate_bv C type : __uint64_t<br>
	 * @param reserved1 C type : __uint64_t[2]<br>
	 * @param reserved2 C type : __uint64_t[5]
	 */
	public _xsave_hdr(NativeLong xstate_bv, NativeLong reserved1[], NativeLong reserved2[]) {
		super();
		this.xstate_bv = xstate_bv;
		if ((reserved1.length != this.reserved1.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.reserved1 = reserved1;
		if ((reserved2.length != this.reserved2.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.reserved2 = reserved2;
	}
	public static class ByReference extends _xsave_hdr implements Structure.ByReference {
		
	};
	public static class ByValue extends _xsave_hdr implements Structure.ByValue {
		
	};
}
