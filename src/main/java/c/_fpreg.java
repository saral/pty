package c;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * <i>native declaration : bits/sigcontext.h:564</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class _fpreg extends Structure {
	/** C type : unsigned short[4] */
	public short[] significand = new short[4];
	public short exponent;
	public _fpreg() {
		super();
	}
	protected List<? > getFieldOrder() {
		return Arrays.asList("significand", "exponent");
	}
	/** @param significand C type : unsigned short[4] */
	public _fpreg(short significand[], short exponent) {
		super();
		if ((significand.length != this.significand.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.significand = significand;
		this.exponent = exponent;
	}
	public static class ByReference extends _fpreg implements Structure.ByReference {
		
	};
	public static class ByValue extends _fpreg implements Structure.ByValue {
		
	};
}
