package c;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * <i>native declaration : x86_64-linux-gnu/bits/stropts.h:98</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class strioctl extends Structure {
	public int ic_cmd;
	public int ic_timout;
	public int ic_len;
	/** C type : char* */
	public Pointer ic_dp;
	public strioctl() {
		super();
	}
	protected List<? > getFieldOrder() {
		return Arrays.asList("ic_cmd", "ic_timout", "ic_len", "ic_dp");
	}
	/** @param ic_dp C type : char* */
	public strioctl(int ic_cmd, int ic_timout, int ic_len, Pointer ic_dp) {
		super();
		this.ic_cmd = ic_cmd;
		this.ic_timout = ic_timout;
		this.ic_len = ic_len;
		this.ic_dp = ic_dp;
	}
	public static class ByReference extends strioctl implements Structure.ByReference {
		
	};
	public static class ByValue extends strioctl implements Structure.ByValue {
		
	};
}
