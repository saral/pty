package c;
import com.sun.jna.NativeLong;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * <i>native declaration : sys/ucontext.h:697</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class mcontext_t extends Structure {
	/** C type : gregset_t */
	public NativeLong[] gregs = new NativeLong[23];
	/**
	 * Note that fpregs is a pointer.<br>
	 * C type : fpregset_t
	 */
	public c._libc_fpstate.ByReference fpregs;
	/** C type : unsigned long long[8] */
	public long[] __reserved1 = new long[8];
	public mcontext_t() {
		super();
	}
	protected List<? > getFieldOrder() {
		return Arrays.asList("gregs", "fpregs", "__reserved1");
	}
	/**
	 * @param gregs C type : gregset_t<br>
	 * @param fpregs Note that fpregs is a pointer.<br>
	 * C type : fpregset_t<br>
	 * @param __reserved1 C type : unsigned long long[8]
	 */
	public mcontext_t(NativeLong gregs[], c._libc_fpstate.ByReference fpregs, long __reserved1[]) {
		super();
		if ((gregs.length != this.gregs.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.gregs = gregs;
		this.fpregs = fpregs;
		if ((__reserved1.length != this.__reserved1.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.__reserved1 = __reserved1;
	}
	public static class ByReference extends mcontext_t implements Structure.ByReference {
		
	};
	public static class ByValue extends mcontext_t implements Structure.ByValue {
		
	};
}
