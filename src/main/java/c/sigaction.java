package c;
import c.CLibrary.__sighandler_t;
import com.sun.jna.Callback;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import com.sun.jna.Union;
import java.util.Arrays;
import java.util.List;
/**
 * Structure describing the action to be taken when a signal arrives.<br>
 * <i>native declaration : bits/sigaction.h:481</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class sigaction extends Structure {
	/** C type : __sigaction_handler_union */
	public __sigaction_handler_union __sigaction_handler;
	/**
	 * Additional set of signals to be blocked.<br>
	 * C type : __sigset_t
	 */
	public __sigset_t sa_mask;
	/** Special flags. */
	public int sa_flags;
	/**
	 * Restore handler.<br>
	 * C type : sa_restorer_callback*
	 */
	public sigaction.sa_restorer_callback sa_restorer;
	/** <i>native declaration : bits/sigaction.h:479</i> */
	public static class __sigaction_handler_union extends Union {
		/**
		 * Used if SA_SIGINFO is not set.<br>
		 * C type : __sighandler_t
		 */
		public __sighandler_t sa_handler;
		/**
		 * Used if SA_SIGINFO is set.<br>
		 * C type : sa_sigaction_callback*
		 */
		public sigaction.__sigaction_handler_union.sa_sigaction_callback sa_sigaction;
		/** <i>native declaration : bits/sigaction.h:478</i> */
		public interface sa_sigaction_callback extends Callback {
			void apply(int int1, siginfo_t siginfo_tPtr1, Pointer voidPtr1);
		};
		public __sigaction_handler_union() {
			super();
		}
		/**
		 * @param sa_handler Used if SA_SIGINFO is not set.<br>
		 * C type : __sighandler_t
		 */
		public __sigaction_handler_union(__sighandler_t sa_handler) {
			super();
			this.sa_handler = sa_handler;
			setType(__sighandler_t.class);
		}
		/**
		 * @param sa_sigaction Used if SA_SIGINFO is set.<br>
		 * C type : sa_sigaction_callback*
		 */
		public __sigaction_handler_union(sigaction.__sigaction_handler_union.sa_sigaction_callback sa_sigaction) {
			super();
			this.sa_sigaction = sa_sigaction;
			setType(sigaction.__sigaction_handler_union.sa_sigaction_callback.class);
		}
		public static class ByReference extends __sigaction_handler_union implements Structure.ByReference {
			
		};
		public static class ByValue extends __sigaction_handler_union implements Structure.ByValue {
			
		};
	};
	/** <i>native declaration : bits/sigaction.h:480</i> */
	public interface sa_restorer_callback extends Callback {
		void apply();
	};
	public sigaction() {
		super();
	}
	protected List<? > getFieldOrder() {
		return Arrays.asList("__sigaction_handler", "sa_mask", "sa_flags", "sa_restorer");
	}
	/**
	 * @param __sigaction_handler C type : __sigaction_handler_union<br>
	 * @param sa_mask Additional set of signals to be blocked.<br>
	 * C type : __sigset_t<br>
	 * @param sa_flags Special flags.<br>
	 * @param sa_restorer Restore handler.<br>
	 * C type : sa_restorer_callback*
	 */
	public sigaction(__sigaction_handler_union __sigaction_handler, __sigset_t sa_mask, int sa_flags, sigaction.sa_restorer_callback sa_restorer) {
		super();
		this.__sigaction_handler = __sigaction_handler;
		this.sa_mask = sa_mask;
		this.sa_flags = sa_flags;
		this.sa_restorer = sa_restorer;
	}
	public static class ByReference extends sigaction implements Structure.ByReference {
		
	};
	public static class ByValue extends sigaction implements Structure.ByValue {
		
	};
}
