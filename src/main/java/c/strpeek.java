package c;
import c.CLibrary.t_uscalar_t;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * <i>native declaration : x86_64-linux-gnu/bits/stropts.h:85</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class strpeek extends Structure {
	/** C type : strbuf */
	public strbuf ctlbuf;
	/** C type : strbuf */
	public strbuf databuf;
	/**
	 * UnixWare/Solaris compatibility.<br>
	 * C type : t_uscalar_t
	 */
	public t_uscalar_t flags;
	public strpeek() {
		super();
	}
	protected List<? > getFieldOrder() {
		return Arrays.asList("ctlbuf", "databuf", "flags");
	}
	/**
	 * @param ctlbuf C type : strbuf<br>
	 * @param databuf C type : strbuf<br>
	 * @param flags UnixWare/Solaris compatibility.<br>
	 * C type : t_uscalar_t
	 */
	public strpeek(strbuf ctlbuf, strbuf databuf, t_uscalar_t flags) {
		super();
		this.ctlbuf = ctlbuf;
		this.databuf = databuf;
		this.flags = flags;
	}
	public static class ByReference extends strpeek implements Structure.ByReference {
		
	};
	public static class ByValue extends strpeek implements Structure.ByValue {
		
	};
}
