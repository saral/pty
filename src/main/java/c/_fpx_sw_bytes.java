package c;
import com.sun.jna.NativeLong;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * <i>native declaration : bits/sigcontext.h:560</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class _fpx_sw_bytes extends Structure {
	public int magic1;
	public int extended_size;
	/** C type : __uint64_t */
	public NativeLong xstate_bv;
	public int xstate_size;
	/** C type : __uint32_t[7] */
	public int[] padding = new int[7];
	public _fpx_sw_bytes() {
		super();
	}
	protected List<? > getFieldOrder() {
		return Arrays.asList("magic1", "extended_size", "xstate_bv", "xstate_size", "padding");
	}
	/**
	 * @param xstate_bv C type : __uint64_t<br>
	 * @param padding C type : __uint32_t[7]
	 */
	public _fpx_sw_bytes(int magic1, int extended_size, NativeLong xstate_bv, int xstate_size, int padding[]) {
		super();
		this.magic1 = magic1;
		this.extended_size = extended_size;
		this.xstate_bv = xstate_bv;
		this.xstate_size = xstate_size;
		if ((padding.length != this.padding.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.padding = padding;
	}
	public static class ByReference extends _fpx_sw_bytes implements Structure.ByReference {
		
	};
	public static class ByValue extends _fpx_sw_bytes implements Structure.ByValue {
		
	};
}
