package c;
import com.sun.jna.NativeLong;
import com.sun.jna.Structure;
import com.sun.jna.Union;
import java.util.Arrays;
import java.util.List;
/**
 * <i>native declaration : bits/pthreadtypes.h:754</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class pthread_mutex_t extends Union {
	/** C type : __pthread_mutex_s */
	public __pthread_mutex_s __data;
	/** C type : char[40] */
	public byte[] __size = new byte[40];
	public NativeLong __align;
	/** <i>native declaration : bits/pthreadtypes.h:753</i> */
	public static class __pthread_mutex_s extends Structure {
		public int __lock;
		public int __count;
		public int __owner;
		public int __nusers;
		/**
		 * KIND must stay at this position in the structure to maintain<br>
		 * binary compatibility.
		 */
		public int __kind;
		public int __spins;
		/** C type : __pthread_list_t */
		public __pthread_internal_list __list;
		public __pthread_mutex_s() {
			super();
		}
		protected List<? > getFieldOrder() {
			return Arrays.asList("__lock", "__count", "__owner", "__nusers", "__kind", "__spins", "__list");
		}
		/**
		 * @param __kind KIND must stay at this position in the structure to maintain<br>
		 * binary compatibility.<br>
		 * @param __list C type : __pthread_list_t
		 */
		public __pthread_mutex_s(int __lock, int __count, int __owner, int __nusers, int __kind, int __spins, __pthread_internal_list __list) {
			super();
			this.__lock = __lock;
			this.__count = __count;
			this.__owner = __owner;
			this.__nusers = __nusers;
			this.__kind = __kind;
			this.__spins = __spins;
			this.__list = __list;
		}
		public static class ByReference extends __pthread_mutex_s implements Structure.ByReference {
			
		};
		public static class ByValue extends __pthread_mutex_s implements Structure.ByValue {
			
		};
	};
	public pthread_mutex_t() {
		super();
	}
	public pthread_mutex_t(NativeLong __align) {
		super();
		this.__align = __align;
		setType(NativeLong.class);
	}
	/** @param __data C type : __pthread_mutex_s */
	public pthread_mutex_t(__pthread_mutex_s __data) {
		super();
		this.__data = __data;
		setType(__pthread_mutex_s.class);
	}
	/** @param __size C type : char[40] */
	public pthread_mutex_t(byte __size[]) {
		super();
		if ((__size.length != this.__size.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.__size = __size;
		setType(byte[].class);
	}
	public static class ByReference extends pthread_mutex_t implements Structure.ByReference {
		
	};
	public static class ByValue extends pthread_mutex_t implements Structure.ByValue {
		
	};
}
