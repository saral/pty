package c;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * <i>native declaration : x86_64-linux-gnu/bits/stropts.h:80</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class strbuf extends Structure {
	/** Maximum buffer length. */
	public int maxlen;
	/** Length of data. */
	public int len;
	/**
	 * Pointer to buffer.<br>
	 * C type : char*
	 */
	public Pointer buf;
	public strbuf() {
		super();
	}
	protected List<? > getFieldOrder() {
		return Arrays.asList("maxlen", "len", "buf");
	}
	/**
	 * @param maxlen Maximum buffer length.<br>
	 * @param len Length of data.<br>
	 * @param buf Pointer to buffer.<br>
	 * C type : char*
	 */
	public strbuf(int maxlen, int len, Pointer buf) {
		super();
		this.maxlen = maxlen;
		this.len = len;
		this.buf = buf;
	}
	public static class ByReference extends strbuf implements Structure.ByReference {
		
	};
	public static class ByValue extends strbuf implements Structure.ByValue {
		
	};
}
