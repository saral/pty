package c;
import com.sun.jna.NativeLong;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import com.sun.jna.Union;
import java.util.Arrays;
import java.util.List;
/**
 * <i>native declaration : bits/siginfo.h:270</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class siginfo_t extends Structure {
	/** Signal number. */
	public int si_signo;
	/**
	 * If non-zero, an errno value associated with<br>
	 * this signal, as defined in <errno.h>.
	 */
	public int si_errno;
	/** Signal code. */
	public int si_code;
	/** C type : _sifields_union */
	public _sifields_union _sifields;
	/** <i>native declaration : bits/siginfo.h:269</i> */
	public static abstract class _sifields_union extends Union {
		/** Conversion Error : sizeof(int) */
		/**
		 * kill().<br>
		 * C type : _kill_struct
		 */
		public _kill_struct _kill;
		/**
		 * POSIX.1b timers.<br>
		 * C type : _timer_struct
		 */
		public _timer_struct _timer;
		/**
		 * POSIX.1b signals.<br>
		 * C type : _rt_struct
		 */
		public _rt_struct _rt;
		/**
		 * SIGCHLD.<br>
		 * C type : _sigchld_struct
		 */
		public _sigchld_struct _sigchld;
		/**
		 * SIGILL, SIGFPE, SIGSEGV, SIGBUS.<br>
		 * C type : _sigfault_struct
		 */
		public _sigfault_struct _sigfault;
		/**
		 * SIGPOLL.<br>
		 * C type : _sigpoll_struct
		 */
		public _sigpoll_struct _sigpoll;
		/**
		 * SIGSYS.<br>
		 * C type : _sigsys_struct
		 */
		public _sigsys_struct _sigsys;
		/** <i>native declaration : bits/siginfo.h:239</i> */
		public static class _kill_struct extends Structure {
			/**
			 * Sending process ID.<br>
			 * C type : __pid_t
			 */
			public int si_pid;
			/**
			 * Real user ID of sending process.<br>
			 * C type : __uid_t
			 */
			public int si_uid;
			public _kill_struct() {
				super();
			}
			protected List<? > getFieldOrder() {
				return Arrays.asList("si_pid", "si_uid");
			}
			/**
			 * @param si_pid Sending process ID.<br>
			 * C type : __pid_t<br>
			 * @param si_uid Real user ID of sending process.<br>
			 * C type : __uid_t
			 */
			public _kill_struct(int si_pid, int si_uid) {
				super();
				this.si_pid = si_pid;
				this.si_uid = si_uid;
			}
			public static class ByReference extends _kill_struct implements Structure.ByReference {
				
			};
			public static class ByValue extends _kill_struct implements Structure.ByValue {
				
			};
		};
		/** <i>native declaration : bits/siginfo.h:244</i> */
		public static class _timer_struct extends Structure {
			/** Timer ID. */
			public int si_tid;
			/** Overrun count. */
			public int si_overrun;
			/**
			 * Signal value.<br>
			 * C type : sigval_t
			 */
			public sigval si_sigval;
			public _timer_struct() {
				super();
			}
			protected List<? > getFieldOrder() {
				return Arrays.asList("si_tid", "si_overrun", "si_sigval");
			}
			/**
			 * @param si_tid Timer ID.<br>
			 * @param si_overrun Overrun count.<br>
			 * @param si_sigval Signal value.<br>
			 * C type : sigval_t
			 */
			public _timer_struct(int si_tid, int si_overrun, sigval si_sigval) {
				super();
				this.si_tid = si_tid;
				this.si_overrun = si_overrun;
				this.si_sigval = si_sigval;
			}
			public static class ByReference extends _timer_struct implements Structure.ByReference {
				
			};
			public static class ByValue extends _timer_struct implements Structure.ByValue {
				
			};
		};
		/** <i>native declaration : bits/siginfo.h:249</i> */
		public static class _rt_struct extends Structure {
			/**
			 * Sending process ID.<br>
			 * C type : __pid_t
			 */
			public int si_pid;
			/**
			 * Real user ID of sending process.<br>
			 * C type : __uid_t
			 */
			public int si_uid;
			/**
			 * Signal value.<br>
			 * C type : sigval_t
			 */
			public sigval si_sigval;
			public _rt_struct() {
				super();
			}
			protected List<? > getFieldOrder() {
				return Arrays.asList("si_pid", "si_uid", "si_sigval");
			}
			/**
			 * @param si_pid Sending process ID.<br>
			 * C type : __pid_t<br>
			 * @param si_uid Real user ID of sending process.<br>
			 * C type : __uid_t<br>
			 * @param si_sigval Signal value.<br>
			 * C type : sigval_t
			 */
			public _rt_struct(int si_pid, int si_uid, sigval si_sigval) {
				super();
				this.si_pid = si_pid;
				this.si_uid = si_uid;
				this.si_sigval = si_sigval;
			}
			public static class ByReference extends _rt_struct implements Structure.ByReference {
				
			};
			public static class ByValue extends _rt_struct implements Structure.ByValue {
				
			};
		};
		/** <i>native declaration : bits/siginfo.h:256</i> */
		public static class _sigchld_struct extends Structure {
			/**
			 * Which child.<br>
			 * C type : __pid_t
			 */
			public int si_pid;
			/**
			 * Real user ID of sending process.<br>
			 * C type : __uid_t
			 */
			public int si_uid;
			/** Exit value or signal. */
			public int si_status;
			/** C type : __sigchld_clock_t */
			public NativeLong si_utime;
			/** C type : __sigchld_clock_t */
			public NativeLong si_stime;
			public _sigchld_struct() {
				super();
			}
			protected List<? > getFieldOrder() {
				return Arrays.asList("si_pid", "si_uid", "si_status", "si_utime", "si_stime");
			}
			/**
			 * @param si_pid Which child.<br>
			 * C type : __pid_t<br>
			 * @param si_uid Real user ID of sending process.<br>
			 * C type : __uid_t<br>
			 * @param si_status Exit value or signal.<br>
			 * @param si_utime C type : __sigchld_clock_t<br>
			 * @param si_stime C type : __sigchld_clock_t
			 */
			public _sigchld_struct(int si_pid, int si_uid, int si_status, NativeLong si_utime, NativeLong si_stime) {
				super();
				this.si_pid = si_pid;
				this.si_uid = si_uid;
				this.si_status = si_status;
				this.si_utime = si_utime;
				this.si_stime = si_stime;
			}
			public static class ByReference extends _sigchld_struct implements Structure.ByReference {
				
			};
			public static class ByValue extends _sigchld_struct implements Structure.ByValue {
				
			};
		};
		/** <i>native declaration : bits/siginfo.h:259</i> */
		public static class _sigfault_struct extends Structure {
			/**
			 * Faulting insn/memory ref.<br>
			 * C type : void*
			 */
			public Pointer si_addr;
			public _sigfault_struct() {
				super();
			}
			protected List<? > getFieldOrder() {
				return Arrays.asList("si_addr");
			}
			/**
			 * @param si_addr Faulting insn/memory ref.<br>
			 * C type : void*
			 */
			public _sigfault_struct(Pointer si_addr) {
				super();
				this.si_addr = si_addr;
			}
			public static class ByReference extends _sigfault_struct implements Structure.ByReference {
				
			};
			public static class ByValue extends _sigfault_struct implements Structure.ByValue {
				
			};
		};
		/** <i>native declaration : bits/siginfo.h:263</i> */
		public static class _sigpoll_struct extends Structure {
			/** Band event for SIGPOLL. */
			public NativeLong si_band;
			public int si_fd;
			public _sigpoll_struct() {
				super();
			}
			protected List<? > getFieldOrder() {
				return Arrays.asList("si_band", "si_fd");
			}
			/** @param si_band Band event for SIGPOLL. */
			public _sigpoll_struct(NativeLong si_band, int si_fd) {
				super();
				this.si_band = si_band;
				this.si_fd = si_fd;
			}
			public static class ByReference extends _sigpoll_struct implements Structure.ByReference {
				
			};
			public static class ByValue extends _sigpoll_struct implements Structure.ByValue {
				
			};
		};
		/** <i>native declaration : bits/siginfo.h:268</i> */
		public static class _sigsys_struct extends Structure {
			/**
			 * Calling user insn.<br>
			 * C type : void*
			 */
			public Pointer _call_addr;
			/** Triggering system call number. */
			public int _syscall;
			/** AUDIT_ARCH_* of syscall. */
			public int _arch;
			public _sigsys_struct() {
				super();
			}
			protected List<? > getFieldOrder() {
				return Arrays.asList("_call_addr", "_syscall", "_arch");
			}
			/**
			 * @param _call_addr Calling user insn.<br>
			 * C type : void*<br>
			 * @param _syscall Triggering system call number.<br>
			 * @param _arch AUDIT_ARCH_* of syscall.
			 */
			public _sigsys_struct(Pointer _call_addr, int _syscall, int _arch) {
				super();
				this._call_addr = _call_addr;
				this._syscall = _syscall;
				this._arch = _arch;
			}
			public static class ByReference extends _sigsys_struct implements Structure.ByReference {
				
			};
			public static class ByValue extends _sigsys_struct implements Structure.ByValue {
				
			};
		};
		public _sifields_union() {
			super();
		}
		/**
		 * @param _kill kill().<br>
		 * C type : _kill_struct
		 */
		public _sifields_union(_kill_struct _kill) {
			super();
			this._kill = _kill;
			setType(_kill_struct.class);
		}
		/**
		 * @param _rt POSIX.1b signals.<br>
		 * C type : _rt_struct
		 */
		public _sifields_union(_rt_struct _rt) {
			super();
			this._rt = _rt;
			setType(_rt_struct.class);
		}
		/**
		 * @param _sigfault SIGILL, SIGFPE, SIGSEGV, SIGBUS.<br>
		 * C type : _sigfault_struct
		 */
		public _sifields_union(_sigfault_struct _sigfault) {
			super();
			this._sigfault = _sigfault;
			setType(_sigfault_struct.class);
		}
		/**
		 * @param _sigsys SIGSYS.<br>
		 * C type : _sigsys_struct
		 */
		public _sifields_union(_sigsys_struct _sigsys) {
			super();
			this._sigsys = _sigsys;
			setType(_sigsys_struct.class);
		}
		/**
		 * @param _sigpoll SIGPOLL.<br>
		 * C type : _sigpoll_struct
		 */
		public _sifields_union(_sigpoll_struct _sigpoll) {
			super();
			this._sigpoll = _sigpoll;
			setType(_sigpoll_struct.class);
		}
		/**
		 * @param _sigchld SIGCHLD.<br>
		 * C type : _sigchld_struct
		 */
		public _sifields_union(_sigchld_struct _sigchld) {
			super();
			this._sigchld = _sigchld;
			setType(_sigchld_struct.class);
		}
		/**
		 * @param _timer POSIX.1b timers.<br>
		 * C type : _timer_struct
		 */
		public _sifields_union(_timer_struct _timer) {
			super();
			this._timer = _timer;
			setType(_timer_struct.class);
		}
		public static abstract class ByReference extends _sifields_union implements Structure.ByReference {
			
		};
		public static abstract class ByValue extends _sifields_union implements Structure.ByValue {
			
		};
	};
	public siginfo_t() {
		super();
	}
	protected List<? > getFieldOrder() {
		return Arrays.asList("si_signo", "si_errno", "si_code", "_sifields");
	}
	/**
	 * @param si_signo Signal number.<br>
	 * @param si_errno If non-zero, an errno value associated with<br>
	 * this signal, as defined in <errno.h>.<br>
	 * @param si_code Signal code.<br>
	 * @param _sifields C type : _sifields_union
	 */
	public siginfo_t(int si_signo, int si_errno, int si_code, _sifields_union _sifields) {
		super();
		this.si_signo = si_signo;
		this.si_errno = si_errno;
		this.si_code = si_code;
		this._sifields = _sifields;
	}
	public static class ByReference extends siginfo_t implements Structure.ByReference {
		
	};
	public static class ByValue extends siginfo_t implements Structure.ByValue {
		
	};
}
