package c;
import com.sun.jna.NativeLong;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * POSIX.1b structure for a time value.  This is like a `struct timeval' but<br>
 * has nanoseconds instead of microseconds.<br>
 * <i>native declaration : time.h:140</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class timespec extends Structure {
	/**
	 * Seconds.<br>
	 * C type : __time_t
	 */
	public NativeLong tv_sec;
	/**
	 * Nanoseconds.<br>
	 * C type : __syscall_slong_t
	 */
	public NativeLong tv_nsec;
	public timespec() {
		super();
	}
	protected List<? > getFieldOrder() {
		return Arrays.asList("tv_sec", "tv_nsec");
	}
	/**
	 * @param tv_sec Seconds.<br>
	 * C type : __time_t<br>
	 * @param tv_nsec Nanoseconds.<br>
	 * C type : __syscall_slong_t
	 */
	public timespec(NativeLong tv_sec, NativeLong tv_nsec) {
		super();
		this.tv_sec = tv_sec;
		this.tv_nsec = tv_nsec;
	}
	public static class ByReference extends timespec implements Structure.ByReference {
		
	};
	public static class ByValue extends timespec implements Structure.ByValue {
		
	};
}
